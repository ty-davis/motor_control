
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fcc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800408c  0800408c  0000508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040fc  080040fc  00006024  2**0
                  CONTENTS
  4 .ARM          00000008  080040fc  080040fc  000050fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004104  08004104  00006024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004104  08004104  00005104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004108  08004108  00005108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  0800410c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000024  08004130  00006024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08004130  00006254  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e75f  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241f  00000000  00000000  000147ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00016bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000922  00000000  00000000  000177b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000116f9  00000000  00000000  000180da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeb0  00000000  00000000  000297d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069c96  00000000  00000000  00038683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000a235c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a4ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004074 	.word	0x08004074

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08004074 	.word	0x08004074

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <hb>:
    INTL_ERROR = 80,   // 0x50
};



uint8_t hb(uint16_t val) { return (uint8_t)((val >> 8) & 0xFF); }
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	0002      	movs	r2, r0
 8000454:	1dbb      	adds	r3, r7, #6
 8000456:	801a      	strh	r2, [r3, #0]
 8000458:	1dbb      	adds	r3, r7, #6
 800045a:	881b      	ldrh	r3, [r3, #0]
 800045c:	0a1b      	lsrs	r3, r3, #8
 800045e:	b29b      	uxth	r3, r3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	0018      	movs	r0, r3
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}

0800046a <lb>:

uint8_t lb(uint16_t val) { return (uint8_t)(val & 0xFF); }
 800046a:	b580      	push	{r7, lr}
 800046c:	b082      	sub	sp, #8
 800046e:	af00      	add	r7, sp, #0
 8000470:	0002      	movs	r2, r0
 8000472:	1dbb      	adds	r3, r7, #6
 8000474:	801a      	strh	r2, [r3, #0]
 8000476:	1dbb      	adds	r3, r7, #6
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	0018      	movs	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}

08000484 <ParseCommand>:


void ParseCommand(uint8_t *message, uint8_t length) {
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b09e      	sub	sp, #120	@ 0x78
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	000a      	movs	r2, r1
 800048e:	1cfb      	adds	r3, r7, #3
 8000490:	701a      	strb	r2, [r3, #0]
	uint8_t status = message[0];
 8000492:	2076      	movs	r0, #118	@ 0x76
 8000494:	183b      	adds	r3, r7, r0
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	701a      	strb	r2, [r3, #0]
	uint8_t version = message[1];
 800049c:	2575      	movs	r5, #117	@ 0x75
 800049e:	197b      	adds	r3, r7, r5
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	7852      	ldrb	r2, [r2, #1]
 80004a4:	701a      	strb	r2, [r3, #0]
	uint8_t msg_length = message[2];
 80004a6:	2474      	movs	r4, #116	@ 0x74
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	7892      	ldrb	r2, [r2, #2]
 80004ae:	701a      	strb	r2, [r3, #0]
	uint8_t response_len;


	// some debug stuff
	uint8_t uart_buf[50];
	uart_buf[0] = status;
 80004b0:	210c      	movs	r1, #12
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	183a      	adds	r2, r7, r0
 80004b6:	7812      	ldrb	r2, [r2, #0]
 80004b8:	701a      	strb	r2, [r3, #0]
	uart_buf[1] = msg_length;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	193a      	adds	r2, r7, r4
 80004be:	7812      	ldrb	r2, [r2, #0]
 80004c0:	705a      	strb	r2, [r3, #1]
	uart_buf[2] = length;
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	1cfa      	adds	r2, r7, #3
 80004c6:	7812      	ldrb	r2, [r2, #0]
 80004c8:	709a      	strb	r2, [r3, #2]
	uint8_t uart_buf_len = 3;
 80004ca:	2073      	movs	r0, #115	@ 0x73
 80004cc:	183b      	adds	r3, r7, r0
 80004ce:	2203      	movs	r2, #3
 80004d0:	701a      	strb	r2, [r3, #0]
//	uint8_t uart_buf_len = sprintf(uart_buf, "%d", msg_length, length);
	HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);
 80004d2:	183b      	adds	r3, r7, r0
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	1879      	adds	r1, r7, r1
 80004da:	487a      	ldr	r0, [pc, #488]	@ (80006c4 <ParseCommand+0x240>)
 80004dc:	2364      	movs	r3, #100	@ 0x64
 80004de:	f002 fa35 	bl	800294c <HAL_UART_Transmit>




	if (version != 0 || length - MSG_HEADER_SIZE != msg_length) {
 80004e2:	197b      	adds	r3, r7, r5
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d106      	bne.n	80004f8 <ParseCommand+0x74>
 80004ea:	1cfb      	adds	r3, r7, #3
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	1eda      	subs	r2, r3, #3
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d010      	beq.n	800051a <ParseCommand+0x96>
		response[0] = BAD_REQUEST;
 80004f8:	2140      	movs	r1, #64	@ 0x40
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2240      	movs	r2, #64	@ 0x40
 80004fe:	701a      	strb	r2, [r3, #0]
		response_len = 1;
 8000500:	2077      	movs	r0, #119	@ 0x77
 8000502:	183b      	adds	r3, r7, r0
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, response, response_len, 100);
 8000508:	183b      	adds	r3, r7, r0
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	b29a      	uxth	r2, r3
 800050e:	1879      	adds	r1, r7, r1
 8000510:	486c      	ldr	r0, [pc, #432]	@ (80006c4 <ParseCommand+0x240>)
 8000512:	2364      	movs	r3, #100	@ 0x64
 8000514:	f002 fa1a 	bl	800294c <HAL_UART_Transmit>
 8000518:	e0d1      	b.n	80006be <ParseCommand+0x23a>
		return;
	}


	switch (status) {
 800051a:	2376      	movs	r3, #118	@ 0x76
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b53      	cmp	r3, #83	@ 0x53
 8000522:	d100      	bne.n	8000526 <ParseCommand+0xa2>
 8000524:	e09e      	b.n	8000664 <ParseCommand+0x1e0>
 8000526:	dd00      	ble.n	800052a <ParseCommand+0xa6>
 8000528:	e0b7      	b.n	800069a <ParseCommand+0x216>
 800052a:	2b51      	cmp	r3, #81	@ 0x51
 800052c:	d100      	bne.n	8000530 <ParseCommand+0xac>
 800052e:	e07e      	b.n	800062e <ParseCommand+0x1aa>
 8000530:	dd00      	ble.n	8000534 <ParseCommand+0xb0>
 8000532:	e0b2      	b.n	800069a <ParseCommand+0x216>
 8000534:	2b43      	cmp	r3, #67	@ 0x43
 8000536:	d05f      	beq.n	80005f8 <ParseCommand+0x174>
 8000538:	dd00      	ble.n	800053c <ParseCommand+0xb8>
 800053a:	e0ae      	b.n	800069a <ParseCommand+0x216>
 800053c:	2b41      	cmp	r3, #65	@ 0x41
 800053e:	d040      	beq.n	80005c2 <ParseCommand+0x13e>
 8000540:	dd00      	ble.n	8000544 <ParseCommand+0xc0>
 8000542:	e0aa      	b.n	800069a <ParseCommand+0x216>
 8000544:	2b10      	cmp	r3, #16
 8000546:	d002      	beq.n	800054e <ParseCommand+0xca>
 8000548:	2b20      	cmp	r3, #32
 800054a:	d035      	beq.n	80005b8 <ParseCommand+0x134>
 800054c:	e0a5      	b.n	800069a <ParseCommand+0x216>
		case GET_POSITION:
			response[0] = OK_PAYLOAD;
 800054e:	2440      	movs	r4, #64	@ 0x40
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2210      	movs	r2, #16
 8000554:	701a      	strb	r2, [r3, #0]
			response[1] = hb(azm_motor_state.motor_position);
 8000556:	4b5c      	ldr	r3, [pc, #368]	@ (80006c8 <ParseCommand+0x244>)
 8000558:	220a      	movs	r2, #10
 800055a:	5e9b      	ldrsh	r3, [r3, r2]
 800055c:	b29b      	uxth	r3, r3
 800055e:	0018      	movs	r0, r3
 8000560:	f7ff ff74 	bl	800044c <hb>
 8000564:	0003      	movs	r3, r0
 8000566:	001a      	movs	r2, r3
 8000568:	193b      	adds	r3, r7, r4
 800056a:	705a      	strb	r2, [r3, #1]
			response[2] = lb(azm_motor_state.motor_position);
 800056c:	4b56      	ldr	r3, [pc, #344]	@ (80006c8 <ParseCommand+0x244>)
 800056e:	220a      	movs	r2, #10
 8000570:	5e9b      	ldrsh	r3, [r3, r2]
 8000572:	b29b      	uxth	r3, r3
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff ff78 	bl	800046a <lb>
 800057a:	0003      	movs	r3, r0
 800057c:	001a      	movs	r2, r3
 800057e:	193b      	adds	r3, r7, r4
 8000580:	709a      	strb	r2, [r3, #2]
			response[3] = hb(elv_motor_state.motor_position);
 8000582:	4b52      	ldr	r3, [pc, #328]	@ (80006cc <ParseCommand+0x248>)
 8000584:	220a      	movs	r2, #10
 8000586:	5e9b      	ldrsh	r3, [r3, r2]
 8000588:	b29b      	uxth	r3, r3
 800058a:	0018      	movs	r0, r3
 800058c:	f7ff ff5e 	bl	800044c <hb>
 8000590:	0003      	movs	r3, r0
 8000592:	001a      	movs	r2, r3
 8000594:	193b      	adds	r3, r7, r4
 8000596:	70da      	strb	r2, [r3, #3]
			response[4] = lb(elv_motor_state.motor_position);
 8000598:	4b4c      	ldr	r3, [pc, #304]	@ (80006cc <ParseCommand+0x248>)
 800059a:	220a      	movs	r2, #10
 800059c:	5e9b      	ldrsh	r3, [r3, r2]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff ff62 	bl	800046a <lb>
 80005a6:	0003      	movs	r3, r0
 80005a8:	001a      	movs	r2, r3
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	711a      	strb	r2, [r3, #4]
			response_len = 5;
 80005ae:	2377      	movs	r3, #119	@ 0x77
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	2205      	movs	r2, #5
 80005b4:	701a      	strb	r2, [r3, #0]
			break;
 80005b6:	e078      	b.n	80006aa <ParseCommand+0x226>
		case GET_SPEED: // TODO: FINISH
			response[0] = OK_PAYLOAD;
 80005b8:	2340      	movs	r3, #64	@ 0x40
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	2210      	movs	r2, #16
 80005be:	701a      	strb	r2, [r3, #0]
			break;
 80005c0:	e073      	b.n	80006aa <ParseCommand+0x226>
		case GET_AZM_TOOTH:
			response[0] = OK_PAYLOAD;
 80005c2:	2440      	movs	r4, #64	@ 0x40
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2210      	movs	r2, #16
 80005c8:	701a      	strb	r2, [r3, #0]
			response[1] = hb(azm_motor_state.tooth_ratio);
 80005ca:	4b3f      	ldr	r3, [pc, #252]	@ (80006c8 <ParseCommand+0x244>)
 80005cc:	891b      	ldrh	r3, [r3, #8]
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff ff3c 	bl	800044c <hb>
 80005d4:	0003      	movs	r3, r0
 80005d6:	001a      	movs	r2, r3
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	705a      	strb	r2, [r3, #1]
			response[2] = lb(azm_motor_state.tooth_ratio);
 80005dc:	4b3a      	ldr	r3, [pc, #232]	@ (80006c8 <ParseCommand+0x244>)
 80005de:	891b      	ldrh	r3, [r3, #8]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff42 	bl	800046a <lb>
 80005e6:	0003      	movs	r3, r0
 80005e8:	001a      	movs	r2, r3
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	709a      	strb	r2, [r3, #2]
			response_len = 3;
 80005ee:	2377      	movs	r3, #119	@ 0x77
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	2203      	movs	r2, #3
 80005f4:	701a      	strb	r2, [r3, #0]
			break;
 80005f6:	e058      	b.n	80006aa <ParseCommand+0x226>
		case GET_ELV_TOOTH:
			response[0] = OK_PAYLOAD;
 80005f8:	2440      	movs	r4, #64	@ 0x40
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2210      	movs	r2, #16
 80005fe:	701a      	strb	r2, [r3, #0]
			response[1] = hb(elv_motor_state.tooth_ratio);
 8000600:	4b32      	ldr	r3, [pc, #200]	@ (80006cc <ParseCommand+0x248>)
 8000602:	891b      	ldrh	r3, [r3, #8]
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff ff21 	bl	800044c <hb>
 800060a:	0003      	movs	r3, r0
 800060c:	001a      	movs	r2, r3
 800060e:	193b      	adds	r3, r7, r4
 8000610:	705a      	strb	r2, [r3, #1]
			response[2] = lb(elv_motor_state.tooth_ratio);
 8000612:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <ParseCommand+0x248>)
 8000614:	891b      	ldrh	r3, [r3, #8]
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ff27 	bl	800046a <lb>
 800061c:	0003      	movs	r3, r0
 800061e:	001a      	movs	r2, r3
 8000620:	193b      	adds	r3, r7, r4
 8000622:	709a      	strb	r2, [r3, #2]
			response_len = 3;
 8000624:	2377      	movs	r3, #119	@ 0x77
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	2203      	movs	r2, #3
 800062a:	701a      	strb	r2, [r3, #0]
			break;
 800062c:	e03d      	b.n	80006aa <ParseCommand+0x226>
		case GET_AZM_STEP:
			response[0] = OK_PAYLOAD;
 800062e:	2440      	movs	r4, #64	@ 0x40
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2210      	movs	r2, #16
 8000634:	701a      	strb	r2, [r3, #0]
			response[1] = hb(azm_motor_state.motor_pulse_rev);
 8000636:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <ParseCommand+0x244>)
 8000638:	88db      	ldrh	r3, [r3, #6]
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ff06 	bl	800044c <hb>
 8000640:	0003      	movs	r3, r0
 8000642:	001a      	movs	r2, r3
 8000644:	193b      	adds	r3, r7, r4
 8000646:	705a      	strb	r2, [r3, #1]
			response[2] = lb(elv_motor_state.motor_pulse_rev);
 8000648:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <ParseCommand+0x248>)
 800064a:	88db      	ldrh	r3, [r3, #6]
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff ff0c 	bl	800046a <lb>
 8000652:	0003      	movs	r3, r0
 8000654:	001a      	movs	r2, r3
 8000656:	193b      	adds	r3, r7, r4
 8000658:	709a      	strb	r2, [r3, #2]
			response_len = 3;
 800065a:	2377      	movs	r3, #119	@ 0x77
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	2203      	movs	r2, #3
 8000660:	701a      	strb	r2, [r3, #0]
			break;
 8000662:	e022      	b.n	80006aa <ParseCommand+0x226>
		case GET_ELV_STEP:
			response[0] = OK_PAYLOAD;
 8000664:	2440      	movs	r4, #64	@ 0x40
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2210      	movs	r2, #16
 800066a:	701a      	strb	r2, [r3, #0]
			response[1] = hb(elv_motor_state.motor_pulse_rev);
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <ParseCommand+0x248>)
 800066e:	88db      	ldrh	r3, [r3, #6]
 8000670:	0018      	movs	r0, r3
 8000672:	f7ff feeb 	bl	800044c <hb>
 8000676:	0003      	movs	r3, r0
 8000678:	001a      	movs	r2, r3
 800067a:	193b      	adds	r3, r7, r4
 800067c:	705a      	strb	r2, [r3, #1]
			response[2] = lb(elv_motor_state.motor_pulse_rev);
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <ParseCommand+0x248>)
 8000680:	88db      	ldrh	r3, [r3, #6]
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff fef1 	bl	800046a <lb>
 8000688:	0003      	movs	r3, r0
 800068a:	001a      	movs	r2, r3
 800068c:	193b      	adds	r3, r7, r4
 800068e:	709a      	strb	r2, [r3, #2]
			response_len = 3;
 8000690:	2377      	movs	r3, #119	@ 0x77
 8000692:	18fb      	adds	r3, r7, r3
 8000694:	2203      	movs	r2, #3
 8000696:	701a      	strb	r2, [r3, #0]
			break;
 8000698:	e007      	b.n	80006aa <ParseCommand+0x226>
		default:
			response[0] = BAD_REQUEST;
 800069a:	2340      	movs	r3, #64	@ 0x40
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	2240      	movs	r2, #64	@ 0x40
 80006a0:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 80006a2:	2377      	movs	r3, #119	@ 0x77
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart2, response, response_len, 100);
 80006aa:	2377      	movs	r3, #119	@ 0x77
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	2340      	movs	r3, #64	@ 0x40
 80006b4:	18f9      	adds	r1, r7, r3
 80006b6:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <ParseCommand+0x240>)
 80006b8:	2364      	movs	r3, #100	@ 0x64
 80006ba:	f002 f947 	bl	800294c <HAL_UART_Transmit>
}
 80006be:	46bd      	mov	sp, r7
 80006c0:	b01e      	add	sp, #120	@ 0x78
 80006c2:	bdb0      	pop	{r4, r5, r7, pc}
 80006c4:	200000c0 	.word	0x200000c0
 80006c8:	20000000 	.word	0x20000000
 80006cc:	2000000c 	.word	0x2000000c

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fb7c 	bl	8000dd0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f816 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 f962 	bl	80009a4 <MX_GPIO_Init>
  MX_TIM21_Init();
 80006e0:	f000 f884 	bl	80007ec <MX_TIM21_Init>
  MX_TIM22_Init();
 80006e4:	f000 f8d8 	bl	8000898 <MX_TIM22_Init>
  MX_USART2_UART_Init();
 80006e8:	f000 f92c 	bl	8000944 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)"00", 2, 100);
 80006ec:	4904      	ldr	r1, [pc, #16]	@ (8000700 <main+0x30>)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <main+0x34>)
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	2202      	movs	r2, #2
 80006f4:	f002 f92a 	bl	800294c <HAL_UART_Transmit>
  UART_StartReceiving();
 80006f8:	f000 fabc 	bl	8000c74 <UART_StartReceiving>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	e7fd      	b.n	80006fc <main+0x2c>
 8000700:	0800408c 	.word	0x0800408c
 8000704:	200000c0 	.word	0x200000c0

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b099      	sub	sp, #100	@ 0x64
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	242c      	movs	r4, #44	@ 0x2c
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	2334      	movs	r3, #52	@ 0x34
 8000716:	001a      	movs	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f003 fc7f 	bl	800401c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071e:	2318      	movs	r3, #24
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	0018      	movs	r0, r3
 8000724:	2314      	movs	r3, #20
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f003 fc77 	bl	800401c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072e:	003b      	movs	r3, r7
 8000730:	0018      	movs	r0, r3
 8000732:	2318      	movs	r3, #24
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f003 fc70 	bl	800401c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <SystemClock_Config+0xdc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a29      	ldr	r2, [pc, #164]	@ (80007e8 <SystemClock_Config+0xe0>)
 8000742:	401a      	ands	r2, r3
 8000744:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <SystemClock_Config+0xdc>)
 8000746:	2180      	movs	r1, #128	@ 0x80
 8000748:	0109      	lsls	r1, r1, #4
 800074a:	430a      	orrs	r2, r1
 800074c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074e:	0021      	movs	r1, r4
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2202      	movs	r2, #2
 8000754:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2201      	movs	r2, #1
 800075a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2210      	movs	r2, #16
 8000760:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2202      	movs	r2, #2
 8000766:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	0412      	lsls	r2, r2, #16
 800077a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	187b      	adds	r3, r7, r1
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fe98 	bl	80014b4 <HAL_RCC_OscConfig>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000788:	f000 f97a 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	2118      	movs	r1, #24
 800078e:	187b      	adds	r3, r7, r1
 8000790:	220f      	movs	r2, #15
 8000792:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2203      	movs	r2, #3
 8000798:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 f9fb 	bl	8001bac <HAL_RCC_ClockConfig>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ba:	f000 f961 	bl	8000a80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007be:	003b      	movs	r3, r7
 80007c0:	2202      	movs	r2, #2
 80007c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	003b      	movs	r3, r7
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fbf1 	bl	8001fb4 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007d6:	f000 f953 	bl	8000a80 <Error_Handler>
  }
}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b019      	add	sp, #100	@ 0x64
 80007e0:	bd90      	pop	{r4, r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	40007000 	.word	0x40007000
 80007e8:	ffffe7ff 	.word	0xffffe7ff

080007ec <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	2308      	movs	r3, #8
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	2310      	movs	r3, #16
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 fc0d 	bl	800401c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000802:	003b      	movs	r3, r7
 8000804:	0018      	movs	r0, r3
 8000806:	2308      	movs	r3, #8
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f003 fc06 	bl	800401c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000810:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <MX_TIM21_Init+0xa0>)
 8000812:	4a1f      	ldr	r2, [pc, #124]	@ (8000890 <MX_TIM21_Init+0xa4>)
 8000814:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 9;
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_TIM21_Init+0xa0>)
 8000818:	2209      	movs	r2, #9
 800081a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <MX_TIM21_Init+0xa0>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 60592;
 8000822:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_TIM21_Init+0xa0>)
 8000824:	4a1b      	ldr	r2, [pc, #108]	@ (8000894 <MX_TIM21_Init+0xa8>)
 8000826:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_TIM21_Init+0xa0>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_TIM21_Init+0xa0>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_TIM21_Init+0xa0>)
 8000836:	0018      	movs	r0, r3
 8000838:	f001 fce8 	bl	800220c <HAL_TIM_Base_Init>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000840:	f000 f91e 	bl	8000a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	2108      	movs	r1, #8
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2280      	movs	r2, #128	@ 0x80
 800084a:	0152      	lsls	r2, r2, #5
 800084c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800084e:	187a      	adds	r2, r7, r1
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_TIM21_Init+0xa0>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f001 fde5 	bl	8002424 <HAL_TIM_ConfigClockSource>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 800085e:	f000 f90f 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	003b      	movs	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800086e:	003a      	movs	r2, r7
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_TIM21_Init+0xa0>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f001 ffbd 	bl	80027f4 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 800087e:	f000 f8ff 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b006      	add	sp, #24
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	20000040 	.word	0x20000040
 8000890:	40010800 	.word	0x40010800
 8000894:	0000ecb0 	.word	0x0000ecb0

08000898 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	2308      	movs	r3, #8
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	0018      	movs	r0, r3
 80008a4:	2310      	movs	r3, #16
 80008a6:	001a      	movs	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	f003 fbb7 	bl	800401c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ae:	003b      	movs	r3, r7
 80008b0:	0018      	movs	r0, r3
 80008b2:	2308      	movs	r3, #8
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f003 fbb0 	bl	800401c <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80008bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_TIM22_Init+0xa0>)
 80008be:	4a1f      	ldr	r2, [pc, #124]	@ (800093c <MX_TIM22_Init+0xa4>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_TIM22_Init+0xa0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_TIM22_Init+0xa0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_TIM22_Init+0xa0>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000940 <MX_TIM22_Init+0xa8>)
 80008d2:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_TIM22_Init+0xa0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_TIM22_Init+0xa0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_TIM22_Init+0xa0>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 fc92 	bl	800220c <HAL_TIM_Base_Init>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f8c8 	bl	8000a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f0:	2108      	movs	r1, #8
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0152      	lsls	r2, r2, #5
 80008f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80008fa:	187a      	adds	r2, r7, r1
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_TIM22_Init+0xa0>)
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fd8f 	bl	8002424 <HAL_TIM_ConfigClockSource>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_TIM22_Init+0x76>
  {
    Error_Handler();
 800090a:	f000 f8b9 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	003b      	movs	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	003b      	movs	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 800091a:	003a      	movs	r2, r7
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_TIM22_Init+0xa0>)
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f001 ff67 	bl	80027f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 800092a:	f000 f8a9 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b006      	add	sp, #24
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	20000080 	.word	0x20000080
 800093c:	40011400 	.word	0x40011400
 8000940:	0000ffff 	.word	0x0000ffff

08000944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USART2_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	@ (80009a0 <MX_USART2_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_USART2_UART_Init+0x58>)
 8000950:	22e1      	movs	r2, #225	@ 0xe1
 8000952:	0252      	lsls	r2, r2, #9
 8000954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART2_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_USART2_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART2_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART2_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000986:	4b05      	ldr	r3, [pc, #20]	@ (800099c <MX_USART2_UART_Init+0x58>)
 8000988:	0018      	movs	r0, r3
 800098a:	f001 ff8b 	bl	80028a4 <HAL_UART_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f875 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000c0 	.word	0x200000c0
 80009a0:	40004400 	.word	0x40004400

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b089      	sub	sp, #36	@ 0x24
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	240c      	movs	r4, #12
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0018      	movs	r0, r3
 80009b0:	2314      	movs	r3, #20
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f003 fb31 	bl	800401c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 80009bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009be:	4b2e      	ldr	r3, [pc, #184]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 80009c0:	2180      	movs	r1, #128	@ 0x80
 80009c2:	430a      	orrs	r2, r1
 80009c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 80009c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b29      	ldr	r3, [pc, #164]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 80009d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009d6:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 80009d8:	2101      	movs	r1, #1
 80009da:	430a      	orrs	r2, r1
 80009dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009de:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 80009e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e2:	2201      	movs	r2, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 80009ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009ee:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 80009f0:	2102      	movs	r1, #2
 80009f2:	430a      	orrs	r2, r1
 80009f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009f6:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <MX_GPIO_Init+0xd4>)
 80009f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fa:	2202      	movs	r2, #2
 80009fc:	4013      	ands	r3, r2
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a02:	2387      	movs	r3, #135	@ 0x87
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	481d      	ldr	r0, [pc, #116]	@ (8000a7c <MX_GPIO_Init+0xd8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	f000 fd34 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000a10:	23a0      	movs	r3, #160	@ 0xa0
 8000a12:	00d9      	lsls	r1, r3, #3
 8000a14:	23a0      	movs	r3, #160	@ 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	2200      	movs	r2, #0
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fd2c 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2287      	movs	r2, #135	@ 0x87
 8000a24:	00d2      	lsls	r2, r2, #3
 8000a26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2211      	movs	r2, #17
 8000a2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a7c <MX_GPIO_Init+0xd8>)
 8000a3e:	0019      	movs	r1, r3
 8000a40:	0010      	movs	r0, r2
 8000a42:	f000 fb9b 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000a46:	0021      	movs	r1, r4
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	22a0      	movs	r2, #160	@ 0xa0
 8000a4c:	00d2      	lsls	r2, r2, #3
 8000a4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2211      	movs	r2, #17
 8000a54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	187a      	adds	r2, r7, r1
 8000a64:	23a0      	movs	r3, #160	@ 0xa0
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fb86 	bl	800117c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b009      	add	sp, #36	@ 0x24
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	50000400 	.word	0x50000400

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <HAL_TIM_PeriodElapsedCallback>:
#include "motor_controls.h"
#include "stm32l0xx_it.h"

extern UART_HandleTypeDef huart2;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	uint8_t msg[10];
	msg[0] = 64;
 8000a94:	210c      	movs	r1, #12
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2240      	movs	r2, #64	@ 0x40
 8000a9a:	701a      	strb	r2, [r3, #0]
	uint8_t msg_len = 1;
 8000a9c:	2017      	movs	r0, #23
 8000a9e:	183b      	adds	r3, r7, r0
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, msg, msg_len, 100);
 8000aa4:	183b      	adds	r3, r7, r0
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	1879      	adds	r1, r7, r1
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000aae:	2364      	movs	r3, #100	@ 0x64
 8000ab0:	f001 ff4c 	bl	800294c <HAL_UART_Transmit>
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b006      	add	sp, #24
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000c0 	.word	0x200000c0

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <HAL_MspInit+0x24>)
 8000ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x24>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	430a      	orrs	r2, r1
 8000ace:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad0:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <HAL_MspInit+0x24>)
 8000ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <HAL_MspInit+0x24>)
 8000ad6:	2180      	movs	r1, #128	@ 0x80
 8000ad8:	0549      	lsls	r1, r1, #21
 8000ada:	430a      	orrs	r2, r1
 8000adc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <HAL_TIM_Base_MspInit+0x60>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d10e      	bne.n	8000b18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <HAL_TIM_Base_MspInit+0x64>)
 8000afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <HAL_TIM_Base_MspInit+0x64>)
 8000b00:	2104      	movs	r1, #4
 8000b02:	430a      	orrs	r2, r1
 8000b04:	635a      	str	r2, [r3, #52]	@ 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 1, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2101      	movs	r1, #1
 8000b0a:	2014      	movs	r0, #20
 8000b0c:	f000 fa7c 	bl	8001008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000b10:	2014      	movs	r0, #20
 8000b12:	f000 fa8e 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8000b16:	e012      	b.n	8000b3e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM22)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b50 <HAL_TIM_Base_MspInit+0x68>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d10d      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_TIM_Base_MspInit+0x64>)
 8000b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_TIM_Base_MspInit+0x64>)
 8000b28:	2120      	movs	r1, #32
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 1, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2101      	movs	r1, #1
 8000b32:	2016      	movs	r0, #22
 8000b34:	f000 fa68 	bl	8001008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8000b38:	2016      	movs	r0, #22
 8000b3a:	f000 fa7a 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40011400 	.word	0x40011400

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	240c      	movs	r4, #12
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	0018      	movs	r0, r3
 8000b62:	2314      	movs	r3, #20
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f003 fa58 	bl	800401c <memset>
  if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1c      	ldr	r2, [pc, #112]	@ (8000be4 <HAL_UART_MspInit+0x90>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d131      	bne.n	8000bda <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <HAL_UART_MspInit+0x94>)
 8000b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <HAL_UART_MspInit+0x94>)
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	0289      	lsls	r1, r1, #10
 8000b80:	430a      	orrs	r2, r1
 8000b82:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_UART_MspInit+0x94>)
 8000b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <HAL_UART_MspInit+0x94>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_UART_MspInit+0x94>)
 8000b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b94:	2201      	movs	r2, #1
 8000b96:	4013      	ands	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b9c:	0021      	movs	r1, r4
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	220c      	movs	r2, #12
 8000ba2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2204      	movs	r2, #4
 8000bba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	187a      	adds	r2, r7, r1
 8000bbe:	23a0      	movs	r3, #160	@ 0xa0
 8000bc0:	05db      	lsls	r3, r3, #23
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f000 fad9 	bl	800117c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	201c      	movs	r0, #28
 8000bd0:	f000 fa1a 	bl	8001008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd4:	201c      	movs	r0, #28
 8000bd6:	f000 fa2c 	bl	8001032 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b009      	add	sp, #36	@ 0x24
 8000be0:	bd90      	pop	{r4, r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40021000 	.word	0x40021000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	e7fd      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	e7fd      	b.n	8000bf8 <HardFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f930 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <TIM21_IRQHandler+0x14>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 fb30 	bl	800228c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	20000040 	.word	0x20000040

08000c38 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8000c3c:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <TIM22_IRQHandler+0x14>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f001 fb24 	bl	800228c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	20000080 	.word	0x20000080

08000c50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c54:	4b03      	ldr	r3, [pc, #12]	@ (8000c64 <USART2_IRQHandler+0x14>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f001 ff76 	bl	8002b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	200000c0 	.word	0x200000c0

08000c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <UART_StartReceiving>:

UART_State_t uart_state = STATE_IDLE;
uint8_t rx_buffer[MAX_MSG_SIZE];
uint8_t msg_length = 0;

void UART_StartReceiving(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	uart_state = STATE_IDLE;
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <UART_StartReceiving+0x1c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, rx_buffer, MSG_HEADER_SIZE);
 8000c7e:	4905      	ldr	r1, [pc, #20]	@ (8000c94 <UART_StartReceiving+0x20>)
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <UART_StartReceiving+0x24>)
 8000c82:	2203      	movs	r2, #3
 8000c84:	0018      	movs	r0, r3
 8000c86:	f001 ff01 	bl	8002a8c <HAL_UART_Receive_IT>
}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000148 	.word	0x20000148
 8000c94:	2000014c 	.word	0x2000014c
 8000c98:	200000c0 	.word	0x200000c0

08000c9c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	if (huart->Instance != USART2) return;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <HAL_UART_RxCpltCallback+0x98>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d13e      	bne.n	8000d2c <HAL_UART_RxCpltCallback+0x90>

	switch (uart_state) {
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <HAL_UART_RxCpltCallback+0x9c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <HAL_UART_RxCpltCallback+0x20>
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d026      	beq.n	8000d08 <HAL_UART_RxCpltCallback+0x6c>
 8000cba:	e034      	b.n	8000d26 <HAL_UART_RxCpltCallback+0x8a>
		case STATE_IDLE:
			msg_length = rx_buffer[2];
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <HAL_UART_RxCpltCallback+0xa0>)
 8000cbe:	789a      	ldrb	r2, [r3, #2]
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <HAL_UART_RxCpltCallback+0xa4>)
 8000cc2:	701a      	strb	r2, [r3, #0]
			if (msg_length > MAX_MSG_SIZE - MSG_HEADER_SIZE) {
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d40 <HAL_UART_RxCpltCallback+0xa4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2bfd      	cmp	r3, #253	@ 0xfd
 8000cca:	d905      	bls.n	8000cd8 <HAL_UART_RxCpltCallback+0x3c>
				msg_length = 0;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <HAL_UART_RxCpltCallback+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
				UART_StartReceiving();
 8000cd2:	f7ff ffcf 	bl	8000c74 <UART_StartReceiving>
				return;
 8000cd6:	e02a      	b.n	8000d2e <HAL_UART_RxCpltCallback+0x92>
			}
			if (msg_length == 0U) {
 8000cd8:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <HAL_UART_RxCpltCallback+0xa4>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d107      	bne.n	8000cf0 <HAL_UART_RxCpltCallback+0x54>
				ParseCommand(rx_buffer, MSG_HEADER_SIZE);
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <HAL_UART_RxCpltCallback+0xa0>)
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fbcd 	bl	8000484 <ParseCommand>
				UART_StartReceiving();
 8000cea:	f7ff ffc3 	bl	8000c74 <UART_StartReceiving>
				break;
 8000cee:	e01e      	b.n	8000d2e <HAL_UART_RxCpltCallback+0x92>
			}
			uart_state = STATE_PROCESS;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <HAL_UART_RxCpltCallback+0x9c>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, rx_buffer + MSG_HEADER_SIZE, msg_length);
 8000cf6:	4913      	ldr	r1, [pc, #76]	@ (8000d44 <HAL_UART_RxCpltCallback+0xa8>)
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <HAL_UART_RxCpltCallback+0xa4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_UART_RxCpltCallback+0xac>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f001 fec3 	bl	8002a8c <HAL_UART_Receive_IT>
			break;
 8000d06:	e012      	b.n	8000d2e <HAL_UART_RxCpltCallback+0x92>
		case STATE_PROCESS:
			uart_state = STATE_IDLE;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <HAL_UART_RxCpltCallback+0x9c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
			ParseCommand(rx_buffer, MSG_HEADER_SIZE + msg_length);
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <HAL_UART_RxCpltCallback+0xa4>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	3303      	adds	r3, #3
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_UART_RxCpltCallback+0xa0>)
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff fbb2 	bl	8000484 <ParseCommand>
			UART_StartReceiving();
 8000d20:	f7ff ffa8 	bl	8000c74 <UART_StartReceiving>
			break;
 8000d24:	e003      	b.n	8000d2e <HAL_UART_RxCpltCallback+0x92>
		default:
			UART_StartReceiving();
 8000d26:	f7ff ffa5 	bl	8000c74 <UART_StartReceiving>
			break;
 8000d2a:	e000      	b.n	8000d2e <HAL_UART_RxCpltCallback+0x92>
	if (huart->Instance != USART2) return;
 8000d2c:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40004400 	.word	0x40004400
 8000d38:	20000148 	.word	0x20000148
 8000d3c:	2000014c 	.word	0x2000014c
 8000d40:	2000024c 	.word	0x2000024c
 8000d44:	2000014f 	.word	0x2000014f
 8000d48:	200000c0 	.word	0x200000c0

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d4c:	4813      	ldr	r0, [pc, #76]	@ (8000d9c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d4e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d50:	f7ff ff8a 	bl	8000c68 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000d54:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d56:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d58:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <LoopForever+0xa>)
    CMP R1, R2
 8000d5c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d5e:	d105      	bne.n	8000d6c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000d60:	4811      	ldr	r0, [pc, #68]	@ (8000da8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d62:	4912      	ldr	r1, [pc, #72]	@ (8000dac <LoopForever+0x12>)
    STR R1, [R0]
 8000d64:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d66:	4812      	ldr	r0, [pc, #72]	@ (8000db0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d68:	4912      	ldr	r1, [pc, #72]	@ (8000db4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d6a:	6001      	str	r1, [r0, #0]

08000d6c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d6e:	4913      	ldr	r1, [pc, #76]	@ (8000dbc <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d70:	4a13      	ldr	r2, [pc, #76]	@ (8000dc0 <LoopForever+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d84:	4c10      	ldr	r4, [pc, #64]	@ (8000dc8 <LoopForever+0x2e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f003 f94b 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fc9b 	bl	80006d0 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
   ldr   r0, =_estack
 8000d9c:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000da0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000da4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000da8:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000dac:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000db0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000db4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000dc0:	0800410c 	.word	0x0800410c
  ldr r2, =_sbss
 8000dc4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000dc8:	20000254 	.word	0x20000254

08000dcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <HAL_Init+0x3c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <HAL_Init+0x3c>)
 8000de2:	2140      	movs	r1, #64	@ 0x40
 8000de4:	430a      	orrs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f811 	bl	8000e10 <HAL_InitTick>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	e001      	b.n	8000dfe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfa:	f7ff fe61 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	40022000 	.word	0x40022000

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <HAL_InitTick+0x5c>)
 8000e1a:	681c      	ldr	r4, [r3, #0]
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <HAL_InitTick+0x60>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	0019      	movs	r1, r3
 8000e22:	23fa      	movs	r3, #250	@ 0xfa
 8000e24:	0098      	lsls	r0, r3, #2
 8000e26:	f7ff f96f 	bl	8000108 <__udivsi3>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	0020      	movs	r0, r4
 8000e30:	f7ff f96a 	bl	8000108 <__udivsi3>
 8000e34:	0003      	movs	r3, r0
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 f90b 	bl	8001052 <HAL_SYSTICK_Config>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e00f      	b.n	8000e64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d80b      	bhi.n	8000e62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	425b      	negs	r3, r3
 8000e50:	2200      	movs	r2, #0
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 f8d8 	bl	8001008 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_InitTick+0x64>)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b003      	add	sp, #12
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	20000018 	.word	0x20000018
 8000e70:	20000020 	.word	0x20000020
 8000e74:	2000001c 	.word	0x2000001c

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <HAL_IncTick+0x1c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	001a      	movs	r2, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	18d2      	adds	r2, r2, r3
 8000e88:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	20000020 	.word	0x20000020
 8000e98:	20000250 	.word	0x20000250

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b02      	ldr	r3, [pc, #8]	@ (8000eac <HAL_GetTick+0x10>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	20000250 	.word	0x20000250

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ec2:	d809      	bhi.n	8000ed8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec4:	1dfb      	adds	r3, r7, #7
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	001a      	movs	r2, r3
 8000eca:	231f      	movs	r3, #31
 8000ecc:	401a      	ands	r2, r3
 8000ece:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <__NVIC_EnableIRQ+0x30>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4091      	lsls	r1, r2
 8000ed4:	000a      	movs	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
  }
}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	0002      	movs	r2, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ef8:	d828      	bhi.n	8000f4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efa:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb8 <__NVIC_SetPriority+0xd4>)
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	33c0      	adds	r3, #192	@ 0xc0
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	589b      	ldr	r3, [r3, r2]
 8000f0a:	1dfa      	adds	r2, r7, #7
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	0011      	movs	r1, r2
 8000f10:	2203      	movs	r2, #3
 8000f12:	400a      	ands	r2, r1
 8000f14:	00d2      	lsls	r2, r2, #3
 8000f16:	21ff      	movs	r1, #255	@ 0xff
 8000f18:	4091      	lsls	r1, r2
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	43d2      	mvns	r2, r2
 8000f1e:	401a      	ands	r2, r3
 8000f20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	019b      	lsls	r3, r3, #6
 8000f26:	22ff      	movs	r2, #255	@ 0xff
 8000f28:	401a      	ands	r2, r3
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	2303      	movs	r3, #3
 8000f32:	4003      	ands	r3, r0
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f38:	481f      	ldr	r0, [pc, #124]	@ (8000fb8 <__NVIC_SetPriority+0xd4>)
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	430a      	orrs	r2, r1
 8000f44:	33c0      	adds	r3, #192	@ 0xc0
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f4a:	e031      	b.n	8000fb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fbc <__NVIC_SetPriority+0xd8>)
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	0019      	movs	r1, r3
 8000f54:	230f      	movs	r3, #15
 8000f56:	400b      	ands	r3, r1
 8000f58:	3b08      	subs	r3, #8
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3306      	adds	r3, #6
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	18d3      	adds	r3, r2, r3
 8000f62:	3304      	adds	r3, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	1dfa      	adds	r2, r7, #7
 8000f68:	7812      	ldrb	r2, [r2, #0]
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	400a      	ands	r2, r1
 8000f70:	00d2      	lsls	r2, r2, #3
 8000f72:	21ff      	movs	r1, #255	@ 0xff
 8000f74:	4091      	lsls	r1, r2
 8000f76:	000a      	movs	r2, r1
 8000f78:	43d2      	mvns	r2, r2
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	019b      	lsls	r3, r3, #6
 8000f82:	22ff      	movs	r2, #255	@ 0xff
 8000f84:	401a      	ands	r2, r3
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	4003      	ands	r3, r0
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f94:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <__NVIC_SetPriority+0xd8>)
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	001c      	movs	r4, r3
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	4023      	ands	r3, r4
 8000fa0:	3b08      	subs	r3, #8
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	3306      	adds	r3, #6
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	18c3      	adds	r3, r0, r3
 8000fac:	3304      	adds	r3, #4
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b003      	add	sp, #12
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	045b      	lsls	r3, r3, #17
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d301      	bcc.n	8000fd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e010      	b.n	8000ffa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <SysTick_Config+0x44>)
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	3a01      	subs	r2, #1
 8000fde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	425b      	negs	r3, r3
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ff7c 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <SysTick_Config+0x44>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <SysTick_Config+0x44>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	210f      	movs	r1, #15
 8001014:	187b      	adds	r3, r7, r1
 8001016:	1c02      	adds	r2, r0, #0
 8001018:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	187b      	adds	r3, r7, r1
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b25b      	sxtb	r3, r3
 8001022:	0011      	movs	r1, r2
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b004      	add	sp, #16
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	0002      	movs	r2, r0
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ff33 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ffaf 	bl	8000fc0 <SysTick_Config>
 8001062:	0003      	movs	r3, r0
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2225      	movs	r2, #37	@ 0x25
 8001080:	5c9b      	ldrb	r3, [r3, r2]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d008      	beq.n	800109a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2204      	movs	r2, #4
 800108c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2224      	movs	r2, #36	@ 0x24
 8001092:	2100      	movs	r1, #0
 8001094:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e024      	b.n	80010e4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	210e      	movs	r1, #14
 80010a6:	438a      	bics	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	438a      	bics	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	221c      	movs	r2, #28
 80010c0:	401a      	ands	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	2101      	movs	r1, #1
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2225      	movs	r2, #37	@ 0x25
 80010d2:	2101      	movs	r1, #1
 80010d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2224      	movs	r2, #36	@ 0x24
 80010da:	2100      	movs	r1, #0
 80010dc:	5499      	strb	r1, [r3, r2]

    return status;
 80010de:	230f      	movs	r3, #15
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b004      	add	sp, #16
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f4:	210f      	movs	r1, #15
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2225      	movs	r2, #37	@ 0x25
 8001100:	5c9b      	ldrb	r3, [r3, r2]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d006      	beq.n	8001116 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2204      	movs	r2, #4
 800110c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800110e:	187b      	adds	r3, r7, r1
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e02a      	b.n	800116c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	210e      	movs	r1, #14
 8001122:	438a      	bics	r2, r1
 8001124:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2101      	movs	r1, #1
 8001132:	438a      	bics	r2, r1
 8001134:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	221c      	movs	r2, #28
 800113c:	401a      	ands	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	2101      	movs	r1, #1
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2225      	movs	r2, #37	@ 0x25
 800114e:	2101      	movs	r1, #1
 8001150:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2224      	movs	r2, #36	@ 0x24
 8001156:	2100      	movs	r1, #0
 8001158:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	0010      	movs	r0, r2
 800116a:	4798      	blx	r3
    }
  }
  return status;
 800116c:	230f      	movs	r3, #15
 800116e:	18fb      	adds	r3, r7, r3
 8001170:	781b      	ldrb	r3, [r3, #0]
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001192:	e155      	b.n	8001440 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4091      	lsls	r1, r2
 800119e:	000a      	movs	r2, r1
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d100      	bne.n	80011ac <HAL_GPIO_Init+0x30>
 80011aa:	e146      	b.n	800143a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2203      	movs	r2, #3
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d005      	beq.n	80011c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d130      	bne.n	8001226 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	409a      	lsls	r2, r3
 80011d2:	0013      	movs	r3, r2
 80011d4:	43da      	mvns	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	409a      	lsls	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fa:	2201      	movs	r2, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	43da      	mvns	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	2201      	movs	r2, #1
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2203      	movs	r2, #3
 800122c:	4013      	ands	r3, r2
 800122e:	2b03      	cmp	r3, #3
 8001230:	d017      	beq.n	8001262 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2203      	movs	r2, #3
 8001268:	4013      	ands	r3, r2
 800126a:	2b02      	cmp	r3, #2
 800126c:	d123      	bne.n	80012b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	58d3      	ldr	r3, [r2, r3]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2207      	movs	r2, #7
 8001280:	4013      	ands	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2107      	movs	r1, #7
 800129a:	400b      	ands	r3, r1
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	6939      	ldr	r1, [r7, #16]
 80012b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	43da      	mvns	r2, r3
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2203      	movs	r2, #3
 80012d4:	401a      	ands	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	23c0      	movs	r3, #192	@ 0xc0
 80012f0:	029b      	lsls	r3, r3, #10
 80012f2:	4013      	ands	r3, r2
 80012f4:	d100      	bne.n	80012f8 <HAL_GPIO_Init+0x17c>
 80012f6:	e0a0      	b.n	800143a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f8:	4b57      	ldr	r3, [pc, #348]	@ (8001458 <HAL_GPIO_Init+0x2dc>)
 80012fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012fc:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <HAL_GPIO_Init+0x2dc>)
 80012fe:	2101      	movs	r1, #1
 8001300:	430a      	orrs	r2, r1
 8001302:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001304:	4a55      	ldr	r2, [pc, #340]	@ (800145c <HAL_GPIO_Init+0x2e0>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	589b      	ldr	r3, [r3, r2]
 8001310:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2203      	movs	r2, #3
 8001316:	4013      	ands	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	43da      	mvns	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	23a0      	movs	r3, #160	@ 0xa0
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	429a      	cmp	r2, r3
 8001330:	d01f      	beq.n	8001372 <HAL_GPIO_Init+0x1f6>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4a      	ldr	r2, [pc, #296]	@ (8001460 <HAL_GPIO_Init+0x2e4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x1f2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a49      	ldr	r2, [pc, #292]	@ (8001464 <HAL_GPIO_Init+0x2e8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x1ee>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a48      	ldr	r2, [pc, #288]	@ (8001468 <HAL_GPIO_Init+0x2ec>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x1ea>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a47      	ldr	r2, [pc, #284]	@ (800146c <HAL_GPIO_Init+0x2f0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x1e6>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a46      	ldr	r2, [pc, #280]	@ (8001470 <HAL_GPIO_Init+0x2f4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x1e2>
 800135a:	2305      	movs	r3, #5
 800135c:	e00a      	b.n	8001374 <HAL_GPIO_Init+0x1f8>
 800135e:	2306      	movs	r3, #6
 8001360:	e008      	b.n	8001374 <HAL_GPIO_Init+0x1f8>
 8001362:	2304      	movs	r3, #4
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x1f8>
 8001366:	2303      	movs	r3, #3
 8001368:	e004      	b.n	8001374 <HAL_GPIO_Init+0x1f8>
 800136a:	2302      	movs	r3, #2
 800136c:	e002      	b.n	8001374 <HAL_GPIO_Init+0x1f8>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x1f8>
 8001372:	2300      	movs	r3, #0
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	2103      	movs	r1, #3
 8001378:	400a      	ands	r2, r1
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4093      	lsls	r3, r2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001384:	4935      	ldr	r1, [pc, #212]	@ (800145c <HAL_GPIO_Init+0x2e0>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001392:	4b38      	ldr	r3, [pc, #224]	@ (8001474 <HAL_GPIO_Init+0x2f8>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	035b      	lsls	r3, r3, #13
 80013aa:	4013      	ands	r3, r2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001474 <HAL_GPIO_Init+0x2f8>)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <HAL_GPIO_Init+0x2f8>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43da      	mvns	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	039b      	lsls	r3, r3, #14
 80013d4:	4013      	ands	r3, r2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013e0:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <HAL_GPIO_Init+0x2f8>)
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80013e6:	4b23      	ldr	r3, [pc, #140]	@ (8001474 <HAL_GPIO_Init+0x2f8>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43da      	mvns	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	029b      	lsls	r3, r3, #10
 80013fe:	4013      	ands	r3, r2
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <HAL_GPIO_Init+0x2f8>)
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_GPIO_Init+0x2f8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43da      	mvns	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	025b      	lsls	r3, r3, #9
 8001428:	4013      	ands	r3, r2
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_GPIO_Init+0x2f8>)
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	40da      	lsrs	r2, r3
 8001448:	1e13      	subs	r3, r2, #0
 800144a:	d000      	beq.n	800144e <HAL_GPIO_Init+0x2d2>
 800144c:	e6a2      	b.n	8001194 <HAL_GPIO_Init+0x18>
  }
}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	46c0      	nop			@ (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b006      	add	sp, #24
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000
 8001460:	50000400 	.word	0x50000400
 8001464:	50000800 	.word	0x50000800
 8001468:	50000c00 	.word	0x50000c00
 800146c:	50001000 	.word	0x50001000
 8001470:	50001c00 	.word	0x50001c00
 8001474:	40010400 	.word	0x40010400

08001478 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	0008      	movs	r0, r1
 8001482:	0011      	movs	r1, r2
 8001484:	1cbb      	adds	r3, r7, #2
 8001486:	1c02      	adds	r2, r0, #0
 8001488:	801a      	strh	r2, [r3, #0]
 800148a:	1c7b      	adds	r3, r7, #1
 800148c:	1c0a      	adds	r2, r1, #0
 800148e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001490:	1c7b      	adds	r3, r7, #1
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001498:	1cbb      	adds	r3, r7, #2
 800149a:	881a      	ldrh	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014a2:	1cbb      	adds	r3, r7, #2
 80014a4:	881a      	ldrh	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f000 fb6c 	bl	8001ba0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c8:	4bc8      	ldr	r3, [pc, #800]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	220c      	movs	r2, #12
 80014ce:	4013      	ands	r3, r2
 80014d0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d2:	4bc6      	ldr	r3, [pc, #792]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2201      	movs	r2, #1
 80014e4:	4013      	ands	r3, r2
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x36>
 80014e8:	e07d      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d007      	beq.n	8001500 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d112      	bne.n	800151c <HAL_RCC_OscConfig+0x68>
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d10d      	bne.n	800151c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4bba      	ldr	r3, [pc, #744]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	029b      	lsls	r3, r3, #10
 8001508:	4013      	ands	r3, r2
 800150a:	d100      	bne.n	800150e <HAL_RCC_OscConfig+0x5a>
 800150c:	e06a      	b.n	80015e4 <HAL_RCC_OscConfig+0x130>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d166      	bne.n	80015e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	f000 fb42 	bl	8001ba0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	429a      	cmp	r2, r3
 8001526:	d107      	bne.n	8001538 <HAL_RCC_OscConfig+0x84>
 8001528:	4bb0      	ldr	r3, [pc, #704]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4baf      	ldr	r3, [pc, #700]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800152e:	2180      	movs	r1, #128	@ 0x80
 8001530:	0249      	lsls	r1, r1, #9
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e027      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	23a0      	movs	r3, #160	@ 0xa0
 800153e:	02db      	lsls	r3, r3, #11
 8001540:	429a      	cmp	r2, r3
 8001542:	d10e      	bne.n	8001562 <HAL_RCC_OscConfig+0xae>
 8001544:	4ba9      	ldr	r3, [pc, #676]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4ba8      	ldr	r3, [pc, #672]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800154a:	2180      	movs	r1, #128	@ 0x80
 800154c:	02c9      	lsls	r1, r1, #11
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	4ba6      	ldr	r3, [pc, #664]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4ba5      	ldr	r3, [pc, #660]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001558:	2180      	movs	r1, #128	@ 0x80
 800155a:	0249      	lsls	r1, r1, #9
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e012      	b.n	8001588 <HAL_RCC_OscConfig+0xd4>
 8001562:	4ba2      	ldr	r3, [pc, #648]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4ba1      	ldr	r3, [pc, #644]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001568:	49a1      	ldr	r1, [pc, #644]	@ (80017f0 <HAL_RCC_OscConfig+0x33c>)
 800156a:	400a      	ands	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	4b9f      	ldr	r3, [pc, #636]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	@ 0x80
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4b9b      	ldr	r3, [pc, #620]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b9a      	ldr	r3, [pc, #616]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001582:	499c      	ldr	r1, [pc, #624]	@ (80017f4 <HAL_RCC_OscConfig+0x340>)
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d014      	beq.n	80015ba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fc84 	bl	8000e9c <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159a:	f7ff fc7f 	bl	8000e9c <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b64      	cmp	r3, #100	@ 0x64
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e2f9      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ac:	4b8f      	ldr	r3, [pc, #572]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	029b      	lsls	r3, r3, #10
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0xe6>
 80015b8:	e015      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fc6f 	bl	8000e9c <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fc6a 	bl	8000e9c <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e2e4      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015d6:	4b85      	ldr	r3, [pc, #532]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	@ 0x80
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x110>
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d100      	bne.n	80015f2 <HAL_RCC_OscConfig+0x13e>
 80015f0:	e099      	b.n	8001726 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	2220      	movs	r2, #32
 80015fc:	4013      	ands	r3, r2
 80015fe:	d009      	beq.n	8001614 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001600:	4b7a      	ldr	r3, [pc, #488]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b79      	ldr	r3, [pc, #484]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001606:	2120      	movs	r1, #32
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	2220      	movs	r2, #32
 8001610:	4393      	bics	r3, r2
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b04      	cmp	r3, #4
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d13e      	bne.n	800169e <HAL_RCC_OscConfig+0x1ea>
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d13b      	bne.n	800169e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001626:	4b71      	ldr	r3, [pc, #452]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2204      	movs	r2, #4
 800162c:	4013      	ands	r3, r2
 800162e:	d004      	beq.n	800163a <HAL_RCC_OscConfig+0x186>
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e2b2      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163a:	4b6c      	ldr	r3, [pc, #432]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4a6e      	ldr	r2, [pc, #440]	@ (80017f8 <HAL_RCC_OscConfig+0x344>)
 8001640:	4013      	ands	r3, r2
 8001642:	0019      	movs	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	021a      	lsls	r2, r3, #8
 800164a:	4b68      	ldr	r3, [pc, #416]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800164c:	430a      	orrs	r2, r1
 800164e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001650:	4b66      	ldr	r3, [pc, #408]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2209      	movs	r2, #9
 8001656:	4393      	bics	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	4b64      	ldr	r3, [pc, #400]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800165c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001662:	f000 fbeb 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001666:	0001      	movs	r1, r0
 8001668:	4b60      	ldr	r3, [pc, #384]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	220f      	movs	r2, #15
 8001670:	4013      	ands	r3, r2
 8001672:	4a62      	ldr	r2, [pc, #392]	@ (80017fc <HAL_RCC_OscConfig+0x348>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	000a      	movs	r2, r1
 8001678:	40da      	lsrs	r2, r3
 800167a:	4b61      	ldr	r3, [pc, #388]	@ (8001800 <HAL_RCC_OscConfig+0x34c>)
 800167c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800167e:	4b61      	ldr	r3, [pc, #388]	@ (8001804 <HAL_RCC_OscConfig+0x350>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2513      	movs	r5, #19
 8001684:	197c      	adds	r4, r7, r5
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff fbc2 	bl	8000e10 <HAL_InitTick>
 800168c:	0003      	movs	r3, r0
 800168e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001690:	197b      	adds	r3, r7, r5
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d046      	beq.n	8001726 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001698:	197b      	adds	r3, r7, r5
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	e280      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d027      	beq.n	80016f4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016a4:	4b51      	ldr	r3, [pc, #324]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2209      	movs	r2, #9
 80016aa:	4393      	bics	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	4b4f      	ldr	r3, [pc, #316]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80016b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fbf1 	bl	8000e9c <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fbec 	bl	8000e9c <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e266      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d2:	4b46      	ldr	r3, [pc, #280]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2204      	movs	r2, #4
 80016d8:	4013      	ands	r3, r2
 80016da:	d0f1      	beq.n	80016c0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b43      	ldr	r3, [pc, #268]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a45      	ldr	r2, [pc, #276]	@ (80017f8 <HAL_RCC_OscConfig+0x344>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	021a      	lsls	r2, r3, #8
 80016ec:	4b3f      	ldr	r3, [pc, #252]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	e018      	b.n	8001726 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b3c      	ldr	r3, [pc, #240]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	438a      	bics	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fbcc 	bl	8000e9c <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fbc7 	bl	8000e9c <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e241      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800171c:	4b33      	ldr	r3, [pc, #204]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2204      	movs	r2, #4
 8001722:	4013      	ands	r3, r2
 8001724:	d1f1      	bne.n	800170a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2210      	movs	r2, #16
 800172c:	4013      	ands	r3, r2
 800172e:	d100      	bne.n	8001732 <HAL_RCC_OscConfig+0x27e>
 8001730:	e0a1      	b.n	8001876 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d140      	bne.n	80017ba <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001738:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d005      	beq.n	8001750 <HAL_RCC_OscConfig+0x29c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e227      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001750:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a2c      	ldr	r2, [pc, #176]	@ (8001808 <HAL_RCC_OscConfig+0x354>)
 8001756:	4013      	ands	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1a      	ldr	r2, [r3, #32]
 800175e:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001760:	430a      	orrs	r2, r1
 8001762:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	0a19      	lsrs	r1, r3, #8
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	061a      	lsls	r2, r3, #24
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	0b5b      	lsrs	r3, r3, #13
 800177e:	3301      	adds	r3, #1
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	0212      	lsls	r2, r2, #8
 8001784:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001786:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	210f      	movs	r1, #15
 800178e:	400b      	ands	r3, r1
 8001790:	491a      	ldr	r1, [pc, #104]	@ (80017fc <HAL_RCC_OscConfig+0x348>)
 8001792:	5ccb      	ldrb	r3, [r1, r3]
 8001794:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001796:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <HAL_RCC_OscConfig+0x34c>)
 8001798:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800179a:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <HAL_RCC_OscConfig+0x350>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2513      	movs	r5, #19
 80017a0:	197c      	adds	r4, r7, r5
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff fb34 	bl	8000e10 <HAL_InitTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80017ac:	197b      	adds	r3, r7, r5
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d060      	beq.n	8001876 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80017b4:	197b      	adds	r3, r7, r5
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	e1f2      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d03f      	beq.n	8001842 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HAL_RCC_OscConfig+0x338>)
 80017c8:	2180      	movs	r1, #128	@ 0x80
 80017ca:	0049      	lsls	r1, r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb64 	bl	8000e9c <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017d8:	e018      	b.n	800180c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017da:	f7ff fb5f 	bl	8000e9c <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d911      	bls.n	800180c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1d9      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
 80017ec:	40021000 	.word	0x40021000
 80017f0:	fffeffff 	.word	0xfffeffff
 80017f4:	fffbffff 	.word	0xfffbffff
 80017f8:	ffffe0ff 	.word	0xffffe0ff
 80017fc:	08004090 	.word	0x08004090
 8001800:	20000018 	.word	0x20000018
 8001804:	2000001c 	.word	0x2000001c
 8001808:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800180c:	4bc9      	ldr	r3, [pc, #804]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d0e0      	beq.n	80017da <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001818:	4bc6      	ldr	r3, [pc, #792]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4ac6      	ldr	r2, [pc, #792]	@ (8001b38 <HAL_RCC_OscConfig+0x684>)
 800181e:	4013      	ands	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	4bc3      	ldr	r3, [pc, #780]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182c:	4bc1      	ldr	r3, [pc, #772]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	0a19      	lsrs	r1, r3, #8
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	061a      	lsls	r2, r3, #24
 800183a:	4bbe      	ldr	r3, [pc, #760]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	e019      	b.n	8001876 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001842:	4bbc      	ldr	r3, [pc, #752]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4bbb      	ldr	r3, [pc, #748]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001848:	49bc      	ldr	r1, [pc, #752]	@ (8001b3c <HAL_RCC_OscConfig+0x688>)
 800184a:	400a      	ands	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fb25 	bl	8000e9c <HAL_GetTick>
 8001852:	0003      	movs	r3, r0
 8001854:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001858:	f7ff fb20 	bl	8000e9c <HAL_GetTick>
 800185c:	0002      	movs	r2, r0
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e19a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800186a:	4bb2      	ldr	r3, [pc, #712]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	@ 0x80
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2208      	movs	r2, #8
 800187c:	4013      	ands	r3, r2
 800187e:	d036      	beq.n	80018ee <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d019      	beq.n	80018bc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001888:	4baa      	ldr	r3, [pc, #680]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800188a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800188c:	4ba9      	ldr	r3, [pc, #676]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800188e:	2101      	movs	r1, #1
 8001890:	430a      	orrs	r2, r1
 8001892:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff fb02 	bl	8000e9c <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff fafd 	bl	8000e9c <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e177      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80018b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b4:	2202      	movs	r2, #2
 80018b6:	4013      	ands	r3, r2
 80018b8:	d0f1      	beq.n	800189e <HAL_RCC_OscConfig+0x3ea>
 80018ba:	e018      	b.n	80018ee <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80018be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018c0:	4b9c      	ldr	r3, [pc, #624]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80018c2:	2101      	movs	r1, #1
 80018c4:	438a      	bics	r2, r1
 80018c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff fae8 	bl	8000e9c <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d2:	f7ff fae3 	bl	8000e9c <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e15d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018e4:	4b93      	ldr	r3, [pc, #588]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80018e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d1f1      	bne.n	80018d2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2204      	movs	r2, #4
 80018f4:	4013      	ands	r3, r2
 80018f6:	d100      	bne.n	80018fa <HAL_RCC_OscConfig+0x446>
 80018f8:	e0ae      	b.n	8001a58 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2023      	movs	r0, #35	@ 0x23
 80018fc:	183b      	adds	r3, r7, r0
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	4b8c      	ldr	r3, [pc, #560]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	055b      	lsls	r3, r3, #21
 800190a:	4013      	ands	r3, r2
 800190c:	d109      	bne.n	8001922 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b89      	ldr	r3, [pc, #548]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001912:	4b88      	ldr	r3, [pc, #544]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001914:	2180      	movs	r1, #128	@ 0x80
 8001916:	0549      	lsls	r1, r1, #21
 8001918:	430a      	orrs	r2, r1
 800191a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800191c:	183b      	adds	r3, r7, r0
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b87      	ldr	r3, [pc, #540]	@ (8001b40 <HAL_RCC_OscConfig+0x68c>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4013      	ands	r3, r2
 800192c:	d11a      	bne.n	8001964 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192e:	4b84      	ldr	r3, [pc, #528]	@ (8001b40 <HAL_RCC_OscConfig+0x68c>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b83      	ldr	r3, [pc, #524]	@ (8001b40 <HAL_RCC_OscConfig+0x68c>)
 8001934:	2180      	movs	r1, #128	@ 0x80
 8001936:	0049      	lsls	r1, r1, #1
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193c:	f7ff faae 	bl	8000e9c <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001946:	f7ff faa9 	bl	8000e9c <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b64      	cmp	r3, #100	@ 0x64
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e123      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	4b79      	ldr	r3, [pc, #484]	@ (8001b40 <HAL_RCC_OscConfig+0x68c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4013      	ands	r3, r2
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	429a      	cmp	r2, r3
 800196e:	d107      	bne.n	8001980 <HAL_RCC_OscConfig+0x4cc>
 8001970:	4b70      	ldr	r3, [pc, #448]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001974:	4b6f      	ldr	r3, [pc, #444]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001976:	2180      	movs	r1, #128	@ 0x80
 8001978:	0049      	lsls	r1, r1, #1
 800197a:	430a      	orrs	r2, r1
 800197c:	651a      	str	r2, [r3, #80]	@ 0x50
 800197e:	e031      	b.n	80019e4 <HAL_RCC_OscConfig+0x530>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x4ee>
 8001988:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800198a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800198c:	4b69      	ldr	r3, [pc, #420]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800198e:	496b      	ldr	r1, [pc, #428]	@ (8001b3c <HAL_RCC_OscConfig+0x688>)
 8001990:	400a      	ands	r2, r1
 8001992:	651a      	str	r2, [r3, #80]	@ 0x50
 8001994:	4b67      	ldr	r3, [pc, #412]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001996:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001998:	4b66      	ldr	r3, [pc, #408]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 800199a:	496a      	ldr	r1, [pc, #424]	@ (8001b44 <HAL_RCC_OscConfig+0x690>)
 800199c:	400a      	ands	r2, r1
 800199e:	651a      	str	r2, [r3, #80]	@ 0x50
 80019a0:	e020      	b.n	80019e4 <HAL_RCC_OscConfig+0x530>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	23a0      	movs	r3, #160	@ 0xa0
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d10e      	bne.n	80019cc <HAL_RCC_OscConfig+0x518>
 80019ae:	4b61      	ldr	r3, [pc, #388]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80019b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019b2:	4b60      	ldr	r3, [pc, #384]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80019b4:	2180      	movs	r1, #128	@ 0x80
 80019b6:	00c9      	lsls	r1, r1, #3
 80019b8:	430a      	orrs	r2, r1
 80019ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80019bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80019be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019c0:	4b5c      	ldr	r3, [pc, #368]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80019c2:	2180      	movs	r1, #128	@ 0x80
 80019c4:	0049      	lsls	r1, r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0x530>
 80019cc:	4b59      	ldr	r3, [pc, #356]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80019ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019d0:	4b58      	ldr	r3, [pc, #352]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80019d2:	495a      	ldr	r1, [pc, #360]	@ (8001b3c <HAL_RCC_OscConfig+0x688>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80019d8:	4b56      	ldr	r3, [pc, #344]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80019da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019dc:	4b55      	ldr	r3, [pc, #340]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 80019de:	4959      	ldr	r1, [pc, #356]	@ (8001b44 <HAL_RCC_OscConfig+0x690>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d015      	beq.n	8001a18 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ec:	f7ff fa56 	bl	8000e9c <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019f4:	e009      	b.n	8001a0a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff fa51 	bl	8000e9c <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	4a51      	ldr	r2, [pc, #324]	@ (8001b48 <HAL_RCC_OscConfig+0x694>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0ca      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001a0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a0e:	2380      	movs	r3, #128	@ 0x80
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d0ef      	beq.n	80019f6 <HAL_RCC_OscConfig+0x542>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff fa40 	bl	8000e9c <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a20:	e009      	b.n	8001a36 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff fa3b 	bl	8000e9c <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a46      	ldr	r2, [pc, #280]	@ (8001b48 <HAL_RCC_OscConfig+0x694>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0b4      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a36:	4b3f      	ldr	r3, [pc, #252]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d1ef      	bne.n	8001a22 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a42:	2323      	movs	r3, #35	@ 0x23
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b39      	ldr	r3, [pc, #228]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001a4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a50:	4b38      	ldr	r3, [pc, #224]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001a52:	493e      	ldr	r1, [pc, #248]	@ (8001b4c <HAL_RCC_OscConfig+0x698>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d100      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5ae>
 8001a60:	e09d      	b.n	8001b9e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	2b0c      	cmp	r3, #12
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5b6>
 8001a68:	e076      	b.n	8001b58 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d145      	bne.n	8001afe <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	4b30      	ldr	r3, [pc, #192]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b2f      	ldr	r3, [pc, #188]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001a78:	4935      	ldr	r1, [pc, #212]	@ (8001b50 <HAL_RCC_OscConfig+0x69c>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fa0d 	bl	8000e9c <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff fa08 	bl	8000e9c <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e082      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a9a:	4b26      	ldr	r3, [pc, #152]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	049b      	lsls	r3, r3, #18
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa6:	4b23      	ldr	r3, [pc, #140]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8001b54 <HAL_RCC_OscConfig+0x6a0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	0019      	movs	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001acc:	2180      	movs	r1, #128	@ 0x80
 8001ace:	0449      	lsls	r1, r1, #17
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f9e2 	bl	8000e9c <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff f9dd 	bl	8000e9c <HAL_GetTick>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e057      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001af0:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	049b      	lsls	r3, r3, #18
 8001af8:	4013      	ands	r3, r2
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x62a>
 8001afc:	e04f      	b.n	8001b9e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001b04:	4912      	ldr	r1, [pc, #72]	@ (8001b50 <HAL_RCC_OscConfig+0x69c>)
 8001b06:	400a      	ands	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f9c7 	bl	8000e9c <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff f9c2 	bl	8000e9c <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e03c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b26:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_RCC_OscConfig+0x680>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	049b      	lsls	r3, r3, #18
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x660>
 8001b32:	e034      	b.n	8001b9e <HAL_RCC_OscConfig+0x6ea>
 8001b34:	40021000 	.word	0x40021000
 8001b38:	ffff1fff 	.word	0xffff1fff
 8001b3c:	fffffeff 	.word	0xfffffeff
 8001b40:	40007000 	.word	0x40007000
 8001b44:	fffffbff 	.word	0xfffffbff
 8001b48:	00001388 	.word	0x00001388
 8001b4c:	efffffff 	.word	0xefffffff
 8001b50:	feffffff 	.word	0xfeffffff
 8001b54:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <HAL_RCC_OscConfig+0x6f4>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	025b      	lsls	r3, r3, #9
 8001b70:	401a      	ands	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d10f      	bne.n	8001b9a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	23f0      	movs	r3, #240	@ 0xf0
 8001b7e:	039b      	lsls	r3, r3, #14
 8001b80:	401a      	ands	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	23c0      	movs	r3, #192	@ 0xc0
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	401a      	ands	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b00a      	add	sp, #40	@ 0x28
 8001ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b5b0      	push	{r4, r5, r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e128      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b96      	ldr	r3, [pc, #600]	@ (8001e1c <HAL_RCC_ClockConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d91e      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b93      	ldr	r3, [pc, #588]	@ (8001e1c <HAL_RCC_ClockConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4393      	bics	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	4b90      	ldr	r3, [pc, #576]	@ (8001e1c <HAL_RCC_ClockConfig+0x270>)
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001be0:	f7ff f95c 	bl	8000e9c <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be8:	e009      	b.n	8001bfe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f7ff f957 	bl	8000e9c <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4a8a      	ldr	r2, [pc, #552]	@ (8001e20 <HAL_RCC_ClockConfig+0x274>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e109      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b87      	ldr	r3, [pc, #540]	@ (8001e1c <HAL_RCC_ClockConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2201      	movs	r2, #1
 8001c04:	4013      	ands	r3, r2
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c16:	4b83      	ldr	r3, [pc, #524]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	22f0      	movs	r2, #240	@ 0xf0
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b7f      	ldr	r3, [pc, #508]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4013      	ands	r3, r2
 8001c32:	d100      	bne.n	8001c36 <HAL_RCC_ClockConfig+0x8a>
 8001c34:	e089      	b.n	8001d4a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c3e:	4b79      	ldr	r3, [pc, #484]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	029b      	lsls	r3, r3, #10
 8001c46:	4013      	ands	r3, r2
 8001c48:	d120      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0e1      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c56:	4b73      	ldr	r3, [pc, #460]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	@ 0x80
 8001c5c:	049b      	lsls	r3, r3, #18
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d114      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0d5      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2204      	movs	r2, #4
 8001c74:	4013      	ands	r3, r2
 8001c76:	d109      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0ca      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c7c:	4b69      	ldr	r3, [pc, #420]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4013      	ands	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0c2      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8c:	4b65      	ldr	r3, [pc, #404]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2203      	movs	r2, #3
 8001c92:	4393      	bics	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4b62      	ldr	r3, [pc, #392]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f8fc 	bl	8000e9c <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d111      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb0:	e009      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb2:	f7ff f8f3 	bl	8000e9c <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	4a58      	ldr	r2, [pc, #352]	@ (8001e20 <HAL_RCC_ClockConfig+0x274>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e0a5      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc6:	4b57      	ldr	r3, [pc, #348]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	220c      	movs	r2, #12
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d1ef      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x106>
 8001cd2:	e03a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d111      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cdc:	e009      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cde:	f7ff f8dd 	bl	8000e9c <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	@ (8001e20 <HAL_RCC_ClockConfig+0x274>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e08f      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d1ef      	bne.n	8001cde <HAL_RCC_ClockConfig+0x132>
 8001cfe:	e024      	b.n	8001d4a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d11b      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff f8c7 	bl	8000e9c <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a42      	ldr	r2, [pc, #264]	@ (8001e20 <HAL_RCC_ClockConfig+0x274>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e079      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b41      	ldr	r3, [pc, #260]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	220c      	movs	r2, #12
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d1ef      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x15e>
 8001d2a:	e00e      	b.n	8001d4a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff f8b6 	bl	8000e9c <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	4a3a      	ldr	r2, [pc, #232]	@ (8001e20 <HAL_RCC_ClockConfig+0x274>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e068      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d40:	4b38      	ldr	r3, [pc, #224]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	220c      	movs	r2, #12
 8001d46:	4013      	ands	r3, r2
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4a:	4b34      	ldr	r3, [pc, #208]	@ (8001e1c <HAL_RCC_ClockConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d21e      	bcs.n	8001d96 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d58:	4b30      	ldr	r3, [pc, #192]	@ (8001e1c <HAL_RCC_ClockConfig+0x270>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4393      	bics	r3, r2
 8001d60:	0019      	movs	r1, r3
 8001d62:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <HAL_RCC_ClockConfig+0x270>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d6a:	f7ff f897 	bl	8000e9c <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	e009      	b.n	8001d88 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7ff f892 	bl	8000e9c <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	4a28      	ldr	r2, [pc, #160]	@ (8001e20 <HAL_RCC_ClockConfig+0x274>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e044      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d88:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <HAL_RCC_ClockConfig+0x270>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4013      	ands	r3, r2
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d1ee      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d009      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da0:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <HAL_RCC_ClockConfig+0x27c>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2208      	movs	r2, #8
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dbe:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e2c <HAL_RCC_ClockConfig+0x280>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	00da      	lsls	r2, r3, #3
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dd4:	f000 f832 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8001dd8:	0001      	movs	r1, r0
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_RCC_ClockConfig+0x278>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	220f      	movs	r2, #15
 8001de2:	4013      	ands	r3, r2
 8001de4:	4a12      	ldr	r2, [pc, #72]	@ (8001e30 <HAL_RCC_ClockConfig+0x284>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	000a      	movs	r2, r1
 8001dea:	40da      	lsrs	r2, r3
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HAL_RCC_ClockConfig+0x288>)
 8001dee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_RCC_ClockConfig+0x28c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	250b      	movs	r5, #11
 8001df6:	197c      	adds	r4, r7, r5
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff f809 	bl	8000e10 <HAL_InitTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e02:	197b      	adds	r3, r7, r5
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e0a:	197b      	adds	r3, r7, r5
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b004      	add	sp, #16
 8001e18:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1a:	46c0      	nop			@ (mov r8, r8)
 8001e1c:	40022000 	.word	0x40022000
 8001e20:	00001388 	.word	0x00001388
 8001e24:	40021000 	.word	0x40021000
 8001e28:	fffff8ff 	.word	0xfffff8ff
 8001e2c:	ffffc7ff 	.word	0xffffc7ff
 8001e30:	08004090 	.word	0x08004090
 8001e34:	20000018 	.word	0x20000018
 8001e38:	2000001c 	.word	0x2000001c

08001e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e42:	4b3c      	ldr	r3, [pc, #240]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d013      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x3e>
 8001e52:	d85c      	bhi.n	8001f0e <HAL_RCC_GetSysClockFreq+0xd2>
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d002      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x22>
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d00b      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x38>
 8001e5c:	e057      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e5e:	4b35      	ldr	r3, [pc, #212]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2210      	movs	r2, #16
 8001e64:	4013      	ands	r3, r2
 8001e66:	d002      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e68:	4b33      	ldr	r3, [pc, #204]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e6a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e6c:	e05d      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001e6e:	4b33      	ldr	r3, [pc, #204]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001e70:	613b      	str	r3, [r7, #16]
      break;
 8001e72:	e05a      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e74:	4b32      	ldr	r3, [pc, #200]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e76:	613b      	str	r3, [r7, #16]
      break;
 8001e78:	e057      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	0c9b      	lsrs	r3, r3, #18
 8001e7e:	220f      	movs	r2, #15
 8001e80:	4013      	ands	r3, r2
 8001e82:	4a30      	ldr	r2, [pc, #192]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	0d9b      	lsrs	r3, r3, #22
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	4013      	ands	r3, r2
 8001e90:	3301      	adds	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e94:	4b27      	ldr	r3, [pc, #156]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	025b      	lsls	r3, r3, #9
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d00f      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	0152      	lsls	r2, r2, #5
 8001ea6:	1a52      	subs	r2, r2, r1
 8001ea8:	0193      	lsls	r3, r2, #6
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	185b      	adds	r3, r3, r1
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe f927 	bl	8000108 <__udivsi3>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e023      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d00f      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	000a      	movs	r2, r1
 8001ece:	0152      	lsls	r2, r2, #5
 8001ed0:	1a52      	subs	r2, r2, r1
 8001ed2:	0193      	lsls	r3, r2, #6
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	185b      	adds	r3, r3, r1
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7fe f912 	bl	8000108 <__udivsi3>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e00e      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	000a      	movs	r2, r1
 8001eee:	0152      	lsls	r2, r2, #5
 8001ef0:	1a52      	subs	r2, r2, r1
 8001ef2:	0193      	lsls	r3, r2, #6
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	185b      	adds	r3, r3, r1
 8001efa:	029b      	lsls	r3, r3, #10
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7fe f902 	bl	8000108 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	613b      	str	r3, [r7, #16]
      break;
 8001f0c:	e00d      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	0b5b      	lsrs	r3, r3, #13
 8001f14:	2207      	movs	r2, #7
 8001f16:	4013      	ands	r3, r2
 8001f18:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	2280      	movs	r2, #128	@ 0x80
 8001f20:	0212      	lsls	r2, r2, #8
 8001f22:	409a      	lsls	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
      break;
 8001f28:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f2a:	693b      	ldr	r3, [r7, #16]
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b006      	add	sp, #24
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	003d0900 	.word	0x003d0900
 8001f3c:	00f42400 	.word	0x00f42400
 8001f40:	007a1200 	.word	0x007a1200
 8001f44:	080040a8 	.word	0x080040a8

08001f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f4c:	4b02      	ldr	r3, [pc, #8]	@ (8001f58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	20000018 	.word	0x20000018

08001f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f60:	f7ff fff2 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f64:	0001      	movs	r1, r0
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	4013      	ands	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	40d9      	lsrs	r1, r3
 8001f76:	000b      	movs	r3, r1
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	40021000 	.word	0x40021000
 8001f84:	080040a0 	.word	0x080040a0

08001f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f8c:	f7ff ffdc 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f90:	0001      	movs	r1, r0
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	0adb      	lsrs	r3, r3, #11
 8001f98:	2207      	movs	r2, #7
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	40d9      	lsrs	r1, r3
 8001fa2:	000b      	movs	r3, r1
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	080040a0 	.word	0x080040a0

08001fb4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001fbc:	2017      	movs	r0, #23
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d100      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001fce:	e0c7      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd0:	4b84      	ldr	r3, [pc, #528]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	055b      	lsls	r3, r3, #21
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d109      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fdc:	4b81      	ldr	r3, [pc, #516]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fe0:	4b80      	ldr	r3, [pc, #512]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fe2:	2180      	movs	r1, #128	@ 0x80
 8001fe4:	0549      	lsls	r1, r1, #21
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d11a      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b79      	ldr	r3, [pc, #484]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002002:	2180      	movs	r1, #128	@ 0x80
 8002004:	0049      	lsls	r1, r1, #1
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200a:	f7fe ff47 	bl	8000e9c <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002012:	e008      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002014:	f7fe ff42 	bl	8000e9c <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	@ 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0d9      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	4b70      	ldr	r3, [pc, #448]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4013      	ands	r3, r2
 8002030:	d0f0      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002032:	4b6c      	ldr	r3, [pc, #432]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	23c0      	movs	r3, #192	@ 0xc0
 8002038:	039b      	lsls	r3, r3, #14
 800203a:	4013      	ands	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	23c0      	movs	r3, #192	@ 0xc0
 8002044:	039b      	lsls	r3, r3, #14
 8002046:	4013      	ands	r3, r2
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	429a      	cmp	r2, r3
 800204c:	d013      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	23c0      	movs	r3, #192	@ 0xc0
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	401a      	ands	r2, r3
 8002058:	23c0      	movs	r3, #192	@ 0xc0
 800205a:	029b      	lsls	r3, r3, #10
 800205c:	429a      	cmp	r2, r3
 800205e:	d10a      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002060:	4b60      	ldr	r3, [pc, #384]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	029b      	lsls	r3, r3, #10
 8002068:	401a      	ands	r2, r3
 800206a:	2380      	movs	r3, #128	@ 0x80
 800206c:	029b      	lsls	r3, r3, #10
 800206e:	429a      	cmp	r2, r3
 8002070:	d101      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0b1      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002076:	4b5b      	ldr	r3, [pc, #364]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800207a:	23c0      	movs	r3, #192	@ 0xc0
 800207c:	029b      	lsls	r3, r3, #10
 800207e:	4013      	ands	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d03b      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	23c0      	movs	r3, #192	@ 0xc0
 800208e:	029b      	lsls	r3, r3, #10
 8002090:	4013      	ands	r3, r2
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	429a      	cmp	r2, r3
 8002096:	d033      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2220      	movs	r2, #32
 800209e:	4013      	ands	r3, r2
 80020a0:	d02e      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80020a2:	4b50      	ldr	r3, [pc, #320]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a6:	4a51      	ldr	r2, [pc, #324]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ac:	4b4d      	ldr	r3, [pc, #308]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020b0:	4b4c      	ldr	r3, [pc, #304]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020b2:	2180      	movs	r1, #128	@ 0x80
 80020b4:	0309      	lsls	r1, r1, #12
 80020b6:	430a      	orrs	r2, r1
 80020b8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ba:	4b4a      	ldr	r3, [pc, #296]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020be:	4b49      	ldr	r3, [pc, #292]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020c0:	494b      	ldr	r1, [pc, #300]	@ (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80020c2:	400a      	ands	r2, r1
 80020c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80020c6:	4b47      	ldr	r3, [pc, #284]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4013      	ands	r3, r2
 80020d4:	d014      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7fe fee1 	bl	8000e9c <HAL_GetTick>
 80020da:	0003      	movs	r3, r0
 80020dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020de:	e009      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7fe fedc 	bl	8000e9c <HAL_GetTick>
 80020e4:	0002      	movs	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	4a42      	ldr	r2, [pc, #264]	@ (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e072      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020f4:	4b3b      	ldr	r3, [pc, #236]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80020f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020f8:	2380      	movs	r3, #128	@ 0x80
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d0ef      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2220      	movs	r2, #32
 8002106:	4013      	ands	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	23c0      	movs	r3, #192	@ 0xc0
 8002110:	029b      	lsls	r3, r3, #10
 8002112:	401a      	ands	r2, r3
 8002114:	23c0      	movs	r3, #192	@ 0xc0
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	429a      	cmp	r2, r3
 800211a:	d10c      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800211c:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a35      	ldr	r2, [pc, #212]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002122:	4013      	ands	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	23c0      	movs	r3, #192	@ 0xc0
 800212c:	039b      	lsls	r3, r3, #14
 800212e:	401a      	ands	r2, r3
 8002130:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	4b2b      	ldr	r3, [pc, #172]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002138:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	23c0      	movs	r3, #192	@ 0xc0
 8002140:	029b      	lsls	r3, r3, #10
 8002142:	401a      	ands	r2, r3
 8002144:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002146:	430a      	orrs	r2, r1
 8002148:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800214a:	2317      	movs	r3, #23
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002158:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800215a:	4928      	ldr	r1, [pc, #160]	@ (80021fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800215c:	400a      	ands	r2, r1
 800215e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2202      	movs	r2, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	220c      	movs	r2, #12
 8002170:	4393      	bics	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800217a:	430a      	orrs	r2, r1
 800217c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2204      	movs	r2, #4
 8002184:	4013      	ands	r3, r2
 8002186:	d009      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002188:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800218a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218c:	4a1c      	ldr	r2, [pc, #112]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002198:	430a      	orrs	r2, r1
 800219a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	4013      	ands	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a6:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021aa:	4a16      	ldr	r2, [pc, #88]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2280      	movs	r2, #128	@ 0x80
 80021c0:	4013      	ands	r3, r2
 80021c2:	d009      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021c4:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b006      	add	sp, #24
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000
 80021ec:	fffcffff 	.word	0xfffcffff
 80021f0:	fff7ffff 	.word	0xfff7ffff
 80021f4:	00001388 	.word	0x00001388
 80021f8:	ffcfffff 	.word	0xffcfffff
 80021fc:	efffffff 	.word	0xefffffff
 8002200:	fffff3ff 	.word	0xfffff3ff
 8002204:	ffffcfff 	.word	0xffffcfff
 8002208:	fff3ffff 	.word	0xfff3ffff

0800220c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e032      	b.n	8002284 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2239      	movs	r2, #57	@ 0x39
 8002222:	5c9b      	ldrb	r3, [r3, r2]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d107      	bne.n	800223a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2238      	movs	r2, #56	@ 0x38
 800222e:	2100      	movs	r1, #0
 8002230:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0018      	movs	r0, r3
 8002236:	f7fe fc57 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2239      	movs	r2, #57	@ 0x39
 800223e:	2102      	movs	r1, #2
 8002240:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3304      	adds	r3, #4
 800224a:	0019      	movs	r1, r3
 800224c:	0010      	movs	r0, r2
 800224e:	f000 f9dd 	bl	800260c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	223e      	movs	r2, #62	@ 0x3e
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	223a      	movs	r2, #58	@ 0x3a
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	223b      	movs	r2, #59	@ 0x3b
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223c      	movs	r2, #60	@ 0x3c
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	223d      	movs	r2, #61	@ 0x3d
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2239      	movs	r2, #57	@ 0x39
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d021      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2202      	movs	r2, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d01d      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2203      	movs	r2, #3
 80022ba:	4252      	negs	r2, r2
 80022bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2203      	movs	r2, #3
 80022cc:	4013      	ands	r3, r2
 80022ce:	d004      	beq.n	80022da <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f982 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 80022d8:	e007      	b.n	80022ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 f975 	bl	80025cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f981 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2204      	movs	r2, #4
 80022f4:	4013      	ands	r3, r2
 80022f6:	d022      	beq.n	800233e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2204      	movs	r2, #4
 80022fc:	4013      	ands	r3, r2
 80022fe:	d01e      	beq.n	800233e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2205      	movs	r2, #5
 8002306:	4252      	negs	r2, r2
 8002308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	23c0      	movs	r3, #192	@ 0xc0
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4013      	ands	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0018      	movs	r0, r3
 8002322:	f000 f95b 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 8002326:	e007      	b.n	8002338 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	0018      	movs	r0, r3
 800232c:	f000 f94e 	bl	80025cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	0018      	movs	r0, r3
 8002334:	f000 f95a 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2208      	movs	r2, #8
 8002342:	4013      	ands	r3, r2
 8002344:	d021      	beq.n	800238a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2208      	movs	r2, #8
 800234a:	4013      	ands	r3, r2
 800234c:	d01d      	beq.n	800238a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2209      	movs	r2, #9
 8002354:	4252      	negs	r2, r2
 8002356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2204      	movs	r2, #4
 800235c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2203      	movs	r2, #3
 8002366:	4013      	ands	r3, r2
 8002368:	d004      	beq.n	8002374 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 f935 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 8002372:	e007      	b.n	8002384 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	0018      	movs	r0, r3
 8002378:	f000 f928 	bl	80025cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	0018      	movs	r0, r3
 8002380:	f000 f934 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2210      	movs	r2, #16
 800238e:	4013      	ands	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2210      	movs	r2, #16
 8002396:	4013      	ands	r3, r2
 8002398:	d01e      	beq.n	80023d8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2211      	movs	r2, #17
 80023a0:	4252      	negs	r2, r2
 80023a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2208      	movs	r2, #8
 80023a8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	23c0      	movs	r3, #192	@ 0xc0
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 f90e 	bl	80025dc <HAL_TIM_IC_CaptureCallback>
 80023c0:	e007      	b.n	80023d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f901 	bl	80025cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 f90d 	bl	80025ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2201      	movs	r2, #1
 80023dc:	4013      	ands	r3, r2
 80023de:	d00c      	beq.n	80023fa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	4013      	ands	r3, r2
 80023e6:	d008      	beq.n	80023fa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2202      	movs	r2, #2
 80023ee:	4252      	negs	r2, r2
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7fe fb49 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2240      	movs	r2, #64	@ 0x40
 80023fe:	4013      	ands	r3, r2
 8002400:	d00c      	beq.n	800241c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2240      	movs	r2, #64	@ 0x40
 8002406:	4013      	ands	r3, r2
 8002408:	d008      	beq.n	800241c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2241      	movs	r2, #65	@ 0x41
 8002410:	4252      	negs	r2, r2
 8002412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	0018      	movs	r0, r3
 8002418:	f000 f8f0 	bl	80025fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	230f      	movs	r3, #15
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2238      	movs	r2, #56	@ 0x38
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_TIM_ConfigClockSource+0x20>
 8002440:	2302      	movs	r3, #2
 8002442:	e0bc      	b.n	80025be <HAL_TIM_ConfigClockSource+0x19a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2238      	movs	r2, #56	@ 0x38
 8002448:	2101      	movs	r1, #1
 800244a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2239      	movs	r2, #57	@ 0x39
 8002450:	2102      	movs	r1, #2
 8002452:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2277      	movs	r2, #119	@ 0x77
 8002460:	4393      	bics	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4a58      	ldr	r2, [pc, #352]	@ (80025c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2280      	movs	r2, #128	@ 0x80
 800247a:	0192      	lsls	r2, r2, #6
 800247c:	4293      	cmp	r3, r2
 800247e:	d040      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0xde>
 8002480:	2280      	movs	r2, #128	@ 0x80
 8002482:	0192      	lsls	r2, r2, #6
 8002484:	4293      	cmp	r3, r2
 8002486:	d900      	bls.n	800248a <HAL_TIM_ConfigClockSource+0x66>
 8002488:	e088      	b.n	800259c <HAL_TIM_ConfigClockSource+0x178>
 800248a:	2280      	movs	r2, #128	@ 0x80
 800248c:	0152      	lsls	r2, r2, #5
 800248e:	4293      	cmp	r3, r2
 8002490:	d100      	bne.n	8002494 <HAL_TIM_ConfigClockSource+0x70>
 8002492:	e088      	b.n	80025a6 <HAL_TIM_ConfigClockSource+0x182>
 8002494:	2280      	movs	r2, #128	@ 0x80
 8002496:	0152      	lsls	r2, r2, #5
 8002498:	4293      	cmp	r3, r2
 800249a:	d900      	bls.n	800249e <HAL_TIM_ConfigClockSource+0x7a>
 800249c:	e07e      	b.n	800259c <HAL_TIM_ConfigClockSource+0x178>
 800249e:	2b70      	cmp	r3, #112	@ 0x70
 80024a0:	d018      	beq.n	80024d4 <HAL_TIM_ConfigClockSource+0xb0>
 80024a2:	d900      	bls.n	80024a6 <HAL_TIM_ConfigClockSource+0x82>
 80024a4:	e07a      	b.n	800259c <HAL_TIM_ConfigClockSource+0x178>
 80024a6:	2b60      	cmp	r3, #96	@ 0x60
 80024a8:	d04f      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x126>
 80024aa:	d900      	bls.n	80024ae <HAL_TIM_ConfigClockSource+0x8a>
 80024ac:	e076      	b.n	800259c <HAL_TIM_ConfigClockSource+0x178>
 80024ae:	2b50      	cmp	r3, #80	@ 0x50
 80024b0:	d03b      	beq.n	800252a <HAL_TIM_ConfigClockSource+0x106>
 80024b2:	d900      	bls.n	80024b6 <HAL_TIM_ConfigClockSource+0x92>
 80024b4:	e072      	b.n	800259c <HAL_TIM_ConfigClockSource+0x178>
 80024b6:	2b40      	cmp	r3, #64	@ 0x40
 80024b8:	d057      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x146>
 80024ba:	d900      	bls.n	80024be <HAL_TIM_ConfigClockSource+0x9a>
 80024bc:	e06e      	b.n	800259c <HAL_TIM_ConfigClockSource+0x178>
 80024be:	2b30      	cmp	r3, #48	@ 0x30
 80024c0:	d063      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x166>
 80024c2:	d86b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x178>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d060      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x166>
 80024c8:	d868      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x178>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d05d      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x166>
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d05b      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x166>
 80024d2:	e063      	b.n	800259c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024e4:	f000 f966 	bl	80027b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2277      	movs	r2, #119	@ 0x77
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	609a      	str	r2, [r3, #8]
      break;
 8002500:	e052      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002512:	f000 f94f 	bl	80027b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2180      	movs	r1, #128	@ 0x80
 8002522:	01c9      	lsls	r1, r1, #7
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]
      break;
 8002528:	e03e      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002536:	001a      	movs	r2, r3
 8002538:	f000 f8c2 	bl	80026c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2150      	movs	r1, #80	@ 0x50
 8002542:	0018      	movs	r0, r3
 8002544:	f000 f91c 	bl	8002780 <TIM_ITRx_SetConfig>
      break;
 8002548:	e02e      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002556:	001a      	movs	r2, r3
 8002558:	f000 f8e0 	bl	800271c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2160      	movs	r1, #96	@ 0x60
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f90c 	bl	8002780 <TIM_ITRx_SetConfig>
      break;
 8002568:	e01e      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002576:	001a      	movs	r2, r3
 8002578:	f000 f8a2 	bl	80026c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2140      	movs	r1, #64	@ 0x40
 8002582:	0018      	movs	r0, r3
 8002584:	f000 f8fc 	bl	8002780 <TIM_ITRx_SetConfig>
      break;
 8002588:	e00e      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0019      	movs	r1, r3
 8002594:	0010      	movs	r0, r2
 8002596:	f000 f8f3 	bl	8002780 <TIM_ITRx_SetConfig>
      break;
 800259a:	e005      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800259c:	230f      	movs	r3, #15
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
      break;
 80025a4:	e000      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80025a6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2239      	movs	r2, #57	@ 0x39
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2238      	movs	r2, #56	@ 0x38
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]

  return status;
 80025b8:	230f      	movs	r3, #15
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	781b      	ldrb	r3, [r3, #0]
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b004      	add	sp, #16
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	ffff00ff 	.word	0xffff00ff

080025cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025d4:	46c0      	nop			@ (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025e4:	46c0      	nop			@ (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b002      	add	sp, #8
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025f4:	46c0      	nop			@ (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	429a      	cmp	r2, r3
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x2a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <TIM_Base_SetConfig+0xa8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x2a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a21      	ldr	r2, [pc, #132]	@ (80026b8 <TIM_Base_SetConfig+0xac>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2270      	movs	r2, #112	@ 0x70
 800263a:	4393      	bics	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	2380      	movs	r3, #128	@ 0x80
 800264c:	05db      	lsls	r3, r3, #23
 800264e:	429a      	cmp	r2, r3
 8002650:	d007      	beq.n	8002662 <TIM_Base_SetConfig+0x56>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <TIM_Base_SetConfig+0xa8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <TIM_Base_SetConfig+0x56>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a16      	ldr	r2, [pc, #88]	@ (80026b8 <TIM_Base_SetConfig+0xac>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d108      	bne.n	8002674 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a15      	ldr	r2, [pc, #84]	@ (80026bc <TIM_Base_SetConfig+0xb0>)
 8002666:	4013      	ands	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2280      	movs	r2, #128	@ 0x80
 8002678:	4393      	bics	r3, r2
 800267a:	001a      	movs	r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2204      	movs	r2, #4
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]
}
 80026ac:	46c0      	nop			@ (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b004      	add	sp, #16
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40010800 	.word	0x40010800
 80026b8:	40011400 	.word	0x40011400
 80026bc:	fffffcff 	.word	0xfffffcff

080026c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4393      	bics	r3, r2
 80026da:	001a      	movs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	22f0      	movs	r2, #240	@ 0xf0
 80026ea:	4393      	bics	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	220a      	movs	r2, #10
 80026fc:	4393      	bics	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	621a      	str	r2, [r3, #32]
}
 8002714:	46c0      	nop			@ (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b006      	add	sp, #24
 800271a:	bd80      	pop	{r7, pc}

0800271c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	2210      	movs	r2, #16
 8002734:	4393      	bics	r3, r2
 8002736:	001a      	movs	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4a0d      	ldr	r2, [pc, #52]	@ (800277c <TIM_TI2_ConfigInputStage+0x60>)
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	031b      	lsls	r3, r3, #12
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	22a0      	movs	r2, #160	@ 0xa0
 8002758:	4393      	bics	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	621a      	str	r2, [r3, #32]
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b006      	add	sp, #24
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	ffff0fff 	.word	0xffff0fff

08002780 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2270      	movs	r2, #112	@ 0x70
 8002794:	4393      	bics	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	2207      	movs	r2, #7
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	609a      	str	r2, [r3, #8]
}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4a09      	ldr	r2, [pc, #36]	@ (80027f0 <TIM_ETR_SetConfig+0x3c>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	021a      	lsls	r2, r3, #8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b006      	add	sp, #24
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	ffff00ff 	.word	0xffff00ff

080027f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2238      	movs	r2, #56	@ 0x38
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002808:	2302      	movs	r3, #2
 800280a:	e042      	b.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2238      	movs	r2, #56	@ 0x38
 8002810:	2101      	movs	r1, #1
 8002812:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2239      	movs	r2, #57	@ 0x39
 8002818:	2102      	movs	r1, #2
 800281a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2270      	movs	r2, #112	@ 0x70
 8002830:	4393      	bics	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	05db      	lsls	r3, r3, #23
 800284e:	429a      	cmp	r2, r3
 8002850:	d009      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a11      	ldr	r2, [pc, #68]	@ (800289c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0f      	ldr	r2, [pc, #60]	@ (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10c      	bne.n	8002880 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2280      	movs	r2, #128	@ 0x80
 800286a:	4393      	bics	r3, r2
 800286c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	4313      	orrs	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2239      	movs	r2, #57	@ 0x39
 8002884:	2101      	movs	r1, #1
 8002886:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2238      	movs	r2, #56	@ 0x38
 800288c:	2100      	movs	r1, #0
 800288e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b004      	add	sp, #16
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	40010800 	.word	0x40010800
 80028a0:	40011400 	.word	0x40011400

080028a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e044      	b.n	8002940 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d107      	bne.n	80028ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2278      	movs	r2, #120	@ 0x78
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7fe f943 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2224      	movs	r2, #36	@ 0x24
 80028d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	438a      	bics	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 fe90 	bl	8003614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 fc42 	bl	8003180 <UART_SetConfig>
 80028fc:	0003      	movs	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e01c      	b.n	8002940 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	490d      	ldr	r1, [pc, #52]	@ (8002948 <HAL_UART_Init+0xa4>)
 8002912:	400a      	ands	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	212a      	movs	r1, #42	@ 0x2a
 8002922:	438a      	bics	r2, r1
 8002924:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 ff1f 	bl	800377c <UART_CheckIdleState>
 800293e:	0003      	movs	r3, r0
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}
 8002948:	ffffb7ff 	.word	0xffffb7ff

0800294c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	1dbb      	adds	r3, r7, #6
 800295a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002960:	2b20      	cmp	r3, #32
 8002962:	d000      	beq.n	8002966 <HAL_UART_Transmit+0x1a>
 8002964:	e08c      	b.n	8002a80 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_UART_Transmit+0x28>
 800296c:	1dbb      	adds	r3, r7, #6
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e084      	b.n	8002a82 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	2380      	movs	r3, #128	@ 0x80
 800297e:	015b      	lsls	r3, r3, #5
 8002980:	429a      	cmp	r2, r3
 8002982:	d109      	bne.n	8002998 <HAL_UART_Transmit+0x4c>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2201      	movs	r2, #1
 8002990:	4013      	ands	r3, r2
 8002992:	d001      	beq.n	8002998 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e074      	b.n	8002a82 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2284      	movs	r2, #132	@ 0x84
 800299c:	2100      	movs	r1, #0
 800299e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2221      	movs	r2, #33	@ 0x21
 80029a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a6:	f7fe fa79 	bl	8000e9c <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1dba      	adds	r2, r7, #6
 80029b2:	2150      	movs	r1, #80	@ 0x50
 80029b4:	8812      	ldrh	r2, [r2, #0]
 80029b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1dba      	adds	r2, r7, #6
 80029bc:	2152      	movs	r1, #82	@ 0x52
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	015b      	lsls	r3, r3, #5
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d108      	bne.n	80029e0 <HAL_UART_Transmit+0x94>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	e003      	b.n	80029e8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029e8:	e02f      	b.n	8002a4a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	0013      	movs	r3, r2
 80029f4:	2200      	movs	r2, #0
 80029f6:	2180      	movs	r1, #128	@ 0x80
 80029f8:	f000 ff68 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e03b      	b.n	8002a82 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	001a      	movs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	05d2      	lsls	r2, r2, #23
 8002a1c:	0dd2      	lsrs	r2, r2, #23
 8002a1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	3302      	adds	r3, #2
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e007      	b.n	8002a38 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2252      	movs	r2, #82	@ 0x52
 8002a3c:	5a9b      	ldrh	r3, [r3, r2]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b299      	uxth	r1, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2252      	movs	r2, #82	@ 0x52
 8002a48:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2252      	movs	r2, #82	@ 0x52
 8002a4e:	5a9b      	ldrh	r3, [r3, r2]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1c9      	bne.n	80029ea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	0013      	movs	r3, r2
 8002a60:	2200      	movs	r2, #0
 8002a62:	2140      	movs	r1, #64	@ 0x40
 8002a64:	f000 ff32 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 8002a68:	1e03      	subs	r3, r0, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e005      	b.n	8002a82 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b008      	add	sp, #32
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	1dbb      	adds	r3, r7, #6
 8002a98:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2280      	movs	r2, #128	@ 0x80
 8002a9e:	589b      	ldr	r3, [r3, r2]
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d14a      	bne.n	8002b3a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_UART_Receive_IT+0x26>
 8002aaa:	1dbb      	adds	r3, r7, #6
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e042      	b.n	8002b3c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	015b      	lsls	r3, r3, #5
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d109      	bne.n	8002ad6 <HAL_UART_Receive_IT+0x4a>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2201      	movs	r2, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d001      	beq.n	8002ad6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e032      	b.n	8002b3c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a18      	ldr	r2, [pc, #96]	@ (8002b44 <HAL_UART_Receive_IT+0xb8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d020      	beq.n	8002b28 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	2380      	movs	r3, #128	@ 0x80
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	4013      	ands	r3, r2
 8002af2:	d019      	beq.n	8002b28 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af4:	f3ef 8310 	mrs	r3, PRIMASK
 8002af8:	613b      	str	r3, [r7, #16]
  return(result);
 8002afa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	2301      	movs	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f383 8810 	msr	PRIMASK, r3
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2180      	movs	r1, #128	@ 0x80
 8002b16:	04c9      	lsls	r1, r1, #19
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b28:	1dbb      	adds	r3, r7, #6
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 ff3b 	bl	80039ac <UART_Start_Receive_IT>
 8002b36:	0003      	movs	r3, r0
 8002b38:	e000      	b.n	8002b3c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b008      	add	sp, #32
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40004800 	.word	0x40004800

08002b48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b0ab      	sub	sp, #172	@ 0xac
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	22a4      	movs	r2, #164	@ 0xa4
 8002b58:	18b9      	adds	r1, r7, r2
 8002b5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	20a0      	movs	r0, #160	@ 0xa0
 8002b64:	1839      	adds	r1, r7, r0
 8002b66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	219c      	movs	r1, #156	@ 0x9c
 8002b70:	1879      	adds	r1, r7, r1
 8002b72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b74:	0011      	movs	r1, r2
 8002b76:	18bb      	adds	r3, r7, r2
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a99      	ldr	r2, [pc, #612]	@ (8002de0 <HAL_UART_IRQHandler+0x298>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2298      	movs	r2, #152	@ 0x98
 8002b80:	18bc      	adds	r4, r7, r2
 8002b82:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002b84:	18bb      	adds	r3, r7, r2
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d114      	bne.n	8002bb6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2220      	movs	r2, #32
 8002b92:	4013      	ands	r3, r2
 8002b94:	d00f      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b96:	183b      	adds	r3, r7, r0
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d100      	bne.n	8002baa <HAL_UART_IRQHandler+0x62>
 8002ba8:	e2be      	b.n	8003128 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	4798      	blx	r3
      }
      return;
 8002bb4:	e2b8      	b.n	8003128 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bb6:	2398      	movs	r3, #152	@ 0x98
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d100      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x7a>
 8002bc0:	e114      	b.n	8002dec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bc2:	239c      	movs	r3, #156	@ 0x9c
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d106      	bne.n	8002bdc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bce:	23a0      	movs	r3, #160	@ 0xa0
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a83      	ldr	r2, [pc, #524]	@ (8002de4 <HAL_UART_IRQHandler+0x29c>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d100      	bne.n	8002bdc <HAL_UART_IRQHandler+0x94>
 8002bda:	e107      	b.n	8002dec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bdc:	23a4      	movs	r3, #164	@ 0xa4
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4013      	ands	r3, r2
 8002be6:	d012      	beq.n	8002c0e <HAL_UART_IRQHandler+0xc6>
 8002be8:	23a0      	movs	r3, #160	@ 0xa0
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d00b      	beq.n	8002c0e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2284      	movs	r2, #132	@ 0x84
 8002c02:	589b      	ldr	r3, [r3, r2]
 8002c04:	2201      	movs	r2, #1
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2184      	movs	r1, #132	@ 0x84
 8002c0c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c0e:	23a4      	movs	r3, #164	@ 0xa4
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2202      	movs	r2, #2
 8002c16:	4013      	ands	r3, r2
 8002c18:	d011      	beq.n	8002c3e <HAL_UART_IRQHandler+0xf6>
 8002c1a:	239c      	movs	r3, #156	@ 0x9c
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	d00b      	beq.n	8002c3e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2284      	movs	r2, #132	@ 0x84
 8002c32:	589b      	ldr	r3, [r3, r2]
 8002c34:	2204      	movs	r2, #4
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2184      	movs	r1, #132	@ 0x84
 8002c3c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c3e:	23a4      	movs	r3, #164	@ 0xa4
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2204      	movs	r2, #4
 8002c46:	4013      	ands	r3, r2
 8002c48:	d011      	beq.n	8002c6e <HAL_UART_IRQHandler+0x126>
 8002c4a:	239c      	movs	r3, #156	@ 0x9c
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2201      	movs	r2, #1
 8002c52:	4013      	ands	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2284      	movs	r2, #132	@ 0x84
 8002c62:	589b      	ldr	r3, [r3, r2]
 8002c64:	2202      	movs	r2, #2
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2184      	movs	r1, #132	@ 0x84
 8002c6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c6e:	23a4      	movs	r3, #164	@ 0xa4
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2208      	movs	r2, #8
 8002c76:	4013      	ands	r3, r2
 8002c78:	d017      	beq.n	8002caa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c7a:	23a0      	movs	r3, #160	@ 0xa0
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2220      	movs	r2, #32
 8002c82:	4013      	ands	r3, r2
 8002c84:	d105      	bne.n	8002c92 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c86:	239c      	movs	r3, #156	@ 0x9c
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c90:	d00b      	beq.n	8002caa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2208      	movs	r2, #8
 8002c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2284      	movs	r2, #132	@ 0x84
 8002c9e:	589b      	ldr	r3, [r3, r2]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2184      	movs	r1, #132	@ 0x84
 8002ca8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002caa:	23a4      	movs	r3, #164	@ 0xa4
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d013      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x198>
 8002cb8:	23a0      	movs	r3, #160	@ 0xa0
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	04db      	lsls	r3, r3, #19
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2280      	movs	r2, #128	@ 0x80
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2284      	movs	r2, #132	@ 0x84
 8002cd4:	589b      	ldr	r3, [r3, r2]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2184      	movs	r1, #132	@ 0x84
 8002cde:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2284      	movs	r2, #132	@ 0x84
 8002ce4:	589b      	ldr	r3, [r3, r2]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d100      	bne.n	8002cec <HAL_UART_IRQHandler+0x1a4>
 8002cea:	e21f      	b.n	800312c <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cec:	23a4      	movs	r3, #164	@ 0xa4
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d00e      	beq.n	8002d16 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cf8:	23a0      	movs	r3, #160	@ 0xa0
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	4013      	ands	r3, r2
 8002d02:	d008      	beq.n	8002d16 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	0010      	movs	r0, r2
 8002d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2284      	movs	r2, #132	@ 0x84
 8002d1a:	589b      	ldr	r3, [r3, r2]
 8002d1c:	2194      	movs	r1, #148	@ 0x94
 8002d1e:	187a      	adds	r2, r7, r1
 8002d20:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2240      	movs	r2, #64	@ 0x40
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b40      	cmp	r3, #64	@ 0x40
 8002d2e:	d004      	beq.n	8002d3a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2228      	movs	r2, #40	@ 0x28
 8002d36:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d38:	d047      	beq.n	8002dca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 feff 	bl	8003b40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2240      	movs	r2, #64	@ 0x40
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b40      	cmp	r3, #64	@ 0x40
 8002d4e:	d137      	bne.n	8002dc0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d50:	f3ef 8310 	mrs	r3, PRIMASK
 8002d54:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d58:	2090      	movs	r0, #144	@ 0x90
 8002d5a:	183a      	adds	r2, r7, r0
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d64:	f383 8810 	msr	PRIMASK, r3
}
 8002d68:	46c0      	nop			@ (mov r8, r8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2140      	movs	r1, #64	@ 0x40
 8002d76:	438a      	bics	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	183b      	adds	r3, r7, r0
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d82:	f383 8810 	msr	PRIMASK, r3
}
 8002d86:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d012      	beq.n	8002db6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d94:	4a14      	ldr	r2, [pc, #80]	@ (8002de8 <HAL_UART_IRQHandler+0x2a0>)
 8002d96:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7fe f9a5 	bl	80010ec <HAL_DMA_Abort_IT>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d01a      	beq.n	8002ddc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002daa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db0:	0018      	movs	r0, r3
 8002db2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	e012      	b.n	8002ddc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 f9cd 	bl	8003158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dbe:	e00d      	b.n	8002ddc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f9c8 	bl	8003158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	e008      	b.n	8002ddc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 f9c3 	bl	8003158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2284      	movs	r2, #132	@ 0x84
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002dda:	e1a7      	b.n	800312c <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ddc:	46c0      	nop			@ (mov r8, r8)
    return;
 8002dde:	e1a5      	b.n	800312c <HAL_UART_IRQHandler+0x5e4>
 8002de0:	0000080f 	.word	0x0000080f
 8002de4:	04000120 	.word	0x04000120
 8002de8:	08003c09 	.word	0x08003c09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d000      	beq.n	8002df6 <HAL_UART_IRQHandler+0x2ae>
 8002df4:	e159      	b.n	80030aa <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002df6:	23a4      	movs	r3, #164	@ 0xa4
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d100      	bne.n	8002e04 <HAL_UART_IRQHandler+0x2bc>
 8002e02:	e152      	b.n	80030aa <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e04:	23a0      	movs	r3, #160	@ 0xa0
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <HAL_UART_IRQHandler+0x2ca>
 8002e10:	e14b      	b.n	80030aa <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2210      	movs	r2, #16
 8002e18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2240      	movs	r2, #64	@ 0x40
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b40      	cmp	r3, #64	@ 0x40
 8002e26:	d000      	beq.n	8002e2a <HAL_UART_IRQHandler+0x2e2>
 8002e28:	e0bf      	b.n	8002faa <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	217e      	movs	r1, #126	@ 0x7e
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d100      	bne.n	8002e42 <HAL_UART_IRQHandler+0x2fa>
 8002e40:	e095      	b.n	8002f6e <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2258      	movs	r2, #88	@ 0x58
 8002e46:	5a9b      	ldrh	r3, [r3, r2]
 8002e48:	187a      	adds	r2, r7, r1
 8002e4a:	8812      	ldrh	r2, [r2, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d300      	bcc.n	8002e52 <HAL_UART_IRQHandler+0x30a>
 8002e50:	e08d      	b.n	8002f6e <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	187a      	adds	r2, r7, r1
 8002e56:	215a      	movs	r1, #90	@ 0x5a
 8002e58:	8812      	ldrh	r2, [r2, #0]
 8002e5a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2220      	movs	r2, #32
 8002e66:	4013      	ands	r3, r2
 8002e68:	d16f      	bne.n	8002f4a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e74:	2301      	movs	r3, #1
 8002e76:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7a:	f383 8810 	msr	PRIMASK, r3
}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	49ad      	ldr	r1, [pc, #692]	@ (8003140 <HAL_UART_IRQHandler+0x5f8>)
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e96:	f383 8810 	msr	PRIMASK, r3
}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea4:	677b      	str	r3, [r7, #116]	@ 0x74
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eac:	f383 8810 	msr	PRIMASK, r3
}
 8002eb0:	46c0      	nop			@ (mov r8, r8)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	438a      	bics	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ec8:	f383 8810 	msr	PRIMASK, r3
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ece:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ed8:	2301      	movs	r3, #1
 8002eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ede:	f383 8810 	msr	PRIMASK, r3
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2140      	movs	r1, #64	@ 0x40
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ef6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002efa:	f383 8810 	msr	PRIMASK, r3
}
 8002efe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2280      	movs	r2, #128	@ 0x80
 8002f04:	2120      	movs	r1, #32
 8002f06:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f12:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f18:	2301      	movs	r3, #1
 8002f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f1e:	f383 8810 	msr	PRIMASK, r3
}
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2110      	movs	r1, #16
 8002f30:	438a      	bics	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7fe f891 	bl	800106c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2258      	movs	r2, #88	@ 0x58
 8002f54:	5a9a      	ldrh	r2, [r3, r2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	215a      	movs	r1, #90	@ 0x5a
 8002f5a:	5a5b      	ldrh	r3, [r3, r1]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0011      	movs	r1, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 f8fe 	bl	8003168 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002f6c:	e0e0      	b.n	8003130 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2258      	movs	r2, #88	@ 0x58
 8002f72:	5a9b      	ldrh	r3, [r3, r2]
 8002f74:	227e      	movs	r2, #126	@ 0x7e
 8002f76:	18ba      	adds	r2, r7, r2
 8002f78:	8812      	ldrh	r2, [r2, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d000      	beq.n	8002f80 <HAL_UART_IRQHandler+0x438>
 8002f7e:	e0d7      	b.n	8003130 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d000      	beq.n	8002f92 <HAL_UART_IRQHandler+0x44a>
 8002f90:	e0ce      	b.n	8003130 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2258      	movs	r2, #88	@ 0x58
 8002f9c:	5a9a      	ldrh	r2, [r3, r2]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f8e0 	bl	8003168 <HAL_UARTEx_RxEventCallback>
      return;
 8002fa8:	e0c2      	b.n	8003130 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2258      	movs	r2, #88	@ 0x58
 8002fae:	5a99      	ldrh	r1, [r3, r2]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	225a      	movs	r2, #90	@ 0x5a
 8002fb4:	5a9b      	ldrh	r3, [r3, r2]
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	208e      	movs	r0, #142	@ 0x8e
 8002fba:	183b      	adds	r3, r7, r0
 8002fbc:	1a8a      	subs	r2, r1, r2
 8002fbe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	225a      	movs	r2, #90	@ 0x5a
 8002fc4:	5a9b      	ldrh	r3, [r3, r2]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d100      	bne.n	8002fce <HAL_UART_IRQHandler+0x486>
 8002fcc:	e0b2      	b.n	8003134 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8002fce:	183b      	adds	r3, r7, r0
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d100      	bne.n	8002fd8 <HAL_UART_IRQHandler+0x490>
 8002fd6:	e0ad      	b.n	8003134 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fde:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fe0:	2488      	movs	r4, #136	@ 0x88
 8002fe2:	193a      	adds	r2, r7, r4
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f383 8810 	msr	PRIMASK, r3
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4951      	ldr	r1, [pc, #324]	@ (8003144 <HAL_UART_IRQHandler+0x5fc>)
 8002ffe:	400a      	ands	r2, r1
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	193b      	adds	r3, r7, r4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f383 8810 	msr	PRIMASK, r3
}
 800300e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003010:	f3ef 8310 	mrs	r3, PRIMASK
 8003014:	61bb      	str	r3, [r7, #24]
  return(result);
 8003016:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003018:	2484      	movs	r4, #132	@ 0x84
 800301a:	193a      	adds	r2, r7, r4
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	2301      	movs	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f383 8810 	msr	PRIMASK, r3
}
 8003028:	46c0      	nop			@ (mov r8, r8)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	438a      	bics	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	193b      	adds	r3, r7, r4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	f383 8810 	msr	PRIMASK, r3
}
 8003046:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2280      	movs	r2, #128	@ 0x80
 800304c:	2120      	movs	r1, #32
 800304e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305c:	f3ef 8310 	mrs	r3, PRIMASK
 8003060:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003064:	2480      	movs	r4, #128	@ 0x80
 8003066:	193a      	adds	r2, r7, r4
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	2301      	movs	r3, #1
 800306c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	f383 8810 	msr	PRIMASK, r3
}
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2110      	movs	r1, #16
 8003082:	438a      	bics	r2, r1
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	193b      	adds	r3, r7, r4
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308e:	f383 8810 	msr	PRIMASK, r3
}
 8003092:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800309a:	183b      	adds	r3, r7, r0
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0011      	movs	r1, r2
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 f860 	bl	8003168 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030a8:	e044      	b.n	8003134 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030aa:	23a4      	movs	r3, #164	@ 0xa4
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	@ 0x80
 80030b2:	035b      	lsls	r3, r3, #13
 80030b4:	4013      	ands	r3, r2
 80030b6:	d010      	beq.n	80030da <HAL_UART_IRQHandler+0x592>
 80030b8:	239c      	movs	r3, #156	@ 0x9c
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	03db      	lsls	r3, r3, #15
 80030c2:	4013      	ands	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	0352      	lsls	r2, r2, #13
 80030ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 ff9a 	bl	800400c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030d8:	e02f      	b.n	800313a <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030da:	23a4      	movs	r3, #164	@ 0xa4
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2280      	movs	r2, #128	@ 0x80
 80030e2:	4013      	ands	r3, r2
 80030e4:	d00f      	beq.n	8003106 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030e6:	23a0      	movs	r3, #160	@ 0xa0
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2280      	movs	r2, #128	@ 0x80
 80030ee:	4013      	ands	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01e      	beq.n	8003138 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	0010      	movs	r0, r2
 8003102:	4798      	blx	r3
    }
    return;
 8003104:	e018      	b.n	8003138 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003106:	23a4      	movs	r3, #164	@ 0xa4
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2240      	movs	r2, #64	@ 0x40
 800310e:	4013      	ands	r3, r2
 8003110:	d013      	beq.n	800313a <HAL_UART_IRQHandler+0x5f2>
 8003112:	23a0      	movs	r3, #160	@ 0xa0
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2240      	movs	r2, #64	@ 0x40
 800311a:	4013      	ands	r3, r2
 800311c:	d00d      	beq.n	800313a <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fd84 	bl	8003c2e <UART_EndTransmit_IT>
    return;
 8003126:	e008      	b.n	800313a <HAL_UART_IRQHandler+0x5f2>
      return;
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	e006      	b.n	800313a <HAL_UART_IRQHandler+0x5f2>
    return;
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	e004      	b.n	800313a <HAL_UART_IRQHandler+0x5f2>
      return;
 8003130:	46c0      	nop			@ (mov r8, r8)
 8003132:	e002      	b.n	800313a <HAL_UART_IRQHandler+0x5f2>
      return;
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	e000      	b.n	800313a <HAL_UART_IRQHandler+0x5f2>
    return;
 8003138:	46c0      	nop			@ (mov r8, r8)
  }

}
 800313a:	46bd      	mov	sp, r7
 800313c:	b02b      	add	sp, #172	@ 0xac
 800313e:	bd90      	pop	{r4, r7, pc}
 8003140:	fffffeff 	.word	0xfffffeff
 8003144:	fffffedf 	.word	0xfffffedf

08003148 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003150:	46c0      	nop			@ (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b002      	add	sp, #8
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	000a      	movs	r2, r1
 8003172:	1cbb      	adds	r3, r7, #2
 8003174:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	b002      	add	sp, #8
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	b5b0      	push	{r4, r5, r7, lr}
 8003182:	b08e      	sub	sp, #56	@ 0x38
 8003184:	af00      	add	r7, sp, #0
 8003186:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003188:	231a      	movs	r3, #26
 800318a:	2218      	movs	r2, #24
 800318c:	189b      	adds	r3, r3, r2
 800318e:	19db      	adds	r3, r3, r7
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	431a      	orrs	r2, r3
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4ab4      	ldr	r2, [pc, #720]	@ (8003484 <UART_SetConfig+0x304>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031be:	430a      	orrs	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4aaf      	ldr	r2, [pc, #700]	@ (8003488 <UART_SetConfig+0x308>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4aa9      	ldr	r2, [pc, #676]	@ (800348c <UART_SetConfig+0x30c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031f0:	4313      	orrs	r3, r2
 80031f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4aa5      	ldr	r2, [pc, #660]	@ (8003490 <UART_SetConfig+0x310>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	0019      	movs	r1, r3
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4aa1      	ldr	r2, [pc, #644]	@ (8003494 <UART_SetConfig+0x314>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d131      	bne.n	8003278 <UART_SetConfig+0xf8>
 8003214:	4ba0      	ldr	r3, [pc, #640]	@ (8003498 <UART_SetConfig+0x318>)
 8003216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003218:	220c      	movs	r2, #12
 800321a:	4013      	ands	r3, r2
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d01d      	beq.n	800325c <UART_SetConfig+0xdc>
 8003220:	d823      	bhi.n	800326a <UART_SetConfig+0xea>
 8003222:	2b08      	cmp	r3, #8
 8003224:	d00c      	beq.n	8003240 <UART_SetConfig+0xc0>
 8003226:	d820      	bhi.n	800326a <UART_SetConfig+0xea>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <UART_SetConfig+0xb2>
 800322c:	2b04      	cmp	r3, #4
 800322e:	d00e      	beq.n	800324e <UART_SetConfig+0xce>
 8003230:	e01b      	b.n	800326a <UART_SetConfig+0xea>
 8003232:	231b      	movs	r3, #27
 8003234:	2218      	movs	r2, #24
 8003236:	189b      	adds	r3, r3, r2
 8003238:	19db      	adds	r3, r3, r7
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e065      	b.n	800330c <UART_SetConfig+0x18c>
 8003240:	231b      	movs	r3, #27
 8003242:	2218      	movs	r2, #24
 8003244:	189b      	adds	r3, r3, r2
 8003246:	19db      	adds	r3, r3, r7
 8003248:	2202      	movs	r2, #2
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e05e      	b.n	800330c <UART_SetConfig+0x18c>
 800324e:	231b      	movs	r3, #27
 8003250:	2218      	movs	r2, #24
 8003252:	189b      	adds	r3, r3, r2
 8003254:	19db      	adds	r3, r3, r7
 8003256:	2204      	movs	r2, #4
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e057      	b.n	800330c <UART_SetConfig+0x18c>
 800325c:	231b      	movs	r3, #27
 800325e:	2218      	movs	r2, #24
 8003260:	189b      	adds	r3, r3, r2
 8003262:	19db      	adds	r3, r3, r7
 8003264:	2208      	movs	r2, #8
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e050      	b.n	800330c <UART_SetConfig+0x18c>
 800326a:	231b      	movs	r3, #27
 800326c:	2218      	movs	r2, #24
 800326e:	189b      	adds	r3, r3, r2
 8003270:	19db      	adds	r3, r3, r7
 8003272:	2210      	movs	r2, #16
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e049      	b.n	800330c <UART_SetConfig+0x18c>
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a83      	ldr	r2, [pc, #524]	@ (800348c <UART_SetConfig+0x30c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d13e      	bne.n	8003300 <UART_SetConfig+0x180>
 8003282:	4b85      	ldr	r3, [pc, #532]	@ (8003498 <UART_SetConfig+0x318>)
 8003284:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003286:	23c0      	movs	r3, #192	@ 0xc0
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	4013      	ands	r3, r2
 800328c:	22c0      	movs	r2, #192	@ 0xc0
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	4293      	cmp	r3, r2
 8003292:	d027      	beq.n	80032e4 <UART_SetConfig+0x164>
 8003294:	22c0      	movs	r2, #192	@ 0xc0
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	4293      	cmp	r3, r2
 800329a:	d82a      	bhi.n	80032f2 <UART_SetConfig+0x172>
 800329c:	2280      	movs	r2, #128	@ 0x80
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d011      	beq.n	80032c8 <UART_SetConfig+0x148>
 80032a4:	2280      	movs	r2, #128	@ 0x80
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d822      	bhi.n	80032f2 <UART_SetConfig+0x172>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <UART_SetConfig+0x13a>
 80032b0:	2280      	movs	r2, #128	@ 0x80
 80032b2:	00d2      	lsls	r2, r2, #3
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00e      	beq.n	80032d6 <UART_SetConfig+0x156>
 80032b8:	e01b      	b.n	80032f2 <UART_SetConfig+0x172>
 80032ba:	231b      	movs	r3, #27
 80032bc:	2218      	movs	r2, #24
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	19db      	adds	r3, r3, r7
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e021      	b.n	800330c <UART_SetConfig+0x18c>
 80032c8:	231b      	movs	r3, #27
 80032ca:	2218      	movs	r2, #24
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	19db      	adds	r3, r3, r7
 80032d0:	2202      	movs	r2, #2
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	e01a      	b.n	800330c <UART_SetConfig+0x18c>
 80032d6:	231b      	movs	r3, #27
 80032d8:	2218      	movs	r2, #24
 80032da:	189b      	adds	r3, r3, r2
 80032dc:	19db      	adds	r3, r3, r7
 80032de:	2204      	movs	r2, #4
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e013      	b.n	800330c <UART_SetConfig+0x18c>
 80032e4:	231b      	movs	r3, #27
 80032e6:	2218      	movs	r2, #24
 80032e8:	189b      	adds	r3, r3, r2
 80032ea:	19db      	adds	r3, r3, r7
 80032ec:	2208      	movs	r2, #8
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e00c      	b.n	800330c <UART_SetConfig+0x18c>
 80032f2:	231b      	movs	r3, #27
 80032f4:	2218      	movs	r2, #24
 80032f6:	189b      	adds	r3, r3, r2
 80032f8:	19db      	adds	r3, r3, r7
 80032fa:	2210      	movs	r2, #16
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e005      	b.n	800330c <UART_SetConfig+0x18c>
 8003300:	231b      	movs	r3, #27
 8003302:	2218      	movs	r2, #24
 8003304:	189b      	adds	r3, r3, r2
 8003306:	19db      	adds	r3, r3, r7
 8003308:	2210      	movs	r2, #16
 800330a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a5e      	ldr	r2, [pc, #376]	@ (800348c <UART_SetConfig+0x30c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d000      	beq.n	8003318 <UART_SetConfig+0x198>
 8003316:	e084      	b.n	8003422 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003318:	231b      	movs	r3, #27
 800331a:	2218      	movs	r2, #24
 800331c:	189b      	adds	r3, r3, r2
 800331e:	19db      	adds	r3, r3, r7
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b08      	cmp	r3, #8
 8003324:	d01d      	beq.n	8003362 <UART_SetConfig+0x1e2>
 8003326:	dc20      	bgt.n	800336a <UART_SetConfig+0x1ea>
 8003328:	2b04      	cmp	r3, #4
 800332a:	d015      	beq.n	8003358 <UART_SetConfig+0x1d8>
 800332c:	dc1d      	bgt.n	800336a <UART_SetConfig+0x1ea>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <UART_SetConfig+0x1b8>
 8003332:	2b02      	cmp	r3, #2
 8003334:	d005      	beq.n	8003342 <UART_SetConfig+0x1c2>
 8003336:	e018      	b.n	800336a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003338:	f7fe fe10 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 800333c:	0003      	movs	r3, r0
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003340:	e01c      	b.n	800337c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003342:	4b55      	ldr	r3, [pc, #340]	@ (8003498 <UART_SetConfig+0x318>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2210      	movs	r2, #16
 8003348:	4013      	ands	r3, r2
 800334a:	d002      	beq.n	8003352 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800334c:	4b53      	ldr	r3, [pc, #332]	@ (800349c <UART_SetConfig+0x31c>)
 800334e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003350:	e014      	b.n	800337c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003352:	4b53      	ldr	r3, [pc, #332]	@ (80034a0 <UART_SetConfig+0x320>)
 8003354:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003356:	e011      	b.n	800337c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003358:	f7fe fd70 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 800335c:	0003      	movs	r3, r0
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003360:	e00c      	b.n	800337c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003368:	e008      	b.n	800337c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800336e:	231a      	movs	r3, #26
 8003370:	2218      	movs	r2, #24
 8003372:	189b      	adds	r3, r3, r2
 8003374:	19db      	adds	r3, r3, r7
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
        break;
 800337a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800337c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d100      	bne.n	8003384 <UART_SetConfig+0x204>
 8003382:	e12f      	b.n	80035e4 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	0013      	movs	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	189b      	adds	r3, r3, r2
 800338e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003390:	429a      	cmp	r2, r3
 8003392:	d305      	bcc.n	80033a0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800339a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800339c:	429a      	cmp	r2, r3
 800339e:	d906      	bls.n	80033ae <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80033a0:	231a      	movs	r3, #26
 80033a2:	2218      	movs	r2, #24
 80033a4:	189b      	adds	r3, r3, r2
 80033a6:	19db      	adds	r3, r3, r7
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
 80033ac:	e11a      	b.n	80035e4 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	6939      	ldr	r1, [r7, #16]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	000b      	movs	r3, r1
 80033bc:	0e1b      	lsrs	r3, r3, #24
 80033be:	0010      	movs	r0, r2
 80033c0:	0205      	lsls	r5, r0, #8
 80033c2:	431d      	orrs	r5, r3
 80033c4:	000b      	movs	r3, r1
 80033c6:	021c      	lsls	r4, r3, #8
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68b8      	ldr	r0, [r7, #8]
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	1900      	adds	r0, r0, r4
 80033da:	4169      	adcs	r1, r5
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f7fc ff19 	bl	8000220 <__aeabi_uldivmod>
 80033ee:	0002      	movs	r2, r0
 80033f0:	000b      	movs	r3, r1
 80033f2:	0013      	movs	r3, r2
 80033f4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033f8:	23c0      	movs	r3, #192	@ 0xc0
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d309      	bcc.n	8003414 <UART_SetConfig+0x294>
 8003400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	035b      	lsls	r3, r3, #13
 8003406:	429a      	cmp	r2, r3
 8003408:	d204      	bcs.n	8003414 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	e0e7      	b.n	80035e4 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003414:	231a      	movs	r3, #26
 8003416:	2218      	movs	r2, #24
 8003418:	189b      	adds	r3, r3, r2
 800341a:	19db      	adds	r3, r3, r7
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e0e0      	b.n	80035e4 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	429a      	cmp	r2, r3
 800342c:	d000      	beq.n	8003430 <UART_SetConfig+0x2b0>
 800342e:	e082      	b.n	8003536 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003430:	231b      	movs	r3, #27
 8003432:	2218      	movs	r2, #24
 8003434:	189b      	adds	r3, r3, r2
 8003436:	19db      	adds	r3, r3, r7
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b08      	cmp	r3, #8
 800343c:	d834      	bhi.n	80034a8 <UART_SetConfig+0x328>
 800343e:	009a      	lsls	r2, r3, #2
 8003440:	4b18      	ldr	r3, [pc, #96]	@ (80034a4 <UART_SetConfig+0x324>)
 8003442:	18d3      	adds	r3, r2, r3
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003448:	f7fe fd88 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 800344c:	0003      	movs	r3, r0
 800344e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003450:	e033      	b.n	80034ba <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003452:	f7fe fd99 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 8003456:	0003      	movs	r3, r0
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800345a:	e02e      	b.n	80034ba <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800345c:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <UART_SetConfig+0x318>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2210      	movs	r2, #16
 8003462:	4013      	ands	r3, r2
 8003464:	d002      	beq.n	800346c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003466:	4b0d      	ldr	r3, [pc, #52]	@ (800349c <UART_SetConfig+0x31c>)
 8003468:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800346a:	e026      	b.n	80034ba <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 800346c:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <UART_SetConfig+0x320>)
 800346e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003470:	e023      	b.n	80034ba <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003472:	f7fe fce3 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 8003476:	0003      	movs	r3, r0
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800347a:	e01e      	b.n	80034ba <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003482:	e01a      	b.n	80034ba <UART_SetConfig+0x33a>
 8003484:	efff69f3 	.word	0xefff69f3
 8003488:	ffffcfff 	.word	0xffffcfff
 800348c:	40004800 	.word	0x40004800
 8003490:	fffff4ff 	.word	0xfffff4ff
 8003494:	40004400 	.word	0x40004400
 8003498:	40021000 	.word	0x40021000
 800349c:	003d0900 	.word	0x003d0900
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	080040b4 	.word	0x080040b4
      default:
        pclk = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80034ac:	231a      	movs	r3, #26
 80034ae:	2218      	movs	r2, #24
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
        break;
 80034b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d100      	bne.n	80034c2 <UART_SetConfig+0x342>
 80034c0:	e090      	b.n	80035e4 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c4:	005a      	lsls	r2, r3, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	18d2      	adds	r2, r2, r3
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	0019      	movs	r1, r3
 80034d4:	0010      	movs	r0, r2
 80034d6:	f7fc fe17 	bl	8000108 <__udivsi3>
 80034da:	0003      	movs	r3, r0
 80034dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e0:	2b0f      	cmp	r3, #15
 80034e2:	d921      	bls.n	8003528 <UART_SetConfig+0x3a8>
 80034e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034e6:	2380      	movs	r3, #128	@ 0x80
 80034e8:	025b      	lsls	r3, r3, #9
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d21c      	bcs.n	8003528 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	200e      	movs	r0, #14
 80034f4:	2418      	movs	r4, #24
 80034f6:	1903      	adds	r3, r0, r4
 80034f8:	19db      	adds	r3, r3, r7
 80034fa:	210f      	movs	r1, #15
 80034fc:	438a      	bics	r2, r1
 80034fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	b29b      	uxth	r3, r3
 8003506:	2207      	movs	r2, #7
 8003508:	4013      	ands	r3, r2
 800350a:	b299      	uxth	r1, r3
 800350c:	1903      	adds	r3, r0, r4
 800350e:	19db      	adds	r3, r3, r7
 8003510:	1902      	adds	r2, r0, r4
 8003512:	19d2      	adds	r2, r2, r7
 8003514:	8812      	ldrh	r2, [r2, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1902      	adds	r2, r0, r4
 8003520:	19d2      	adds	r2, r2, r7
 8003522:	8812      	ldrh	r2, [r2, #0]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	e05d      	b.n	80035e4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003528:	231a      	movs	r3, #26
 800352a:	2218      	movs	r2, #24
 800352c:	189b      	adds	r3, r3, r2
 800352e:	19db      	adds	r3, r3, r7
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e056      	b.n	80035e4 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003536:	231b      	movs	r3, #27
 8003538:	2218      	movs	r2, #24
 800353a:	189b      	adds	r3, r3, r2
 800353c:	19db      	adds	r3, r3, r7
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d822      	bhi.n	800358a <UART_SetConfig+0x40a>
 8003544:	009a      	lsls	r2, r3, #2
 8003546:	4b2f      	ldr	r3, [pc, #188]	@ (8003604 <UART_SetConfig+0x484>)
 8003548:	18d3      	adds	r3, r2, r3
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354e:	f7fe fd05 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8003552:	0003      	movs	r3, r0
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003556:	e021      	b.n	800359c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003558:	f7fe fd16 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 800355c:	0003      	movs	r3, r0
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003560:	e01c      	b.n	800359c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003562:	4b29      	ldr	r3, [pc, #164]	@ (8003608 <UART_SetConfig+0x488>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2210      	movs	r2, #16
 8003568:	4013      	ands	r3, r2
 800356a:	d002      	beq.n	8003572 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800356c:	4b27      	ldr	r3, [pc, #156]	@ (800360c <UART_SetConfig+0x48c>)
 800356e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003570:	e014      	b.n	800359c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003572:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <UART_SetConfig+0x490>)
 8003574:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003576:	e011      	b.n	800359c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003578:	f7fe fc60 	bl	8001e3c <HAL_RCC_GetSysClockFreq>
 800357c:	0003      	movs	r3, r0
 800357e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003580:	e00c      	b.n	800359c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003582:	2380      	movs	r3, #128	@ 0x80
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003588:	e008      	b.n	800359c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800358e:	231a      	movs	r3, #26
 8003590:	2218      	movs	r2, #24
 8003592:	189b      	adds	r3, r3, r2
 8003594:	19db      	adds	r3, r3, r7
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
        break;
 800359a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d020      	beq.n	80035e4 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	085a      	lsrs	r2, r3, #1
 80035a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035aa:	18d2      	adds	r2, r2, r3
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	0019      	movs	r1, r3
 80035b2:	0010      	movs	r0, r2
 80035b4:	f7fc fda8 	bl	8000108 <__udivsi3>
 80035b8:	0003      	movs	r3, r0
 80035ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	d90a      	bls.n	80035d8 <UART_SetConfig+0x458>
 80035c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	025b      	lsls	r3, r3, #9
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d205      	bcs.n	80035d8 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	e005      	b.n	80035e4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80035d8:	231a      	movs	r3, #26
 80035da:	2218      	movs	r2, #24
 80035dc:	189b      	adds	r3, r3, r2
 80035de:	19db      	adds	r3, r3, r7
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2200      	movs	r2, #0
 80035e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2200      	movs	r2, #0
 80035ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035f0:	231a      	movs	r3, #26
 80035f2:	2218      	movs	r2, #24
 80035f4:	189b      	adds	r3, r3, r2
 80035f6:	19db      	adds	r3, r3, r7
 80035f8:	781b      	ldrb	r3, [r3, #0]
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b00e      	add	sp, #56	@ 0x38
 8003600:	bdb0      	pop	{r4, r5, r7, pc}
 8003602:	46c0      	nop			@ (mov r8, r8)
 8003604:	080040d8 	.word	0x080040d8
 8003608:	40021000 	.word	0x40021000
 800360c:	003d0900 	.word	0x003d0900
 8003610:	00f42400 	.word	0x00f42400

08003614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	2208      	movs	r2, #8
 8003622:	4013      	ands	r3, r2
 8003624:	d00b      	beq.n	800363e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a4a      	ldr	r2, [pc, #296]	@ (8003758 <UART_AdvFeatureConfig+0x144>)
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	2201      	movs	r2, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d00b      	beq.n	8003660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4a43      	ldr	r2, [pc, #268]	@ (800375c <UART_AdvFeatureConfig+0x148>)
 8003650:	4013      	ands	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	2202      	movs	r2, #2
 8003666:	4013      	ands	r3, r2
 8003668:	d00b      	beq.n	8003682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a3b      	ldr	r2, [pc, #236]	@ (8003760 <UART_AdvFeatureConfig+0x14c>)
 8003672:	4013      	ands	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	2204      	movs	r2, #4
 8003688:	4013      	ands	r3, r2
 800368a:	d00b      	beq.n	80036a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4a34      	ldr	r2, [pc, #208]	@ (8003764 <UART_AdvFeatureConfig+0x150>)
 8003694:	4013      	ands	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	2210      	movs	r2, #16
 80036aa:	4013      	ands	r3, r2
 80036ac:	d00b      	beq.n	80036c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003768 <UART_AdvFeatureConfig+0x154>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	0019      	movs	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	2220      	movs	r2, #32
 80036cc:	4013      	ands	r3, r2
 80036ce:	d00b      	beq.n	80036e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4a25      	ldr	r2, [pc, #148]	@ (800376c <UART_AdvFeatureConfig+0x158>)
 80036d8:	4013      	ands	r3, r2
 80036da:	0019      	movs	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	2240      	movs	r2, #64	@ 0x40
 80036ee:	4013      	ands	r3, r2
 80036f0:	d01d      	beq.n	800372e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <UART_AdvFeatureConfig+0x15c>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800370e:	2380      	movs	r3, #128	@ 0x80
 8003710:	035b      	lsls	r3, r3, #13
 8003712:	429a      	cmp	r2, r3
 8003714:	d10b      	bne.n	800372e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a15      	ldr	r2, [pc, #84]	@ (8003774 <UART_AdvFeatureConfig+0x160>)
 800371e:	4013      	ands	r3, r2
 8003720:	0019      	movs	r1, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	2280      	movs	r2, #128	@ 0x80
 8003734:	4013      	ands	r3, r2
 8003736:	d00b      	beq.n	8003750 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4a0e      	ldr	r2, [pc, #56]	@ (8003778 <UART_AdvFeatureConfig+0x164>)
 8003740:	4013      	ands	r3, r2
 8003742:	0019      	movs	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }
}
 8003750:	46c0      	nop			@ (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}
 8003758:	ffff7fff 	.word	0xffff7fff
 800375c:	fffdffff 	.word	0xfffdffff
 8003760:	fffeffff 	.word	0xfffeffff
 8003764:	fffbffff 	.word	0xfffbffff
 8003768:	ffffefff 	.word	0xffffefff
 800376c:	ffffdfff 	.word	0xffffdfff
 8003770:	ffefffff 	.word	0xffefffff
 8003774:	ff9fffff 	.word	0xff9fffff
 8003778:	fff7ffff 	.word	0xfff7ffff

0800377c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b092      	sub	sp, #72	@ 0x48
 8003780:	af02      	add	r7, sp, #8
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2284      	movs	r2, #132	@ 0x84
 8003788:	2100      	movs	r1, #0
 800378a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800378c:	f7fd fb86 	bl	8000e9c <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2208      	movs	r2, #8
 800379c:	4013      	ands	r3, r2
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d12c      	bne.n	80037fc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a4:	2280      	movs	r2, #128	@ 0x80
 80037a6:	0391      	lsls	r1, r2, #14
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4a46      	ldr	r2, [pc, #280]	@ (80038c4 <UART_CheckIdleState+0x148>)
 80037ac:	9200      	str	r2, [sp, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f000 f88c 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 80037b4:	1e03      	subs	r3, r0, #0
 80037b6:	d021      	beq.n	80037fc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b8:	f3ef 8310 	mrs	r3, PRIMASK
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037c2:	2301      	movs	r3, #1
 80037c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			@ (mov r8, r8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2180      	movs	r1, #128	@ 0x80
 80037da:	438a      	bics	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2278      	movs	r2, #120	@ 0x78
 80037f4:	2100      	movs	r1, #0
 80037f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e05f      	b.n	80038bc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2204      	movs	r2, #4
 8003804:	4013      	ands	r3, r2
 8003806:	2b04      	cmp	r3, #4
 8003808:	d146      	bne.n	8003898 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800380a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800380c:	2280      	movs	r2, #128	@ 0x80
 800380e:	03d1      	lsls	r1, r2, #15
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4a2c      	ldr	r2, [pc, #176]	@ (80038c4 <UART_CheckIdleState+0x148>)
 8003814:	9200      	str	r2, [sp, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	f000 f858 	bl	80038cc <UART_WaitOnFlagUntilTimeout>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d03b      	beq.n	8003898 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003820:	f3ef 8310 	mrs	r3, PRIMASK
 8003824:	60fb      	str	r3, [r7, #12]
  return(result);
 8003826:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003828:	637b      	str	r3, [r7, #52]	@ 0x34
 800382a:	2301      	movs	r3, #1
 800382c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f383 8810 	msr	PRIMASK, r3
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4921      	ldr	r1, [pc, #132]	@ (80038c8 <UART_CheckIdleState+0x14c>)
 8003842:	400a      	ands	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003852:	f3ef 8310 	mrs	r3, PRIMASK
 8003856:	61bb      	str	r3, [r7, #24]
  return(result);
 8003858:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	633b      	str	r3, [r7, #48]	@ 0x30
 800385c:	2301      	movs	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f383 8810 	msr	PRIMASK, r3
}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	438a      	bics	r2, r1
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2280      	movs	r2, #128	@ 0x80
 8003888:	2120      	movs	r1, #32
 800388a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2278      	movs	r2, #120	@ 0x78
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e011      	b.n	80038bc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2280      	movs	r2, #128	@ 0x80
 80038a2:	2120      	movs	r1, #32
 80038a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2278      	movs	r2, #120	@ 0x78
 80038b6:	2100      	movs	r1, #0
 80038b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b010      	add	sp, #64	@ 0x40
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	01ffffff 	.word	0x01ffffff
 80038c8:	fffffedf 	.word	0xfffffedf

080038cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	1dfb      	adds	r3, r7, #7
 80038da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038dc:	e051      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	3301      	adds	r3, #1
 80038e2:	d04e      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e4:	f7fd fada 	bl	8000e9c <HAL_GetTick>
 80038e8:	0002      	movs	r2, r0
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d302      	bcc.n	80038fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e051      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2204      	movs	r2, #4
 8003906:	4013      	ands	r3, r2
 8003908:	d03b      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb6>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b80      	cmp	r3, #128	@ 0x80
 800390e:	d038      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b40      	cmp	r3, #64	@ 0x40
 8003914:	d035      	beq.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2208      	movs	r2, #8
 800391e:	4013      	ands	r3, r2
 8003920:	2b08      	cmp	r3, #8
 8003922:	d111      	bne.n	8003948 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	0018      	movs	r0, r3
 8003930:	f000 f906 	bl	8003b40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2284      	movs	r2, #132	@ 0x84
 8003938:	2108      	movs	r1, #8
 800393a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2278      	movs	r2, #120	@ 0x78
 8003940:	2100      	movs	r1, #0
 8003942:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e02c      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	401a      	ands	r2, r3
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	429a      	cmp	r2, r3
 800395a:	d112      	bne.n	8003982 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2280      	movs	r2, #128	@ 0x80
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	0018      	movs	r0, r3
 800396a:	f000 f8e9 	bl	8003b40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2284      	movs	r2, #132	@ 0x84
 8003972:	2120      	movs	r1, #32
 8003974:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2278      	movs	r2, #120	@ 0x78
 800397a:	2100      	movs	r1, #0
 800397c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e00f      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	4013      	ands	r3, r2
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	425a      	negs	r2, r3
 8003992:	4153      	adcs	r3, r2
 8003994:	b2db      	uxtb	r3, r3
 8003996:	001a      	movs	r2, r3
 8003998:	1dfb      	adds	r3, r7, #7
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d09e      	beq.n	80038de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b004      	add	sp, #16
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b090      	sub	sp, #64	@ 0x40
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	1dbb      	adds	r3, r7, #6
 80039b8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1dba      	adds	r2, r7, #6
 80039c4:	2158      	movs	r1, #88	@ 0x58
 80039c6:	8812      	ldrh	r2, [r2, #0]
 80039c8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1dba      	adds	r2, r7, #6
 80039ce:	215a      	movs	r1, #90	@ 0x5a
 80039d0:	8812      	ldrh	r2, [r2, #0]
 80039d2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	2380      	movs	r3, #128	@ 0x80
 80039e0:	015b      	lsls	r3, r3, #5
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d10d      	bne.n	8003a02 <UART_Start_Receive_IT+0x56>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <UART_Start_Receive_IT+0x4c>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	225c      	movs	r2, #92	@ 0x5c
 80039f2:	4950      	ldr	r1, [pc, #320]	@ (8003b34 <UART_Start_Receive_IT+0x188>)
 80039f4:	5299      	strh	r1, [r3, r2]
 80039f6:	e02e      	b.n	8003a56 <UART_Start_Receive_IT+0xaa>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	225c      	movs	r2, #92	@ 0x5c
 80039fc:	21ff      	movs	r1, #255	@ 0xff
 80039fe:	5299      	strh	r1, [r3, r2]
 8003a00:	e029      	b.n	8003a56 <UART_Start_Receive_IT+0xaa>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <UART_Start_Receive_IT+0x7a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <UART_Start_Receive_IT+0x70>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	225c      	movs	r2, #92	@ 0x5c
 8003a16:	21ff      	movs	r1, #255	@ 0xff
 8003a18:	5299      	strh	r1, [r3, r2]
 8003a1a:	e01c      	b.n	8003a56 <UART_Start_Receive_IT+0xaa>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	225c      	movs	r2, #92	@ 0x5c
 8003a20:	217f      	movs	r1, #127	@ 0x7f
 8003a22:	5299      	strh	r1, [r3, r2]
 8003a24:	e017      	b.n	8003a56 <UART_Start_Receive_IT+0xaa>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	2380      	movs	r3, #128	@ 0x80
 8003a2c:	055b      	lsls	r3, r3, #21
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d10d      	bne.n	8003a4e <UART_Start_Receive_IT+0xa2>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <UART_Start_Receive_IT+0x98>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	225c      	movs	r2, #92	@ 0x5c
 8003a3e:	217f      	movs	r1, #127	@ 0x7f
 8003a40:	5299      	strh	r1, [r3, r2]
 8003a42:	e008      	b.n	8003a56 <UART_Start_Receive_IT+0xaa>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	225c      	movs	r2, #92	@ 0x5c
 8003a48:	213f      	movs	r1, #63	@ 0x3f
 8003a4a:	5299      	strh	r1, [r3, r2]
 8003a4c:	e003      	b.n	8003a56 <UART_Start_Receive_IT+0xaa>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	225c      	movs	r2, #92	@ 0x5c
 8003a52:	2100      	movs	r1, #0
 8003a54:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2284      	movs	r2, #132	@ 0x84
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2280      	movs	r2, #128	@ 0x80
 8003a62:	2122      	movs	r1, #34	@ 0x22
 8003a64:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a66:	f3ef 8310 	mrs	r3, PRIMASK
 8003a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a70:	2301      	movs	r3, #1
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	f383 8810 	msr	PRIMASK, r3
}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2101      	movs	r1, #1
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a92:	f383 8810 	msr	PRIMASK, r3
}
 8003a96:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	015b      	lsls	r3, r3, #5
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d107      	bne.n	8003ab4 <UART_Start_Receive_IT+0x108>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a22      	ldr	r2, [pc, #136]	@ (8003b38 <UART_Start_Receive_IT+0x18c>)
 8003ab0:	669a      	str	r2, [r3, #104]	@ 0x68
 8003ab2:	e002      	b.n	8003aba <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a21      	ldr	r2, [pc, #132]	@ (8003b3c <UART_Start_Receive_IT+0x190>)
 8003ab8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d019      	beq.n	8003af6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac6:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003acc:	2301      	movs	r3, #1
 8003ace:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2190      	movs	r1, #144	@ 0x90
 8003ae4:	0049      	lsls	r1, r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	e018      	b.n	8003b28 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af6:	f3ef 8310 	mrs	r3, PRIMASK
 8003afa:	613b      	str	r3, [r7, #16]
  return(result);
 8003afc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b00:	2301      	movs	r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f383 8810 	msr	PRIMASK, r3
}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2120      	movs	r1, #32
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f383 8810 	msr	PRIMASK, r3
}
 8003b26:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b010      	add	sp, #64	@ 0x40
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	000001ff 	.word	0x000001ff
 8003b38:	08003e49 	.word	0x08003e49
 8003b3c:	08003c85 	.word	0x08003c85

08003b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08e      	sub	sp, #56	@ 0x38
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b48:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b52:	2301      	movs	r3, #1
 8003b54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4926      	ldr	r1, [pc, #152]	@ (8003c04 <UART_EndRxTransfer+0xc4>)
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7e:	623b      	str	r3, [r7, #32]
  return(result);
 8003b80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b84:	2301      	movs	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	f383 8810 	msr	PRIMASK, r3
}
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba6:	f383 8810 	msr	PRIMASK, r3
}
 8003baa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d118      	bne.n	8003be6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			@ (mov r8, r8)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2110      	movs	r1, #16
 8003bd6:	438a      	bics	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2280      	movs	r2, #128	@ 0x80
 8003bea:	2120      	movs	r1, #32
 8003bec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b00e      	add	sp, #56	@ 0x38
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	fffffedf 	.word	0xfffffedf

08003c08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	225a      	movs	r2, #90	@ 0x5a
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7ff fa99 	bl	8003158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b004      	add	sp, #16
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c36:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	2301      	movs	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f383 8810 	msr	PRIMASK, r3
}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2140      	movs	r1, #64	@ 0x40
 8003c58:	438a      	bics	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f383 8810 	msr	PRIMASK, r3
}
 8003c66:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff fa66 	bl	8003148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b006      	add	sp, #24
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b094      	sub	sp, #80	@ 0x50
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003c8c:	204e      	movs	r0, #78	@ 0x4e
 8003c8e:	183b      	adds	r3, r7, r0
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	215c      	movs	r1, #92	@ 0x5c
 8003c94:	5a52      	ldrh	r2, [r2, r1]
 8003c96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2280      	movs	r2, #128	@ 0x80
 8003c9c:	589b      	ldr	r3, [r3, r2]
 8003c9e:	2b22      	cmp	r3, #34	@ 0x22
 8003ca0:	d000      	beq.n	8003ca4 <UART_RxISR_8BIT+0x20>
 8003ca2:	e0bf      	b.n	8003e24 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003caa:	214c      	movs	r1, #76	@ 0x4c
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	183b      	adds	r3, r7, r0
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b2d9      	uxtb	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	225a      	movs	r2, #90	@ 0x5a
 8003cd4:	5a9b      	ldrh	r3, [r3, r2]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b299      	uxth	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	225a      	movs	r2, #90	@ 0x5a
 8003ce0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	225a      	movs	r2, #90	@ 0x5a
 8003ce6:	5a9b      	ldrh	r3, [r3, r2]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d000      	beq.n	8003cf0 <UART_RxISR_8BIT+0x6c>
 8003cee:	e0a1      	b.n	8003e34 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d00:	f383 8810 	msr	PRIMASK, r3
}
 8003d04:	46c0      	nop			@ (mov r8, r8)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	494a      	ldr	r1, [pc, #296]	@ (8003e3c <UART_RxISR_8BIT+0x1b8>)
 8003d12:	400a      	ands	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1c:	f383 8810 	msr	PRIMASK, r3
}
 8003d20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d22:	f3ef 8310 	mrs	r3, PRIMASK
 8003d26:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d32:	f383 8810 	msr	PRIMASK, r3
}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2101      	movs	r1, #1
 8003d44:	438a      	bics	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4e:	f383 8810 	msr	PRIMASK, r3
}
 8003d52:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2280      	movs	r2, #128	@ 0x80
 8003d58:	2120      	movs	r1, #32
 8003d5a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a34      	ldr	r2, [pc, #208]	@ (8003e40 <UART_RxISR_8BIT+0x1bc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01f      	beq.n	8003db2 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	2380      	movs	r3, #128	@ 0x80
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d018      	beq.n	8003db2 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d80:	f3ef 8310 	mrs	r3, PRIMASK
 8003d84:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d86:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d88:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f383 8810 	msr	PRIMASK, r3
}
 8003d94:	46c0      	nop			@ (mov r8, r8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4928      	ldr	r1, [pc, #160]	@ (8003e44 <UART_RxISR_8BIT+0x1c0>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d12f      	bne.n	8003e1a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dc6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dca:	2301      	movs	r3, #1
 8003dcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2110      	movs	r1, #16
 8003de2:	438a      	bics	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f383 8810 	msr	PRIMASK, r3
}
 8003df0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2210      	movs	r2, #16
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d103      	bne.n	8003e08 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2210      	movs	r2, #16
 8003e06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2258      	movs	r2, #88	@ 0x58
 8003e0c:	5a9a      	ldrh	r2, [r3, r2]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	0011      	movs	r1, r2
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff f9a8 	bl	8003168 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e18:	e00c      	b.n	8003e34 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7fc ff3d 	bl	8000c9c <HAL_UART_RxCpltCallback>
}
 8003e22:	e007      	b.n	8003e34 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2108      	movs	r1, #8
 8003e30:	430a      	orrs	r2, r1
 8003e32:	619a      	str	r2, [r3, #24]
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b014      	add	sp, #80	@ 0x50
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	fffffedf 	.word	0xfffffedf
 8003e40:	40004800 	.word	0x40004800
 8003e44:	fbffffff 	.word	0xfbffffff

08003e48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b094      	sub	sp, #80	@ 0x50
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e50:	204e      	movs	r0, #78	@ 0x4e
 8003e52:	183b      	adds	r3, r7, r0
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	215c      	movs	r1, #92	@ 0x5c
 8003e58:	5a52      	ldrh	r2, [r2, r1]
 8003e5a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2280      	movs	r2, #128	@ 0x80
 8003e60:	589b      	ldr	r3, [r3, r2]
 8003e62:	2b22      	cmp	r3, #34	@ 0x22
 8003e64:	d000      	beq.n	8003e68 <UART_RxISR_16BIT+0x20>
 8003e66:	e0bf      	b.n	8003fe8 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e6e:	214c      	movs	r1, #76	@ 0x4c
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e78:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	183a      	adds	r2, r7, r0
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	4013      	ands	r3, r2
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	1c9a      	adds	r2, r3, #2
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	225a      	movs	r2, #90	@ 0x5a
 8003e98:	5a9b      	ldrh	r3, [r3, r2]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b299      	uxth	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	225a      	movs	r2, #90	@ 0x5a
 8003ea4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	225a      	movs	r2, #90	@ 0x5a
 8003eaa:	5a9b      	ldrh	r3, [r3, r2]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d000      	beq.n	8003eb4 <UART_RxISR_16BIT+0x6c>
 8003eb2:	e0a1      	b.n	8003ff8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb8:	623b      	str	r3, [r7, #32]
  return(result);
 8003eba:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			@ (mov r8, r8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	494a      	ldr	r1, [pc, #296]	@ (8004000 <UART_RxISR_16BIT+0x1b8>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	438a      	bics	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f12:	f383 8810 	msr	PRIMASK, r3
}
 8003f16:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2280      	movs	r2, #128	@ 0x80
 8003f1c:	2120      	movs	r1, #32
 8003f1e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a34      	ldr	r2, [pc, #208]	@ (8004004 <UART_RxISR_16BIT+0x1bc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01f      	beq.n	8003f76 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	2380      	movs	r3, #128	@ 0x80
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	4013      	ands	r3, r2
 8003f42:	d018      	beq.n	8003f76 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f44:	f3ef 8310 	mrs	r3, PRIMASK
 8003f48:	617b      	str	r3, [r7, #20]
  return(result);
 8003f4a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f4e:	2301      	movs	r3, #1
 8003f50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4928      	ldr	r1, [pc, #160]	@ (8004008 <UART_RxISR_16BIT+0x1c0>)
 8003f66:	400a      	ands	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d12f      	bne.n	8003fde <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f84:	f3ef 8310 	mrs	r3, PRIMASK
 8003f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f8a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f8e:	2301      	movs	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f383 8810 	msr	PRIMASK, r3
}
 8003f98:	46c0      	nop			@ (mov r8, r8)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2110      	movs	r1, #16
 8003fa6:	438a      	bics	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f383 8810 	msr	PRIMASK, r3
}
 8003fb4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d103      	bne.n	8003fcc <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2210      	movs	r2, #16
 8003fca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2258      	movs	r2, #88	@ 0x58
 8003fd0:	5a9a      	ldrh	r2, [r3, r2]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0011      	movs	r1, r2
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7ff f8c6 	bl	8003168 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fdc:	e00c      	b.n	8003ff8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7fc fe5b 	bl	8000c9c <HAL_UART_RxCpltCallback>
}
 8003fe6:	e007      	b.n	8003ff8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2108      	movs	r1, #8
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	619a      	str	r2, [r3, #24]
}
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b014      	add	sp, #80	@ 0x50
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	fffffedf 	.word	0xfffffedf
 8004004:	40004800 	.word	0x40004800
 8004008:	fbffffff 	.word	0xfbffffff

0800400c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004014:	46c0      	nop			@ (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	b002      	add	sp, #8
 800401a:	bd80      	pop	{r7, pc}

0800401c <memset>:
 800401c:	0003      	movs	r3, r0
 800401e:	1882      	adds	r2, r0, r2
 8004020:	4293      	cmp	r3, r2
 8004022:	d100      	bne.n	8004026 <memset+0xa>
 8004024:	4770      	bx	lr
 8004026:	7019      	strb	r1, [r3, #0]
 8004028:	3301      	adds	r3, #1
 800402a:	e7f9      	b.n	8004020 <memset+0x4>

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	2600      	movs	r6, #0
 8004030:	4c0c      	ldr	r4, [pc, #48]	@ (8004064 <__libc_init_array+0x38>)
 8004032:	4d0d      	ldr	r5, [pc, #52]	@ (8004068 <__libc_init_array+0x3c>)
 8004034:	1b64      	subs	r4, r4, r5
 8004036:	10a4      	asrs	r4, r4, #2
 8004038:	42a6      	cmp	r6, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	2600      	movs	r6, #0
 800403e:	f000 f819 	bl	8004074 <_init>
 8004042:	4c0a      	ldr	r4, [pc, #40]	@ (800406c <__libc_init_array+0x40>)
 8004044:	4d0a      	ldr	r5, [pc, #40]	@ (8004070 <__libc_init_array+0x44>)
 8004046:	1b64      	subs	r4, r4, r5
 8004048:	10a4      	asrs	r4, r4, #2
 800404a:	42a6      	cmp	r6, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	00b3      	lsls	r3, r6, #2
 8004052:	58eb      	ldr	r3, [r5, r3]
 8004054:	4798      	blx	r3
 8004056:	3601      	adds	r6, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	00b3      	lsls	r3, r6, #2
 800405c:	58eb      	ldr	r3, [r5, r3]
 800405e:	4798      	blx	r3
 8004060:	3601      	adds	r6, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	08004104 	.word	0x08004104
 8004068:	08004104 	.word	0x08004104
 800406c:	08004108 	.word	0x08004108
 8004070:	08004104 	.word	0x08004104

08004074 <_init>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407a:	bc08      	pop	{r3}
 800407c:	469e      	mov	lr, r3
 800407e:	4770      	bx	lr

08004080 <_fini>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr

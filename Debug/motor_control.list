
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800485c  0800485c  0000585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a28  08004a28  000060ac  2**0
                  CONTENTS
  4 .ARM          00000008  08004a28  08004a28  00005a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a30  08004a30  000060ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00005a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a34  08004a34  00005a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08004a38  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200000ac  08004ae4  000060ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004ae4  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f009  00000000  00000000  000060d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f0  00000000  00000000  000150dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  000176d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000949  00000000  00000000  000182e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000116d2  00000000  00000000  00018c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f144  00000000  00000000  0002a303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069d08  00000000  00000000  00039447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a314f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a1c  00000000  00000000  000a3194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a5bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000ac 	.word	0x200000ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004844 	.word	0x08004844

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b0 	.word	0x200000b0
 8000104:	08004844 	.word	0x08004844

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	@ (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <hb>:
};




uint8_t hb(uint16_t val) { return (uint8_t)((val >> 8) & 0xFF); }
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	0002      	movs	r2, r0
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	801a      	strh	r2, [r3, #0]
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	b29b      	uxth	r3, r3
 8000634:	b2db      	uxtb	r3, r3
 8000636:	0018      	movs	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	b002      	add	sp, #8
 800063c:	bd80      	pop	{r7, pc}

0800063e <lb>:
uint8_t lb(uint16_t val) { return (uint8_t)(val & 0xFF); }
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	0002      	movs	r2, r0
 8000646:	1dbb      	adds	r3, r7, #6
 8000648:	801a      	strh	r2, [r3, #0]
 800064a:	1dbb      	adds	r3, r7, #6
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	0018      	movs	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}

08000658 <transmit_error>:


void transmit_error(uint8_t error) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0
 800065e:	0002      	movs	r2, r0
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	701a      	strb	r2, [r3, #0]
	uint8_t response[50];
	uint8_t response_len;

	response[0] = error;
 8000664:	210c      	movs	r1, #12
 8000666:	187b      	adds	r3, r7, r1
 8000668:	1dfa      	adds	r2, r7, #7
 800066a:	7812      	ldrb	r2, [r2, #0]
 800066c:	701a      	strb	r2, [r3, #0]
	response_len = 1;
 800066e:	203f      	movs	r0, #63	@ 0x3f
 8000670:	183b      	adds	r3, r7, r0
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, response, response_len, 100);
 8000676:	183b      	adds	r3, r7, r0
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b29a      	uxth	r2, r3
 800067c:	1879      	adds	r1, r7, r1
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <transmit_error+0x38>)
 8000680:	2364      	movs	r3, #100	@ 0x64
 8000682:	f002 fd4b 	bl	800311c <HAL_UART_Transmit>
	return;
 8000686:	46c0      	nop			@ (mov r8, r8)
}
 8000688:	46bd      	mov	sp, r7
 800068a:	b010      	add	sp, #64	@ 0x40
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	20000148 	.word	0x20000148

08000694 <motors_busy>:

uint8_t motors_busy() {
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	return azm_motor_state.motor_count | elv_motor_state.motor_count;
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <motors_busy+0x1c>)
 800069a:	885b      	ldrh	r3, [r3, #2]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <motors_busy+0x20>)
 80006a0:	885b      	ldrh	r3, [r3, #2]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000050 	.word	0x20000050

080006b8 <good_step_value>:

uint8_t good_step_value(uint16_t step_val) {
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b089      	sub	sp, #36	@ 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	0002      	movs	r2, r0
 80006c0:	1dbb      	adds	r3, r7, #6
 80006c2:	801a      	strh	r2, [r3, #0]
	uint16_t good_step_values[] = {200, 400, 800, 1600, 3200, 6400};
 80006c4:	230c      	movs	r3, #12
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <good_step_value+0x60>)
 80006ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006cc:	c313      	stmia	r3!, {r0, r1, r4}
	uint8_t result = 0;
 80006ce:	231f      	movs	r3, #31
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(good_step_values)/sizeof(uint16_t); i++) {
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	e013      	b.n	8000704 <good_step_value+0x4c>
		result = step_val == good_step_values[i] ? 1 : result;
 80006dc:	230c      	movs	r3, #12
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	5ad3      	ldrh	r3, [r2, r3]
 80006e6:	1dba      	adds	r2, r7, #6
 80006e8:	8812      	ldrh	r2, [r2, #0]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d003      	beq.n	80006f6 <good_step_value+0x3e>
 80006ee:	231f      	movs	r3, #31
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	781a      	ldrb	r2, [r3, #0]
 80006f4:	e000      	b.n	80006f8 <good_step_value+0x40>
 80006f6:	2201      	movs	r2, #1
 80006f8:	231f      	movs	r3, #31
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(good_step_values)/sizeof(uint16_t); i++) {
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	3301      	adds	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	2b05      	cmp	r3, #5
 8000708:	d9e8      	bls.n	80006dc <good_step_value+0x24>
	}
	return result;
 800070a:	231f      	movs	r3, #31
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	781b      	ldrb	r3, [r3, #0]
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	b009      	add	sp, #36	@ 0x24
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	0800485c 	.word	0x0800485c

0800071c <ParseCommand>:

void ParseCommand(uint8_t *message, uint8_t length) {
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b093      	sub	sp, #76	@ 0x4c
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	000a      	movs	r2, r1
 8000726:	1cfb      	adds	r3, r7, #3
 8000728:	701a      	strb	r2, [r3, #0]
	uint8_t status = message[0];
 800072a:	2346      	movs	r3, #70	@ 0x46
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	701a      	strb	r2, [r3, #0]
	uint8_t version = message[1];
 8000734:	2145      	movs	r1, #69	@ 0x45
 8000736:	187b      	adds	r3, r7, r1
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	7852      	ldrb	r2, [r2, #1]
 800073c:	701a      	strb	r2, [r3, #0]
	uint8_t msg_length = message[2];
 800073e:	2044      	movs	r0, #68	@ 0x44
 8000740:	183b      	adds	r3, r7, r0
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	7892      	ldrb	r2, [r2, #2]
 8000746:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2, uart_buf, uart_buf_len, 100);




	if (version != 0 || length - MSG_HEADER_SIZE != msg_length) {
 8000748:	187b      	adds	r3, r7, r1
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d106      	bne.n	800075e <ParseCommand+0x42>
 8000750:	1cfb      	adds	r3, r7, #3
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	1eda      	subs	r2, r3, #3
 8000756:	183b      	adds	r3, r7, r0
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d003      	beq.n	8000766 <ParseCommand+0x4a>
		transmit_error(BAD_REQUEST);
 800075e:	2040      	movs	r0, #64	@ 0x40
 8000760:	f7ff ff7a 	bl	8000658 <transmit_error>
		return;
 8000764:	e1d0      	b.n	8000b08 <ParseCommand+0x3ec>
	}

	// respond if busy except in special cases
	switch (status) {
 8000766:	2346      	movs	r3, #70	@ 0x46
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b53      	cmp	r3, #83	@ 0x53
 800076e:	dc11      	bgt.n	8000794 <ParseCommand+0x78>
 8000770:	2b41      	cmp	r3, #65	@ 0x41
 8000772:	da04      	bge.n	800077e <ParseCommand+0x62>
 8000774:	2b10      	cmp	r3, #16
 8000776:	d022      	beq.n	80007be <ParseCommand+0xa2>
 8000778:	2b20      	cmp	r3, #32
 800077a:	d020      	beq.n	80007be <ParseCommand+0xa2>
 800077c:	e00a      	b.n	8000794 <ParseCommand+0x78>
 800077e:	3b41      	subs	r3, #65	@ 0x41
 8000780:	4ad3      	ldr	r2, [pc, #844]	@ (8000ad0 <ParseCommand+0x3b4>)
 8000782:	40da      	lsrs	r2, r3
 8000784:	0013      	movs	r3, r2
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	4193      	sbcs	r3, r2
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d114      	bne.n	80007be <ParseCommand+0xa2>
		case GET_ELV_TOOTH:
		case GET_AZM_STEP:
		case GET_ELV_STEP:
			break;
		default:
			if (motors_busy()) {
 8000794:	f7ff ff7e 	bl	8000694 <motors_busy>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d012      	beq.n	80007c2 <ParseCommand+0xa6>
				response[0] = BUSY;
 800079c:	210c      	movs	r1, #12
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2230      	movs	r2, #48	@ 0x30
 80007a2:	701a      	strb	r2, [r3, #0]
				response_len = 1;
 80007a4:	2047      	movs	r0, #71	@ 0x47
 80007a6:	183b      	adds	r3, r7, r0
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, response, response_len, 100);
 80007ac:	183b      	adds	r3, r7, r0
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	1879      	adds	r1, r7, r1
 80007b4:	48c7      	ldr	r0, [pc, #796]	@ (8000ad4 <ParseCommand+0x3b8>)
 80007b6:	2364      	movs	r3, #100	@ 0x64
 80007b8:	f002 fcb0 	bl	800311c <HAL_UART_Transmit>
				return;
 80007bc:	e1a4      	b.n	8000b08 <ParseCommand+0x3ec>
			break;
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	e000      	b.n	80007c4 <ParseCommand+0xa8>
			}
			break;
 80007c2:	46c0      	nop			@ (mov r8, r8)
	}


	switch (status) {
 80007c4:	2346      	movs	r3, #70	@ 0x46
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b53      	cmp	r3, #83	@ 0x53
 80007cc:	d900      	bls.n	80007d0 <ParseCommand+0xb4>
 80007ce:	e189      	b.n	8000ae4 <ParseCommand+0x3c8>
 80007d0:	009a      	lsls	r2, r3, #2
 80007d2:	4bc1      	ldr	r3, [pc, #772]	@ (8000ad8 <ParseCommand+0x3bc>)
 80007d4:	18d3      	adds	r3, r2, r3
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	469f      	mov	pc, r3
		case READY:
			response[0] = OK;
 80007da:	230c      	movs	r3, #12
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	2220      	movs	r2, #32
 80007e0:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 80007e2:	2347      	movs	r3, #71	@ 0x47
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
			break;
 80007ea:	e183      	b.n	8000af4 <ParseCommand+0x3d8>
		case CALIBRATE:
			azm_motor_state.motor_position = 0;
 80007ec:	4bbb      	ldr	r3, [pc, #748]	@ (8000adc <ParseCommand+0x3c0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
			elv_motor_state.motor_position = 0;
 80007f2:	4bbb      	ldr	r3, [pc, #748]	@ (8000ae0 <ParseCommand+0x3c4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
			response[0] = OK;
 80007f8:	230c      	movs	r3, #12
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	2220      	movs	r2, #32
 80007fe:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 8000800:	2347      	movs	r3, #71	@ 0x47
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
			break;
 8000808:	e174      	b.n	8000af4 <ParseCommand+0x3d8>
		case GET_POSITION:
			response[0] = OK_PAYLOAD;
 800080a:	240c      	movs	r4, #12
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2210      	movs	r2, #16
 8000810:	701a      	strb	r2, [r3, #0]
			response[1] = hb(azm_motor_state.motor_position);
 8000812:	4bb2      	ldr	r3, [pc, #712]	@ (8000adc <ParseCommand+0x3c0>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	b29b      	uxth	r3, r3
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff ff01 	bl	8000620 <hb>
 800081e:	0003      	movs	r3, r0
 8000820:	001a      	movs	r2, r3
 8000822:	193b      	adds	r3, r7, r4
 8000824:	705a      	strb	r2, [r3, #1]
			response[2] = lb(azm_motor_state.motor_position);
 8000826:	4bad      	ldr	r3, [pc, #692]	@ (8000adc <ParseCommand+0x3c0>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	b29b      	uxth	r3, r3
 800082c:	0018      	movs	r0, r3
 800082e:	f7ff ff06 	bl	800063e <lb>
 8000832:	0003      	movs	r3, r0
 8000834:	001a      	movs	r2, r3
 8000836:	193b      	adds	r3, r7, r4
 8000838:	709a      	strb	r2, [r3, #2]
			response[3] = hb(elv_motor_state.motor_position);
 800083a:	4ba9      	ldr	r3, [pc, #676]	@ (8000ae0 <ParseCommand+0x3c4>)
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	b29b      	uxth	r3, r3
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff feed 	bl	8000620 <hb>
 8000846:	0003      	movs	r3, r0
 8000848:	001a      	movs	r2, r3
 800084a:	193b      	adds	r3, r7, r4
 800084c:	70da      	strb	r2, [r3, #3]
			response[4] = lb(elv_motor_state.motor_position);
 800084e:	4ba4      	ldr	r3, [pc, #656]	@ (8000ae0 <ParseCommand+0x3c4>)
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	b29b      	uxth	r3, r3
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff fef2 	bl	800063e <lb>
 800085a:	0003      	movs	r3, r0
 800085c:	001a      	movs	r2, r3
 800085e:	193b      	adds	r3, r7, r4
 8000860:	711a      	strb	r2, [r3, #4]
			response_len = 5;
 8000862:	2347      	movs	r3, #71	@ 0x47
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	2205      	movs	r2, #5
 8000868:	701a      	strb	r2, [r3, #0]
			break;
 800086a:	e143      	b.n	8000af4 <ParseCommand+0x3d8>
		case MOVE_AZM_BY:
			move_motor_by((int16_t)((message[3] << 8) | message[4]), &azm_motor_state);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3303      	adds	r3, #3
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b21a      	sxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3304      	adds	r3, #4
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21b      	sxth	r3, r3
 8000882:	4a96      	ldr	r2, [pc, #600]	@ (8000adc <ParseCommand+0x3c0>)
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fb7c 	bl	8000f84 <move_motor_by>
			response[0] = OK;
 800088c:	230c      	movs	r3, #12
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	2220      	movs	r2, #32
 8000892:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 8000894:	2347      	movs	r3, #71	@ 0x47
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
			break;
 800089c:	e12a      	b.n	8000af4 <ParseCommand+0x3d8>
		case MOVE_ELV_BY:
			move_motor_by((int16_t)((message[3] << 8) | message[4]), &elv_motor_state);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3303      	adds	r3, #3
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3304      	adds	r3, #4
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4a8a      	ldr	r2, [pc, #552]	@ (8000ae0 <ParseCommand+0x3c4>)
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fb63 	bl	8000f84 <move_motor_by>
			response[0] = OK;
 80008be:	230c      	movs	r3, #12
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	2220      	movs	r2, #32
 80008c4:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 80008c6:	2347      	movs	r3, #71	@ 0x47
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
			break;
 80008ce:	e111      	b.n	8000af4 <ParseCommand+0x3d8>
		case GET_SPEED: // TODO: FINISH
			response[0] = OK_PAYLOAD;
 80008d0:	230c      	movs	r3, #12
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	2210      	movs	r2, #16
 80008d6:	701a      	strb	r2, [r3, #0]
			break;
 80008d8:	e10c      	b.n	8000af4 <ParseCommand+0x3d8>
		case GET_AZM_TOOTH:
			response[0] = OK_PAYLOAD;
 80008da:	240c      	movs	r4, #12
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2210      	movs	r2, #16
 80008e0:	701a      	strb	r2, [r3, #0]
			response[1] = hb(azm_motor_state.tooth_ratio);
 80008e2:	4b7e      	ldr	r3, [pc, #504]	@ (8000adc <ParseCommand+0x3c0>)
 80008e4:	891b      	ldrh	r3, [r3, #8]
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fe9a 	bl	8000620 <hb>
 80008ec:	0003      	movs	r3, r0
 80008ee:	001a      	movs	r2, r3
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	705a      	strb	r2, [r3, #1]
			response[2] = lb(azm_motor_state.tooth_ratio);
 80008f4:	4b79      	ldr	r3, [pc, #484]	@ (8000adc <ParseCommand+0x3c0>)
 80008f6:	891b      	ldrh	r3, [r3, #8]
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fea0 	bl	800063e <lb>
 80008fe:	0003      	movs	r3, r0
 8000900:	001a      	movs	r2, r3
 8000902:	193b      	adds	r3, r7, r4
 8000904:	709a      	strb	r2, [r3, #2]
			response_len = 3;
 8000906:	2347      	movs	r3, #71	@ 0x47
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	2203      	movs	r2, #3
 800090c:	701a      	strb	r2, [r3, #0]
			break;
 800090e:	e0f1      	b.n	8000af4 <ParseCommand+0x3d8>
		case SET_AZM_TOOTH:
			tooth_ratio = (uint16_t)((message[3] << 8) | message[4]);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3303      	adds	r3, #3
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	b21a      	sxth	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3304      	adds	r3, #4
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	2140      	movs	r1, #64	@ 0x40
 8000928:	187b      	adds	r3, r7, r1
 800092a:	801a      	strh	r2, [r3, #0]
			azm_motor_state.tooth_ratio = tooth_ratio;
 800092c:	4b6b      	ldr	r3, [pc, #428]	@ (8000adc <ParseCommand+0x3c0>)
 800092e:	187a      	adds	r2, r7, r1
 8000930:	8812      	ldrh	r2, [r2, #0]
 8000932:	811a      	strh	r2, [r3, #8]
			response[0] = OK;
 8000934:	230c      	movs	r3, #12
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	2220      	movs	r2, #32
 800093a:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 800093c:	2347      	movs	r3, #71	@ 0x47
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
			break;
 8000944:	e0d6      	b.n	8000af4 <ParseCommand+0x3d8>
		case GET_ELV_TOOTH:
			response[0] = OK_PAYLOAD;
 8000946:	240c      	movs	r4, #12
 8000948:	193b      	adds	r3, r7, r4
 800094a:	2210      	movs	r2, #16
 800094c:	701a      	strb	r2, [r3, #0]
			response[1] = hb(elv_motor_state.tooth_ratio);
 800094e:	4b64      	ldr	r3, [pc, #400]	@ (8000ae0 <ParseCommand+0x3c4>)
 8000950:	891b      	ldrh	r3, [r3, #8]
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff fe64 	bl	8000620 <hb>
 8000958:	0003      	movs	r3, r0
 800095a:	001a      	movs	r2, r3
 800095c:	193b      	adds	r3, r7, r4
 800095e:	705a      	strb	r2, [r3, #1]
			response[2] = lb(elv_motor_state.tooth_ratio);
 8000960:	4b5f      	ldr	r3, [pc, #380]	@ (8000ae0 <ParseCommand+0x3c4>)
 8000962:	891b      	ldrh	r3, [r3, #8]
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff fe6a 	bl	800063e <lb>
 800096a:	0003      	movs	r3, r0
 800096c:	001a      	movs	r2, r3
 800096e:	193b      	adds	r3, r7, r4
 8000970:	709a      	strb	r2, [r3, #2]
			response_len = 3;
 8000972:	2347      	movs	r3, #71	@ 0x47
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	2203      	movs	r2, #3
 8000978:	701a      	strb	r2, [r3, #0]
			break;
 800097a:	e0bb      	b.n	8000af4 <ParseCommand+0x3d8>
		case SET_ELV_TOOTH:
			tooth_ratio = (uint16_t)((message[3] << 8) | message[4]);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3303      	adds	r3, #3
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	b21a      	sxth	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3304      	adds	r3, #4
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b21b      	sxth	r3, r3
 800098e:	4313      	orrs	r3, r2
 8000990:	b21a      	sxth	r2, r3
 8000992:	2140      	movs	r1, #64	@ 0x40
 8000994:	187b      	adds	r3, r7, r1
 8000996:	801a      	strh	r2, [r3, #0]
			elv_motor_state.tooth_ratio = tooth_ratio;
 8000998:	4b51      	ldr	r3, [pc, #324]	@ (8000ae0 <ParseCommand+0x3c4>)
 800099a:	187a      	adds	r2, r7, r1
 800099c:	8812      	ldrh	r2, [r2, #0]
 800099e:	811a      	strh	r2, [r3, #8]
			response[0] = OK;
 80009a0:	230c      	movs	r3, #12
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	2220      	movs	r2, #32
 80009a6:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 80009a8:	2347      	movs	r3, #71	@ 0x47
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
			break;
 80009b0:	e0a0      	b.n	8000af4 <ParseCommand+0x3d8>
		case GET_AZM_STEP:
			response[0] = OK_PAYLOAD;
 80009b2:	240c      	movs	r4, #12
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2210      	movs	r2, #16
 80009b8:	701a      	strb	r2, [r3, #0]
			response[1] = hb(azm_motor_state.motor_pulse_rev);
 80009ba:	4b48      	ldr	r3, [pc, #288]	@ (8000adc <ParseCommand+0x3c0>)
 80009bc:	88db      	ldrh	r3, [r3, #6]
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fe2e 	bl	8000620 <hb>
 80009c4:	0003      	movs	r3, r0
 80009c6:	001a      	movs	r2, r3
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	705a      	strb	r2, [r3, #1]
			response[2] = lb(elv_motor_state.motor_pulse_rev);
 80009cc:	4b44      	ldr	r3, [pc, #272]	@ (8000ae0 <ParseCommand+0x3c4>)
 80009ce:	88db      	ldrh	r3, [r3, #6]
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fe34 	bl	800063e <lb>
 80009d6:	0003      	movs	r3, r0
 80009d8:	001a      	movs	r2, r3
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	709a      	strb	r2, [r3, #2]
			response_len = 3;
 80009de:	2347      	movs	r3, #71	@ 0x47
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	2203      	movs	r2, #3
 80009e4:	701a      	strb	r2, [r3, #0]
			break;
 80009e6:	e085      	b.n	8000af4 <ParseCommand+0x3d8>
		case SET_AZM_STEP:
			motor_pulse_rev = (uint16_t)((message[3] << 8) | message[4]);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3303      	adds	r3, #3
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	b21a      	sxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3304      	adds	r3, #4
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	2142      	movs	r1, #66	@ 0x42
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	801a      	strh	r2, [r3, #0]
			if (!good_step_value(motor_pulse_rev)) {
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff fe55 	bl	80006b8 <good_step_value>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d103      	bne.n	8000a1a <ParseCommand+0x2fe>
				transmit_error(BAD_STEP_VAL);
 8000a12:	2041      	movs	r0, #65	@ 0x41
 8000a14:	f7ff fe20 	bl	8000658 <transmit_error>
				return;
 8000a18:	e076      	b.n	8000b08 <ParseCommand+0x3ec>
			}
			azm_motor_state.motor_pulse_rev = motor_pulse_rev;
 8000a1a:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <ParseCommand+0x3c0>)
 8000a1c:	2242      	movs	r2, #66	@ 0x42
 8000a1e:	18ba      	adds	r2, r7, r2
 8000a20:	8812      	ldrh	r2, [r2, #0]
 8000a22:	80da      	strh	r2, [r3, #6]
			response[0] = OK;
 8000a24:	230c      	movs	r3, #12
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	2220      	movs	r2, #32
 8000a2a:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 8000a2c:	2347      	movs	r3, #71	@ 0x47
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
			break;
 8000a34:	e05e      	b.n	8000af4 <ParseCommand+0x3d8>
		case GET_ELV_STEP:
			response[0] = OK_PAYLOAD;
 8000a36:	240c      	movs	r4, #12
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2210      	movs	r2, #16
 8000a3c:	701a      	strb	r2, [r3, #0]
			response[1] = hb(elv_motor_state.motor_pulse_rev);
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <ParseCommand+0x3c4>)
 8000a40:	88db      	ldrh	r3, [r3, #6]
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fdec 	bl	8000620 <hb>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	705a      	strb	r2, [r3, #1]
			response[2] = lb(elv_motor_state.motor_pulse_rev);
 8000a50:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <ParseCommand+0x3c4>)
 8000a52:	88db      	ldrh	r3, [r3, #6]
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fdf2 	bl	800063e <lb>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	709a      	strb	r2, [r3, #2]
			response_len = 3;
 8000a62:	2347      	movs	r3, #71	@ 0x47
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	2203      	movs	r2, #3
 8000a68:	701a      	strb	r2, [r3, #0]
			break;
 8000a6a:	e043      	b.n	8000af4 <ParseCommand+0x3d8>
		case SET_ELV_STEP:
			motor_pulse_rev = (uint16_t)((message[3] << 8) | message[4]);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3303      	adds	r3, #3
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	2142      	movs	r1, #66	@ 0x42
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	801a      	strh	r2, [r3, #0]
			if (!good_step_value(motor_pulse_rev)) {
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff fe13 	bl	80006b8 <good_step_value>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d103      	bne.n	8000a9e <ParseCommand+0x382>
				transmit_error(BAD_STEP_VAL);
 8000a96:	2041      	movs	r0, #65	@ 0x41
 8000a98:	f7ff fdde 	bl	8000658 <transmit_error>
				return;
 8000a9c:	e034      	b.n	8000b08 <ParseCommand+0x3ec>
			}
			elv_motor_state.motor_pulse_rev = motor_pulse_rev;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <ParseCommand+0x3c4>)
 8000aa0:	2242      	movs	r2, #66	@ 0x42
 8000aa2:	18ba      	adds	r2, r7, r2
 8000aa4:	8812      	ldrh	r2, [r2, #0]
 8000aa6:	80da      	strh	r2, [r3, #6]
			response[0] = OK;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	2220      	movs	r2, #32
 8000aae:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 8000ab0:	2347      	movs	r3, #71	@ 0x47
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
			break;
 8000ab8:	e01c      	b.n	8000af4 <ParseCommand+0x3d8>
		case DANCE:
			dance();
 8000aba:	f000 fa5d 	bl	8000f78 <dance>
			response[0] = OK;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 8000ac6:	2347      	movs	r3, #71	@ 0x47
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]
			break;
 8000ace:	e011      	b.n	8000af4 <ParseCommand+0x3d8>
 8000ad0:	00050005 	.word	0x00050005
 8000ad4:	20000148 	.word	0x20000148
 8000ad8:	0800486c 	.word	0x0800486c
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000050 	.word	0x20000050
		default:
			response[0] = BAD_REQUEST;
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	2240      	movs	r2, #64	@ 0x40
 8000aea:	701a      	strb	r2, [r3, #0]
			response_len = 1;
 8000aec:	2347      	movs	r3, #71	@ 0x47
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart2, response, response_len, 100);
 8000af4:	2347      	movs	r3, #71	@ 0x47
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	230c      	movs	r3, #12
 8000afe:	18f9      	adds	r1, r7, r3
 8000b00:	4803      	ldr	r0, [pc, #12]	@ (8000b10 <ParseCommand+0x3f4>)
 8000b02:	2364      	movs	r3, #100	@ 0x64
 8000b04:	f002 fb0a 	bl	800311c <HAL_UART_Transmit>
}
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b013      	add	sp, #76	@ 0x4c
 8000b0c:	bd90      	pop	{r4, r7, pc}
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	20000148 	.word	0x20000148

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b18:	f000 fc98 	bl	800144c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1c:	f000 f816 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b20:	f000 f962 	bl	8000de8 <MX_GPIO_Init>
  MX_TIM21_Init();
 8000b24:	f000 f884 	bl	8000c30 <MX_TIM21_Init>
  MX_TIM22_Init();
 8000b28:	f000 f8d8 	bl	8000cdc <MX_TIM22_Init>
  MX_USART2_UART_Init();
 8000b2c:	f000 f92c 	bl	8000d88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)"00", 2, 100);
 8000b30:	4904      	ldr	r1, [pc, #16]	@ (8000b44 <main+0x30>)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <main+0x34>)
 8000b34:	2364      	movs	r3, #100	@ 0x64
 8000b36:	2202      	movs	r2, #2
 8000b38:	f002 faf0 	bl	800311c <HAL_UART_Transmit>
  UART_StartReceiving();
 8000b3c:	f000 fbd8 	bl	80012f0 <UART_StartReceiving>
  // HAL_TIM_Base_Start_IT(&htim21);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	e7fd      	b.n	8000b40 <main+0x2c>
 8000b44:	08004868 	.word	0x08004868
 8000b48:	20000148 	.word	0x20000148

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b099      	sub	sp, #100	@ 0x64
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	242c      	movs	r4, #44	@ 0x2c
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	0018      	movs	r0, r3
 8000b58:	2334      	movs	r3, #52	@ 0x34
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f003 fe45 	bl	80047ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b62:	2318      	movs	r3, #24
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	0018      	movs	r0, r3
 8000b68:	2314      	movs	r3, #20
 8000b6a:	001a      	movs	r2, r3
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f003 fe3d 	bl	80047ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b72:	003b      	movs	r3, r7
 8000b74:	0018      	movs	r0, r3
 8000b76:	2318      	movs	r3, #24
 8000b78:	001a      	movs	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f003 fe36 	bl	80047ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemClock_Config+0xdc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a29      	ldr	r2, [pc, #164]	@ (8000c2c <SystemClock_Config+0xe0>)
 8000b86:	401a      	ands	r2, r3
 8000b88:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <SystemClock_Config+0xdc>)
 8000b8a:	2180      	movs	r1, #128	@ 0x80
 8000b8c:	0109      	lsls	r1, r1, #4
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b92:	0021      	movs	r1, r4
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2202      	movs	r2, #2
 8000b98:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2210      	movs	r2, #16
 8000ba4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2202      	movs	r2, #2
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	0412      	lsls	r2, r2, #16
 8000bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 ffec 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bcc:	f000 f97a 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	2118      	movs	r1, #24
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	220f      	movs	r2, #15
 8000bd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f001 fb4f 	bl	8002298 <HAL_RCC_ClockConfig>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bfe:	f000 f961 	bl	8000ec4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c02:	003b      	movs	r3, r7
 8000c04:	2202      	movs	r2, #2
 8000c06:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c08:	003b      	movs	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0e:	003b      	movs	r3, r7
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fd45 	bl	80026a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c1a:	f000 f953 	bl	8000ec4 <Error_Handler>
  }
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b019      	add	sp, #100	@ 0x64
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	40007000 	.word	0x40007000
 8000c2c:	ffffe7ff 	.word	0xffffe7ff

08000c30 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	2308      	movs	r3, #8
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	001a      	movs	r2, r3
 8000c40:	2100      	movs	r1, #0
 8000c42:	f003 fdd3 	bl	80047ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	003b      	movs	r3, r7
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f003 fdcc 	bl	80047ec <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_TIM21_Init+0xa0>)
 8000c56:	4a1f      	ldr	r2, [pc, #124]	@ (8000cd4 <MX_TIM21_Init+0xa4>)
 8000c58:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 9;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_TIM21_Init+0xa0>)
 8000c5c:	2209      	movs	r2, #9
 8000c5e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_TIM21_Init+0xa0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 2500;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_TIM21_Init+0xa0>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <MX_TIM21_Init+0xa8>)
 8000c6a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_TIM21_Init+0xa0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_TIM21_Init+0xa0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_TIM21_Init+0xa0>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fe3c 	bl	80028f8 <HAL_TIM_Base_Init>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000c84:	f000 f91e 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	2108      	movs	r1, #8
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	0152      	lsls	r2, r2, #5
 8000c90:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000c92:	187a      	adds	r2, r7, r1
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_TIM21_Init+0xa0>)
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 ffab 	bl	8002bf4 <HAL_TIM_ConfigClockSource>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8000ca2:	f000 f90f 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca6:	003b      	movs	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	003b      	movs	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000cb2:	003a      	movs	r2, r7
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_TIM21_Init+0xa0>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f002 f983 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000cc2:	f000 f8ff 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b006      	add	sp, #24
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	200000c8 	.word	0x200000c8
 8000cd4:	40010800 	.word	0x40010800
 8000cd8:	000009c4 	.word	0x000009c4

08000cdc <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2310      	movs	r3, #16
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	f003 fd7d 	bl	80047ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f003 fd76 	bl	80047ec <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <MX_TIM22_Init+0xa0>)
 8000d02:	4a1f      	ldr	r2, [pc, #124]	@ (8000d80 <MX_TIM22_Init+0xa4>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_TIM22_Init+0xa0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_TIM22_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_TIM22_Init+0xa0>)
 8000d14:	4a1b      	ldr	r2, [pc, #108]	@ (8000d84 <MX_TIM22_Init+0xa8>)
 8000d16:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_TIM22_Init+0xa0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_TIM22_Init+0xa0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_TIM22_Init+0xa0>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 fde6 	bl	80028f8 <HAL_TIM_Base_Init>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 8000d30:	f000 f8c8 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d34:	2108      	movs	r1, #8
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	0152      	lsls	r2, r2, #5
 8000d3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000d3e:	187a      	adds	r2, r7, r1
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_TIM22_Init+0xa0>)
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 ff55 	bl	8002bf4 <HAL_TIM_ConfigClockSource>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM22_Init+0x76>
  {
    Error_Handler();
 8000d4e:	f000 f8b9 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	003b      	movs	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000d5e:	003a      	movs	r2, r7
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_TIM22_Init+0xa0>)
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f002 f92d 	bl	8002fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8000d6e:	f000 f8a9 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b006      	add	sp, #24
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	20000108 	.word	0x20000108
 8000d80:	40011400 	.word	0x40011400
 8000d84:	0000ffff 	.word	0x0000ffff

08000d88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d8e:	4a15      	ldr	r2, [pc, #84]	@ (8000de4 <MX_USART2_UART_Init+0x5c>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d92:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d94:	22e1      	movs	r2, #225	@ 0xe1
 8000d96:	0252      	lsls	r2, r2, #9
 8000d98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dca:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <MX_USART2_UART_Init+0x58>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f002 f951 	bl	8003074 <HAL_UART_Init>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dd6:	f000 f875 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000148 	.word	0x20000148
 8000de4:	40004400 	.word	0x40004400

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b089      	sub	sp, #36	@ 0x24
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	240c      	movs	r4, #12
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	0018      	movs	r0, r3
 8000df4:	2314      	movs	r3, #20
 8000df6:	001a      	movs	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f003 fcf7 	bl	80047ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000ebc <MX_GPIO_Init+0xd4>)
 8000e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e02:	4b2e      	ldr	r3, [pc, #184]	@ (8000ebc <MX_GPIO_Init+0xd4>)
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	430a      	orrs	r2, r1
 8000e08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ebc <MX_GPIO_Init+0xd4>)
 8000e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b29      	ldr	r3, [pc, #164]	@ (8000ebc <MX_GPIO_Init+0xd4>)
 8000e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e1a:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <MX_GPIO_Init+0xd4>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <MX_GPIO_Init+0xd4>)
 8000e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <MX_GPIO_Init+0xd4>)
 8000e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e32:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <MX_GPIO_Init+0xd4>)
 8000e34:	2102      	movs	r1, #2
 8000e36:	430a      	orrs	r2, r1
 8000e38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e3a:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <MX_GPIO_Init+0xd4>)
 8000e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4013      	ands	r3, r2
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e46:	2387      	movs	r3, #135	@ 0x87
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	481d      	ldr	r0, [pc, #116]	@ (8000ec0 <MX_GPIO_Init+0xd8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	0019      	movs	r1, r3
 8000e50:	f000 fe6d 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e54:	23a0      	movs	r3, #160	@ 0xa0
 8000e56:	00d9      	lsls	r1, r3, #3
 8000e58:	23a0      	movs	r3, #160	@ 0xa0
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fe65 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2287      	movs	r2, #135	@ 0x87
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2211      	movs	r2, #17
 8000e70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <MX_GPIO_Init+0xd8>)
 8000e82:	0019      	movs	r1, r3
 8000e84:	0010      	movs	r0, r2
 8000e86:	f000 fcb7 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000e8a:	0021      	movs	r1, r4
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	22a0      	movs	r2, #160	@ 0xa0
 8000e90:	00d2      	lsls	r2, r2, #3
 8000e92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2211      	movs	r2, #17
 8000e98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	187a      	adds	r2, r7, r1
 8000ea8:	23a0      	movs	r3, #160	@ 0xa0
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 fca2 	bl	80017f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b009      	add	sp, #36	@ 0x24
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	50000400 	.word	0x50000400

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	e7fd      	b.n	8000ecc <Error_Handler+0x8>

08000ed0 <start_motor_movement>:

extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim21;
extern TIM_HandleTypeDef htim22;

void start_motor_movement(MotorState *motor_state) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	// set the direction pin
	if (motor_state->motor_direction == 0) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	791b      	ldrb	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d116      	bne.n	8000f0e <start_motor_movement+0x3e>
		if (motor_state == &azm_motor_state) {
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <start_motor_movement+0x94>)
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d107      	bne.n	8000ef8 <start_motor_movement+0x28>
			HAL_GPIO_WritePin(AZM_DIR_PORT, AZM_DIR_PIN, GPIO_PIN_RESET);
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	481e      	ldr	r0, [pc, #120]	@ (8000f68 <start_motor_movement+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	f000 fe1c 	bl	8001b2e <HAL_GPIO_WritePin>
 8000ef6:	e020      	b.n	8000f3a <start_motor_movement+0x6a>
		} else if (motor_state == &elv_motor_state) {
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <start_motor_movement+0x9c>)
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d11c      	bne.n	8000f3a <start_motor_movement+0x6a>
			HAL_GPIO_WritePin(ELV_DIR_PORT, ELV_DIR_PIN, GPIO_PIN_RESET);
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <start_motor_movement+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	2108      	movs	r1, #8
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fe11 	bl	8001b2e <HAL_GPIO_WritePin>
 8000f0c:	e015      	b.n	8000f3a <start_motor_movement+0x6a>
		}
	} else {
		if (motor_state == &azm_motor_state) {
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <start_motor_movement+0x94>)
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d107      	bne.n	8000f26 <start_motor_movement+0x56>
			HAL_GPIO_WritePin(AZM_DIR_PORT, AZM_DIR_PIN, GPIO_PIN_SET);
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4813      	ldr	r0, [pc, #76]	@ (8000f68 <start_motor_movement+0x98>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	0019      	movs	r1, r3
 8000f20:	f000 fe05 	bl	8001b2e <HAL_GPIO_WritePin>
 8000f24:	e009      	b.n	8000f3a <start_motor_movement+0x6a>
		} else if (motor_state == &elv_motor_state) {
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <start_motor_movement+0x9c>)
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d105      	bne.n	8000f3a <start_motor_movement+0x6a>
			HAL_GPIO_WritePin(ELV_DIR_PORT, ELV_DIR_PIN, GPIO_PIN_SET);
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <start_motor_movement+0x98>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	2108      	movs	r1, #8
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fdfa 	bl	8001b2e <HAL_GPIO_WritePin>
		}
	}

	// start the timer
	if (motor_state == &azm_motor_state) {
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <start_motor_movement+0x94>)
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d104      	bne.n	8000f4c <start_motor_movement+0x7c>
		HAL_TIM_Base_Start_IT(&htim21);
 8000f42:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <start_motor_movement+0xa0>)
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 fd17 	bl	8002978 <HAL_TIM_Base_Start_IT>
	} else if (motor_state == &elv_motor_state) {
		HAL_TIM_Base_Start_IT(&htim22);
	}
}
 8000f4a:	e007      	b.n	8000f5c <start_motor_movement+0x8c>
	} else if (motor_state == &elv_motor_state) {
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <start_motor_movement+0x9c>)
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d103      	bne.n	8000f5c <start_motor_movement+0x8c>
		HAL_TIM_Base_Start_IT(&htim22);
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <start_motor_movement+0xa4>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f001 fd0e 	bl	8002978 <HAL_TIM_Base_Start_IT>
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	50000400 	.word	0x50000400
 8000f6c:	20000050 	.word	0x20000050
 8000f70:	200000c8 	.word	0x200000c8
 8000f74:	20000108 	.word	0x20000108

08000f78 <dance>:

void dance() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <move_motor_by>:

uint8_t move_motor_by(int16_t degrees, MotorState *motor_state) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	1dbb      	adds	r3, r7, #6
 8000f90:	801a      	strh	r2, [r3, #0]
	int16_t l_degrees = degrees;
 8000f92:	210e      	movs	r1, #14
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	1dba      	adds	r2, r7, #6
 8000f98:	8812      	ldrh	r2, [r2, #0]
 8000f9a:	801a      	strh	r2, [r3, #0]
	if (l_degrees < 0) {
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	5e9b      	ldrsh	r3, [r3, r2]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	da09      	bge.n	8000fba <move_motor_by+0x36>
		l_degrees *= -1;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	425b      	negs	r3, r3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	801a      	strh	r2, [r3, #0]
		motor_state->motor_direction = 1;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	711a      	strb	r2, [r3, #4]
 8000fb8:	e002      	b.n	8000fc0 <move_motor_by+0x3c>
	} else {
		motor_state->motor_direction = 0;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	711a      	strb	r2, [r3, #4]
	}

	uint32_t count_calc = l_degrees * motor_state->tooth_ratio;
 8000fc0:	230e      	movs	r3, #14
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	5e9b      	ldrsh	r3, [r3, r2]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	8912      	ldrh	r2, [r2, #8]
 8000fcc:	4353      	muls	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
	count_calc /= 360;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	22b4      	movs	r2, #180	@ 0xb4
 8000fd4:	0051      	lsls	r1, r2, #1
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f7ff f896 	bl	8000108 <__udivsi3>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	60bb      	str	r3, [r7, #8]
	count_calc *= motor_state->motor_pulse_rev;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	88db      	ldrh	r3, [r3, #6]
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	4353      	muls	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
	count_calc /= 100000;
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4909      	ldr	r1, [pc, #36]	@ (8001014 <move_motor_by+0x90>)
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff f889 	bl	8000108 <__udivsi3>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	60bb      	str	r3, [r7, #8]
	motor_state->motor_count = count_calc;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	805a      	strh	r2, [r3, #2]

	start_motor_movement(motor_state);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff ff63 	bl	8000ed0 <start_motor_movement>
	return 0;
 800100a:	2300      	movs	r3, #0
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}
 8001014:	000186a0 	.word	0x000186a0

08001018 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	// AZIMUTH TIMER
	if (htim == &htim21) {
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001024:	429a      	cmp	r2, r3
 8001026:	d13d      	bne.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
		HAL_GPIO_TogglePin(AZM_PUL_PORT, AZM_PUL_PIN);
 8001028:	2380      	movs	r3, #128	@ 0x80
 800102a:	005a      	lsls	r2, r3, #1
 800102c:	23a0      	movs	r3, #160	@ 0xa0
 800102e:	05db      	lsls	r3, r3, #23
 8001030:	0011      	movs	r1, r2
 8001032:	0018      	movs	r0, r3
 8001034:	f000 fd98 	bl	8001b68 <HAL_GPIO_TogglePin>

		// only update counts if it is set high
		if (HAL_GPIO_ReadPin(AZM_PUL_PORT, AZM_PUL_PIN)) {
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	005a      	lsls	r2, r3, #1
 800103c:	23a0      	movs	r3, #160	@ 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fd56 	bl	8001af4 <HAL_GPIO_ReadPin>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d02b      	beq.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
			// update the position
			if (azm_motor_state.motor_direction == 0) {
 800104c:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10d      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x58>
				azm_motor_state.motor_position += 6400 / azm_motor_state.motor_pulse_rev;
 8001054:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001056:	68dc      	ldr	r4, [r3, #12]
 8001058:	4b33      	ldr	r3, [pc, #204]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800105a:	88db      	ldrh	r3, [r3, #6]
 800105c:	0019      	movs	r1, r3
 800105e:	23c8      	movs	r3, #200	@ 0xc8
 8001060:	0158      	lsls	r0, r3, #5
 8001062:	f7ff f8db 	bl	800021c <__divsi3>
 8001066:	0003      	movs	r3, r0
 8001068:	18e2      	adds	r2, r4, r3
 800106a:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	e00b      	b.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x70>
			} else {
				azm_motor_state.motor_position -= 6400 / azm_motor_state.motor_pulse_rev;
 8001070:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001072:	68dc      	ldr	r4, [r3, #12]
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001076:	88db      	ldrh	r3, [r3, #6]
 8001078:	0019      	movs	r1, r3
 800107a:	482c      	ldr	r0, [pc, #176]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800107c:	f7ff f8ce 	bl	800021c <__divsi3>
 8001080:	0003      	movs	r3, r0
 8001082:	18e2      	adds	r2, r4, r3
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001086:	60da      	str	r2, [r3, #12]
			}

			azm_motor_state.motor_count--;
 8001088:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800108a:	885b      	ldrh	r3, [r3, #2]
 800108c:	3b01      	subs	r3, #1
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001092:	805a      	strh	r2, [r3, #2]
			// stop if it has reached the number of iterations.
			if (azm_motor_state.motor_count == 0) {
 8001094:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001096:	885b      	ldrh	r3, [r3, #2]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d103      	bne.n	80010a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
				HAL_TIM_Base_Stop_IT(&htim21);
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f001 fcb6 	bl	8002a10 <HAL_TIM_Base_Stop_IT>
			}
		}
	}

	// ELEVATION TIMER
	if (htim == &htim22) {
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d137      	bne.n	800111c <HAL_TIM_PeriodElapsedCallback+0x104>
		HAL_GPIO_TogglePin(ELV_PUL_PORT, ELV_PUL_PIN);
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80010ae:	2120      	movs	r1, #32
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 fd59 	bl	8001b68 <HAL_GPIO_TogglePin>

		if (HAL_GPIO_ReadPin(ELV_PUL_PORT, ELV_PUL_PIN)) {
 80010b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80010b8:	2120      	movs	r1, #32
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fd1a 	bl	8001af4 <HAL_GPIO_ReadPin>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d02b      	beq.n	800111c <HAL_TIM_PeriodElapsedCallback+0x104>
			// update the position
			if (elv_motor_state.motor_direction == 0) {
 80010c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010c6:	791b      	ldrb	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10d      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0xd0>
				elv_motor_state.motor_position += 6400 / elv_motor_state.motor_pulse_rev;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010ce:	68dc      	ldr	r4, [r3, #12]
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010d2:	88db      	ldrh	r3, [r3, #6]
 80010d4:	0019      	movs	r1, r3
 80010d6:	23c8      	movs	r3, #200	@ 0xc8
 80010d8:	0158      	lsls	r0, r3, #5
 80010da:	f7ff f89f 	bl	800021c <__divsi3>
 80010de:	0003      	movs	r3, r0
 80010e0:	18e2      	adds	r2, r4, r3
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	e00b      	b.n	8001100 <HAL_TIM_PeriodElapsedCallback+0xe8>
			} else {
				elv_motor_state.motor_position -= 6400 / elv_motor_state.motor_pulse_rev;
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010ea:	68dc      	ldr	r4, [r3, #12]
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010ee:	88db      	ldrh	r3, [r3, #6]
 80010f0:	0019      	movs	r1, r3
 80010f2:	480e      	ldr	r0, [pc, #56]	@ (800112c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80010f4:	f7ff f892 	bl	800021c <__divsi3>
 80010f8:	0003      	movs	r3, r0
 80010fa:	18e2      	adds	r2, r4, r3
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010fe:	60da      	str	r2, [r3, #12]
			}

			elv_motor_state.motor_count--;
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001102:	885b      	ldrh	r3, [r3, #2]
 8001104:	3b01      	subs	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800110a:	805a      	strh	r2, [r3, #2]
			// stop if it has reach the number of iterations
			if (elv_motor_state.motor_count == 0) {
 800110c:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800110e:	885b      	ldrh	r3, [r3, #2]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d103      	bne.n	800111c <HAL_TIM_PeriodElapsedCallback+0x104>
				HAL_TIM_Base_Stop_IT(&htim22);
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001116:	0018      	movs	r0, r3
 8001118:	f001 fc7a 	bl	8002a10 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b003      	add	sp, #12
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	200000c8 	.word	0x200000c8
 8001128:	20000000 	.word	0x20000000
 800112c:	ffffe700 	.word	0xffffe700
 8001130:	20000108 	.word	0x20000108
 8001134:	50000400 	.word	0x50000400
 8001138:	20000050 	.word	0x20000050

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <HAL_MspInit+0x24>)
 8001142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_MspInit+0x24>)
 8001146:	2101      	movs	r1, #1
 8001148:	430a      	orrs	r2, r1
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <HAL_MspInit+0x24>)
 800114e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <HAL_MspInit+0x24>)
 8001152:	2180      	movs	r1, #128	@ 0x80
 8001154:	0549      	lsls	r1, r1, #21
 8001156:	430a      	orrs	r2, r1
 8001158:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40021000 	.word	0x40021000

08001164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a14      	ldr	r2, [pc, #80]	@ (80011c4 <HAL_TIM_Base_MspInit+0x60>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10e      	bne.n	8001194 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_TIM_Base_MspInit+0x64>)
 8001178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <HAL_TIM_Base_MspInit+0x64>)
 800117c:	2104      	movs	r1, #4
 800117e:	430a      	orrs	r2, r1
 8001180:	635a      	str	r2, [r3, #52]	@ 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 1, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2101      	movs	r1, #1
 8001186:	2014      	movs	r0, #20
 8001188:	f000 fa7c 	bl	8001684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800118c:	2014      	movs	r0, #20
 800118e:	f000 fa8e 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8001192:	e012      	b.n	80011ba <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM22)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0c      	ldr	r2, [pc, #48]	@ (80011cc <HAL_TIM_Base_MspInit+0x68>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10d      	bne.n	80011ba <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM22_CLK_ENABLE();
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_TIM_Base_MspInit+0x64>)
 80011a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <HAL_TIM_Base_MspInit+0x64>)
 80011a4:	2120      	movs	r1, #32
 80011a6:	430a      	orrs	r2, r1
 80011a8:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 1, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2101      	movs	r1, #1
 80011ae:	2016      	movs	r0, #22
 80011b0:	f000 fa68 	bl	8001684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80011b4:	2016      	movs	r0, #22
 80011b6:	f000 fa7a 	bl	80016ae <HAL_NVIC_EnableIRQ>
}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40011400 	.word	0x40011400

080011d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	240c      	movs	r4, #12
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	0018      	movs	r0, r3
 80011de:	2314      	movs	r3, #20
 80011e0:	001a      	movs	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	f003 fb02 	bl	80047ec <memset>
  if(huart->Instance==USART2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <HAL_UART_MspInit+0x90>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d131      	bne.n	8001256 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <HAL_UART_MspInit+0x94>)
 80011f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <HAL_UART_MspInit+0x94>)
 80011f8:	2180      	movs	r1, #128	@ 0x80
 80011fa:	0289      	lsls	r1, r1, #10
 80011fc:	430a      	orrs	r2, r1
 80011fe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_UART_MspInit+0x94>)
 8001202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_UART_MspInit+0x94>)
 8001206:	2101      	movs	r1, #1
 8001208:	430a      	orrs	r2, r1
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_UART_MspInit+0x94>)
 800120e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001210:	2201      	movs	r2, #1
 8001212:	4013      	ands	r3, r2
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001218:	0021      	movs	r1, r4
 800121a:	187b      	adds	r3, r7, r1
 800121c:	220c      	movs	r2, #12
 800121e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	187b      	adds	r3, r7, r1
 8001222:	2202      	movs	r2, #2
 8001224:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	187b      	adds	r3, r7, r1
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2203      	movs	r2, #3
 8001230:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2204      	movs	r2, #4
 8001236:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	187a      	adds	r2, r7, r1
 800123a:	23a0      	movs	r3, #160	@ 0xa0
 800123c:	05db      	lsls	r3, r3, #23
 800123e:	0011      	movs	r1, r2
 8001240:	0018      	movs	r0, r3
 8001242:	f000 fad9 	bl	80017f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201c      	movs	r0, #28
 800124c:	f000 fa1a 	bl	8001684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001250:	201c      	movs	r0, #28
 8001252:	f000 fa2c 	bl	80016ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b009      	add	sp, #36	@ 0x24
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	40004400 	.word	0x40004400
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001290:	f000 f930 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <TIM21_IRQHandler+0x14>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f001 fbda 	bl	8002a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	200000c8 	.word	0x200000c8

080012b4 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <TIM22_IRQHandler+0x14>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f001 fbce 	bl	8002a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	20000108 	.word	0x20000108

080012cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <USART2_IRQHandler+0x14>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f002 f820 	bl	8003318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	20000148 	.word	0x20000148

080012e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <UART_StartReceiving>:

UART_State_t uart_state = STATE_IDLE;
uint8_t rx_buffer[MAX_MSG_SIZE];
uint8_t msg_length = 0;

void UART_StartReceiving(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	uart_state = STATE_IDLE;
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <UART_StartReceiving+0x1c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, rx_buffer, MSG_HEADER_SIZE);
 80012fa:	4905      	ldr	r1, [pc, #20]	@ (8001310 <UART_StartReceiving+0x20>)
 80012fc:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <UART_StartReceiving+0x24>)
 80012fe:	2203      	movs	r2, #3
 8001300:	0018      	movs	r0, r3
 8001302:	f001 ffab 	bl	800325c <HAL_UART_Receive_IT>
}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200001d0 	.word	0x200001d0
 8001310:	200001d4 	.word	0x200001d4
 8001314:	20000148 	.word	0x20000148

08001318 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if (huart->Instance != USART2) return;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a22      	ldr	r2, [pc, #136]	@ (80013b0 <HAL_UART_RxCpltCallback+0x98>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d13e      	bne.n	80013a8 <HAL_UART_RxCpltCallback+0x90>

	switch (uart_state) {
 800132a:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <HAL_UART_RxCpltCallback+0x9c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <HAL_UART_RxCpltCallback+0x20>
 8001332:	2b02      	cmp	r3, #2
 8001334:	d026      	beq.n	8001384 <HAL_UART_RxCpltCallback+0x6c>
 8001336:	e034      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x8a>
		case STATE_IDLE:
			msg_length = rx_buffer[2];
 8001338:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <HAL_UART_RxCpltCallback+0xa0>)
 800133a:	789a      	ldrb	r2, [r3, #2]
 800133c:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <HAL_UART_RxCpltCallback+0xa4>)
 800133e:	701a      	strb	r2, [r3, #0]
			if (msg_length > MAX_MSG_SIZE - MSG_HEADER_SIZE) {
 8001340:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <HAL_UART_RxCpltCallback+0xa4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2bfd      	cmp	r3, #253	@ 0xfd
 8001346:	d905      	bls.n	8001354 <HAL_UART_RxCpltCallback+0x3c>
				msg_length = 0;
 8001348:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <HAL_UART_RxCpltCallback+0xa4>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
				UART_StartReceiving();
 800134e:	f7ff ffcf 	bl	80012f0 <UART_StartReceiving>
				return;
 8001352:	e02a      	b.n	80013aa <HAL_UART_RxCpltCallback+0x92>
			}
			if (msg_length == 0U) {
 8001354:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <HAL_UART_RxCpltCallback+0xa4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d107      	bne.n	800136c <HAL_UART_RxCpltCallback+0x54>
				ParseCommand(rx_buffer, MSG_HEADER_SIZE);
 800135c:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <HAL_UART_RxCpltCallback+0xa0>)
 800135e:	2103      	movs	r1, #3
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff f9db 	bl	800071c <ParseCommand>
				UART_StartReceiving();
 8001366:	f7ff ffc3 	bl	80012f0 <UART_StartReceiving>
				break;
 800136a:	e01e      	b.n	80013aa <HAL_UART_RxCpltCallback+0x92>
			}
			uart_state = STATE_PROCESS;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_UART_RxCpltCallback+0x9c>)
 800136e:	2202      	movs	r2, #2
 8001370:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, rx_buffer + MSG_HEADER_SIZE, msg_length);
 8001372:	4913      	ldr	r1, [pc, #76]	@ (80013c0 <HAL_UART_RxCpltCallback+0xa8>)
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_UART_RxCpltCallback+0xa4>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	001a      	movs	r2, r3
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_UART_RxCpltCallback+0xac>)
 800137c:	0018      	movs	r0, r3
 800137e:	f001 ff6d 	bl	800325c <HAL_UART_Receive_IT>
			break;
 8001382:	e012      	b.n	80013aa <HAL_UART_RxCpltCallback+0x92>
		case STATE_PROCESS:
			uart_state = STATE_IDLE;
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_UART_RxCpltCallback+0x9c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
			ParseCommand(rx_buffer, MSG_HEADER_SIZE + msg_length);
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <HAL_UART_RxCpltCallback+0xa4>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	3303      	adds	r3, #3
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_UART_RxCpltCallback+0xa0>)
 8001394:	0011      	movs	r1, r2
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff f9c0 	bl	800071c <ParseCommand>
			UART_StartReceiving();
 800139c:	f7ff ffa8 	bl	80012f0 <UART_StartReceiving>
			break;
 80013a0:	e003      	b.n	80013aa <HAL_UART_RxCpltCallback+0x92>
		default:
			UART_StartReceiving();
 80013a2:	f7ff ffa5 	bl	80012f0 <UART_StartReceiving>
			break;
 80013a6:	e000      	b.n	80013aa <HAL_UART_RxCpltCallback+0x92>
	if (huart->Instance != USART2) return;
 80013a8:	46c0      	nop			@ (mov r8, r8)
	}
}
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40004400 	.word	0x40004400
 80013b4:	200001d0 	.word	0x200001d0
 80013b8:	200001d4 	.word	0x200001d4
 80013bc:	200002d4 	.word	0x200002d4
 80013c0:	200001d7 	.word	0x200001d7
 80013c4:	20000148 	.word	0x20000148

080013c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80013c8:	4813      	ldr	r0, [pc, #76]	@ (8001418 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80013ca:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013cc:	f7ff ff8a 	bl	80012e4 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80013d0:	4812      	ldr	r0, [pc, #72]	@ (800141c <LoopForever+0x6>)
    LDR R1, [R0]
 80013d2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80013d4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <LoopForever+0xa>)
    CMP R1, R2
 80013d8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80013da:	d105      	bne.n	80013e8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80013dc:	4811      	ldr	r0, [pc, #68]	@ (8001424 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80013de:	4912      	ldr	r1, [pc, #72]	@ (8001428 <LoopForever+0x12>)
    STR R1, [R0]
 80013e0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80013e2:	4812      	ldr	r0, [pc, #72]	@ (800142c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80013e4:	4912      	ldr	r1, [pc, #72]	@ (8001430 <LoopForever+0x1a>)
    STR R1, [R0]
 80013e6:	6001      	str	r1, [r0, #0]

080013e8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	4812      	ldr	r0, [pc, #72]	@ (8001434 <LoopForever+0x1e>)
  ldr r1, =_edata
 80013ea:	4913      	ldr	r1, [pc, #76]	@ (8001438 <LoopForever+0x22>)
  ldr r2, =_sidata
 80013ec:	4a13      	ldr	r2, [pc, #76]	@ (800143c <LoopForever+0x26>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a10      	ldr	r2, [pc, #64]	@ (8001440 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001400:	4c10      	ldr	r4, [pc, #64]	@ (8001444 <LoopForever+0x2e>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f003 f9f5 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff fb7f 	bl	8000b14 <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
   ldr   r0, =_estack
 8001418:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 800141c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001420:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001424:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001428:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800142c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001430:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800143c:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 8001440:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001444:	200002dc 	.word	0x200002dc

08001448 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC1_IRQHandler>
	...

0800144c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001458:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <HAL_Init+0x3c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <HAL_Init+0x3c>)
 800145e:	2140      	movs	r1, #64	@ 0x40
 8001460:	430a      	orrs	r2, r1
 8001462:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001464:	2003      	movs	r0, #3
 8001466:	f000 f811 	bl	800148c <HAL_InitTick>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d003      	beq.n	8001476 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	e001      	b.n	800147a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001476:	f7ff fe61 	bl	800113c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
}
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	40022000 	.word	0x40022000

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <HAL_InitTick+0x5c>)
 8001496:	681c      	ldr	r4, [r3, #0]
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <HAL_InitTick+0x60>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	0019      	movs	r1, r3
 800149e:	23fa      	movs	r3, #250	@ 0xfa
 80014a0:	0098      	lsls	r0, r3, #2
 80014a2:	f7fe fe31 	bl	8000108 <__udivsi3>
 80014a6:	0003      	movs	r3, r0
 80014a8:	0019      	movs	r1, r3
 80014aa:	0020      	movs	r0, r4
 80014ac:	f7fe fe2c 	bl	8000108 <__udivsi3>
 80014b0:	0003      	movs	r3, r0
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 f90b 	bl	80016ce <HAL_SYSTICK_Config>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e00f      	b.n	80014e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d80b      	bhi.n	80014de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	2301      	movs	r3, #1
 80014ca:	425b      	negs	r3, r3
 80014cc:	2200      	movs	r2, #0
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 f8d8 	bl	8001684 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_InitTick+0x64>)
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b003      	add	sp, #12
 80014e6:	bd90      	pop	{r4, r7, pc}
 80014e8:	200000a0 	.word	0x200000a0
 80014ec:	200000a8 	.word	0x200000a8
 80014f0:	200000a4 	.word	0x200000a4

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <HAL_IncTick+0x1c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	001a      	movs	r2, r3
 80014fe:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <HAL_IncTick+0x20>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	18d2      	adds	r2, r2, r3
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <HAL_IncTick+0x20>)
 8001506:	601a      	str	r2, [r3, #0]
}
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	200000a8 	.word	0x200000a8
 8001514:	200002d8 	.word	0x200002d8

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b02      	ldr	r3, [pc, #8]	@ (8001528 <HAL_GetTick+0x10>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	200002d8 	.word	0x200002d8

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	0002      	movs	r2, r0
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b7f      	cmp	r3, #127	@ 0x7f
 800153e:	d809      	bhi.n	8001554 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	001a      	movs	r2, r3
 8001546:	231f      	movs	r3, #31
 8001548:	401a      	ands	r2, r3
 800154a:	4b04      	ldr	r3, [pc, #16]	@ (800155c <__NVIC_EnableIRQ+0x30>)
 800154c:	2101      	movs	r1, #1
 800154e:	4091      	lsls	r1, r2
 8001550:	000a      	movs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
  }
}
 8001554:	46c0      	nop			@ (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	0002      	movs	r2, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b7f      	cmp	r3, #127	@ 0x7f
 8001574:	d828      	bhi.n	80015c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001576:	4a2f      	ldr	r2, [pc, #188]	@ (8001634 <__NVIC_SetPriority+0xd4>)
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b25b      	sxtb	r3, r3
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	33c0      	adds	r3, #192	@ 0xc0
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	589b      	ldr	r3, [r3, r2]
 8001586:	1dfa      	adds	r2, r7, #7
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	0011      	movs	r1, r2
 800158c:	2203      	movs	r2, #3
 800158e:	400a      	ands	r2, r1
 8001590:	00d2      	lsls	r2, r2, #3
 8001592:	21ff      	movs	r1, #255	@ 0xff
 8001594:	4091      	lsls	r1, r2
 8001596:	000a      	movs	r2, r1
 8001598:	43d2      	mvns	r2, r2
 800159a:	401a      	ands	r2, r3
 800159c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	22ff      	movs	r2, #255	@ 0xff
 80015a4:	401a      	ands	r2, r3
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	0018      	movs	r0, r3
 80015ac:	2303      	movs	r3, #3
 80015ae:	4003      	ands	r3, r0
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b4:	481f      	ldr	r0, [pc, #124]	@ (8001634 <__NVIC_SetPriority+0xd4>)
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	430a      	orrs	r2, r1
 80015c0:	33c0      	adds	r3, #192	@ 0xc0
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015c6:	e031      	b.n	800162c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <__NVIC_SetPriority+0xd8>)
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	0019      	movs	r1, r3
 80015d0:	230f      	movs	r3, #15
 80015d2:	400b      	ands	r3, r1
 80015d4:	3b08      	subs	r3, #8
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3306      	adds	r3, #6
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	18d3      	adds	r3, r2, r3
 80015de:	3304      	adds	r3, #4
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1dfa      	adds	r2, r7, #7
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	0011      	movs	r1, r2
 80015e8:	2203      	movs	r2, #3
 80015ea:	400a      	ands	r2, r1
 80015ec:	00d2      	lsls	r2, r2, #3
 80015ee:	21ff      	movs	r1, #255	@ 0xff
 80015f0:	4091      	lsls	r1, r2
 80015f2:	000a      	movs	r2, r1
 80015f4:	43d2      	mvns	r2, r2
 80015f6:	401a      	ands	r2, r3
 80015f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	019b      	lsls	r3, r3, #6
 80015fe:	22ff      	movs	r2, #255	@ 0xff
 8001600:	401a      	ands	r2, r3
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	2303      	movs	r3, #3
 800160a:	4003      	ands	r3, r0
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001610:	4809      	ldr	r0, [pc, #36]	@ (8001638 <__NVIC_SetPriority+0xd8>)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	001c      	movs	r4, r3
 8001618:	230f      	movs	r3, #15
 800161a:	4023      	ands	r3, r4
 800161c:	3b08      	subs	r3, #8
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	430a      	orrs	r2, r1
 8001622:	3306      	adds	r3, #6
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	18c3      	adds	r3, r0, r3
 8001628:	3304      	adds	r3, #4
 800162a:	601a      	str	r2, [r3, #0]
}
 800162c:	46c0      	nop			@ (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b003      	add	sp, #12
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	1e5a      	subs	r2, r3, #1
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	045b      	lsls	r3, r3, #17
 800164c:	429a      	cmp	r2, r3
 800164e:	d301      	bcc.n	8001654 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001650:	2301      	movs	r3, #1
 8001652:	e010      	b.n	8001676 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001654:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <SysTick_Config+0x44>)
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	3a01      	subs	r2, #1
 800165a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165c:	2301      	movs	r3, #1
 800165e:	425b      	negs	r3, r3
 8001660:	2103      	movs	r1, #3
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff ff7c 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <SysTick_Config+0x44>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <SysTick_Config+0x44>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	210f      	movs	r1, #15
 8001690:	187b      	adds	r3, r7, r1
 8001692:	1c02      	adds	r2, r0, #0
 8001694:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	187b      	adds	r3, r7, r1
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b25b      	sxtb	r3, r3
 800169e:	0011      	movs	r1, r2
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff ff5d 	bl	8001560 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b004      	add	sp, #16
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	0002      	movs	r2, r0
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff ff33 	bl	800152c <__NVIC_EnableIRQ>
}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff ffaf 	bl	800163c <SysTick_Config>
 80016de:	0003      	movs	r3, r0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f0:	230f      	movs	r3, #15
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2225      	movs	r2, #37	@ 0x25
 80016fc:	5c9b      	ldrb	r3, [r3, r2]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d008      	beq.n	8001716 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2204      	movs	r2, #4
 8001708:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2224      	movs	r2, #36	@ 0x24
 800170e:	2100      	movs	r1, #0
 8001710:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e024      	b.n	8001760 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	210e      	movs	r1, #14
 8001722:	438a      	bics	r2, r1
 8001724:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	438a      	bics	r2, r1
 8001734:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	221c      	movs	r2, #28
 800173c:	401a      	ands	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	2101      	movs	r1, #1
 8001744:	4091      	lsls	r1, r2
 8001746:	000a      	movs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2225      	movs	r2, #37	@ 0x25
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2224      	movs	r2, #36	@ 0x24
 8001756:	2100      	movs	r1, #0
 8001758:	5499      	strb	r1, [r3, r2]

    return status;
 800175a:	230f      	movs	r3, #15
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b004      	add	sp, #16
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	210f      	movs	r1, #15
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2225      	movs	r2, #37	@ 0x25
 800177c:	5c9b      	ldrb	r3, [r3, r2]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d006      	beq.n	8001792 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2204      	movs	r2, #4
 8001788:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e02a      	b.n	80017e8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	210e      	movs	r1, #14
 800179e:	438a      	bics	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	438a      	bics	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	221c      	movs	r2, #28
 80017b8:	401a      	ands	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	2101      	movs	r1, #1
 80017c0:	4091      	lsls	r1, r2
 80017c2:	000a      	movs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2225      	movs	r2, #37	@ 0x25
 80017ca:	2101      	movs	r1, #1
 80017cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2224      	movs	r2, #36	@ 0x24
 80017d2:	2100      	movs	r1, #0
 80017d4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	0010      	movs	r0, r2
 80017e6:	4798      	blx	r3
    }
  }
  return status;
 80017e8:	230f      	movs	r3, #15
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	781b      	ldrb	r3, [r3, #0]
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b004      	add	sp, #16
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800180e:	e155      	b.n	8001abc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4091      	lsls	r1, r2
 800181a:	000a      	movs	r2, r1
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d100      	bne.n	8001828 <HAL_GPIO_Init+0x30>
 8001826:	e146      	b.n	8001ab6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	4013      	ands	r3, r2
 8001830:	2b01      	cmp	r3, #1
 8001832:	d005      	beq.n	8001840 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800183c:	2b02      	cmp	r3, #2
 800183e:	d130      	bne.n	80018a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	409a      	lsls	r2, r3
 800184e:	0013      	movs	r3, r2
 8001850:	43da      	mvns	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	2201      	movs	r2, #1
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d017      	beq.n	80018de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	58d3      	ldr	r3, [r2, r3]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	43da      	mvns	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2107      	movs	r1, #7
 8001916:	400b      	ands	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	6939      	ldr	r1, [r7, #16]
 8001930:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	401a      	ands	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	23c0      	movs	r3, #192	@ 0xc0
 800196c:	029b      	lsls	r3, r3, #10
 800196e:	4013      	ands	r3, r2
 8001970:	d100      	bne.n	8001974 <HAL_GPIO_Init+0x17c>
 8001972:	e0a0      	b.n	8001ab6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b57      	ldr	r3, [pc, #348]	@ (8001ad4 <HAL_GPIO_Init+0x2dc>)
 8001976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001978:	4b56      	ldr	r3, [pc, #344]	@ (8001ad4 <HAL_GPIO_Init+0x2dc>)
 800197a:	2101      	movs	r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001980:	4a55      	ldr	r2, [pc, #340]	@ (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	589b      	ldr	r3, [r3, r2]
 800198c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2203      	movs	r2, #3
 8001992:	4013      	ands	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	409a      	lsls	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	43da      	mvns	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	23a0      	movs	r3, #160	@ 0xa0
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d01f      	beq.n	80019ee <HAL_GPIO_Init+0x1f6>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	@ (8001adc <HAL_GPIO_Init+0x2e4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_GPIO_Init+0x1f2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a49      	ldr	r2, [pc, #292]	@ (8001ae0 <HAL_GPIO_Init+0x2e8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a48      	ldr	r2, [pc, #288]	@ (8001ae4 <HAL_GPIO_Init+0x2ec>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x1ea>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a47      	ldr	r2, [pc, #284]	@ (8001ae8 <HAL_GPIO_Init+0x2f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x1e6>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a46      	ldr	r2, [pc, #280]	@ (8001aec <HAL_GPIO_Init+0x2f4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x1e2>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e00a      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019da:	2306      	movs	r3, #6
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019de:	2304      	movs	r3, #4
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019ee:	2300      	movs	r3, #0
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	2103      	movs	r1, #3
 80019f4:	400a      	ands	r2, r1
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	@ (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43da      	mvns	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	035b      	lsls	r3, r3, #13
 8001a26:	4013      	ands	r3, r2
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a32:	4b2f      	ldr	r3, [pc, #188]	@ (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	039b      	lsls	r3, r3, #14
 8001a50:	4013      	ands	r3, r2
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	029b      	lsls	r3, r3, #10
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	40da      	lsrs	r2, r3
 8001ac4:	1e13      	subs	r3, r2, #0
 8001ac6:	d000      	beq.n	8001aca <HAL_GPIO_Init+0x2d2>
 8001ac8:	e6a2      	b.n	8001810 <HAL_GPIO_Init+0x18>
  }
}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	46c0      	nop			@ (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b006      	add	sp, #24
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	50000400 	.word	0x50000400
 8001ae0:	50000800 	.word	0x50000800
 8001ae4:	50000c00 	.word	0x50000c00
 8001ae8:	50001000 	.word	0x50001000
 8001aec:	50001c00 	.word	0x50001c00
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	000a      	movs	r2, r1
 8001afe:	1cbb      	adds	r3, r7, #2
 8001b00:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	1cba      	adds	r2, r7, #2
 8001b08:	8812      	ldrh	r2, [r2, #0]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0e:	230f      	movs	r3, #15
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b18:	230f      	movs	r3, #15
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b20:	230f      	movs	r3, #15
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	0008      	movs	r0, r1
 8001b38:	0011      	movs	r1, r2
 8001b3a:	1cbb      	adds	r3, r7, #2
 8001b3c:	1c02      	adds	r2, r0, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
 8001b40:	1c7b      	adds	r3, r7, #1
 8001b42:	1c0a      	adds	r2, r1, #0
 8001b44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b46:	1c7b      	adds	r3, r7, #1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	881a      	ldrh	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b56:	e003      	b.n	8001b60 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b58:	1cbb      	adds	r3, r7, #2
 8001b5a:	881a      	ldrh	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b60:	46c0      	nop			@ (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	000a      	movs	r2, r1
 8001b72:	1cbb      	adds	r3, r7, #2
 8001b74:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b7c:	1cbb      	adds	r3, r7, #2
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4013      	ands	r3, r2
 8001b84:	041a      	lsls	r2, r3, #16
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	1cb9      	adds	r1, r7, #2
 8001b8c:	8809      	ldrh	r1, [r1, #0]
 8001b8e:	400b      	ands	r3, r1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	619a      	str	r2, [r3, #24]
}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b004      	add	sp, #16
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f000 fb6c 	bl	800228c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb4:	4bc8      	ldr	r3, [pc, #800]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	220c      	movs	r2, #12
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bbe:	4bc6      	ldr	r3, [pc, #792]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x36>
 8001bd4:	e07d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d007      	beq.n	8001bec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d112      	bne.n	8001c08 <HAL_RCC_OscConfig+0x68>
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10d      	bne.n	8001c08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	4bba      	ldr	r3, [pc, #744]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5a>
 8001bf8:	e06a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x130>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d166      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f000 fb42 	bl	800228c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	025b      	lsls	r3, r3, #9
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x84>
 8001c14:	4bb0      	ldr	r3, [pc, #704]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4baf      	ldr	r3, [pc, #700]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c1a:	2180      	movs	r1, #128	@ 0x80
 8001c1c:	0249      	lsls	r1, r1, #9
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e027      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	23a0      	movs	r3, #160	@ 0xa0
 8001c2a:	02db      	lsls	r3, r3, #11
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d10e      	bne.n	8001c4e <HAL_RCC_OscConfig+0xae>
 8001c30:	4ba9      	ldr	r3, [pc, #676]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4ba8      	ldr	r3, [pc, #672]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c36:	2180      	movs	r1, #128	@ 0x80
 8001c38:	02c9      	lsls	r1, r1, #11
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4ba5      	ldr	r3, [pc, #660]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c44:	2180      	movs	r1, #128	@ 0x80
 8001c46:	0249      	lsls	r1, r1, #9
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e012      	b.n	8001c74 <HAL_RCC_OscConfig+0xd4>
 8001c4e:	4ba2      	ldr	r3, [pc, #648]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4ba1      	ldr	r3, [pc, #644]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c54:	49a1      	ldr	r1, [pc, #644]	@ (8001edc <HAL_RCC_OscConfig+0x33c>)
 8001c56:	400a      	ands	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	4b9f      	ldr	r3, [pc, #636]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	025b      	lsls	r3, r3, #9
 8001c62:	4013      	ands	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4b9b      	ldr	r3, [pc, #620]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c6e:	499c      	ldr	r1, [pc, #624]	@ (8001ee0 <HAL_RCC_OscConfig+0x340>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d014      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fc4c 	bl	8001518 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c86:	f7ff fc47 	bl	8001518 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b64      	cmp	r3, #100	@ 0x64
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e2f9      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c98:	4b8f      	ldr	r3, [pc, #572]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	@ 0x80
 8001c9e:	029b      	lsls	r3, r3, #10
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0xe6>
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fc37 	bl	8001518 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc32 	bl	8001518 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	@ 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e2e4      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cc2:	4b85      	ldr	r3, [pc, #532]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	@ 0x80
 8001cc8:	029b      	lsls	r3, r3, #10
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x110>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d100      	bne.n	8001cde <HAL_RCC_OscConfig+0x13e>
 8001cdc:	e099      	b.n	8001e12 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001cec:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b79      	ldr	r3, [pc, #484]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001cf2:	2120      	movs	r1, #32
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	4393      	bics	r3, r2
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d13e      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1ea>
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d13b      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d12:	4b71      	ldr	r3, [pc, #452]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2204      	movs	r2, #4
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d004      	beq.n	8001d26 <HAL_RCC_OscConfig+0x186>
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e2b2      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d26:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ee4 <HAL_RCC_OscConfig+0x344>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	021a      	lsls	r2, r3, #8
 8001d36:	4b68      	ldr	r3, [pc, #416]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d3c:	4b66      	ldr	r3, [pc, #408]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2209      	movs	r2, #9
 8001d42:	4393      	bics	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	4b64      	ldr	r3, [pc, #400]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d4e:	f000 fbeb 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8001d52:	0001      	movs	r1, r0
 8001d54:	4b60      	ldr	r3, [pc, #384]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	4a62      	ldr	r2, [pc, #392]	@ (8001ee8 <HAL_RCC_OscConfig+0x348>)
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	000a      	movs	r2, r1
 8001d64:	40da      	lsrs	r2, r3
 8001d66:	4b61      	ldr	r3, [pc, #388]	@ (8001eec <HAL_RCC_OscConfig+0x34c>)
 8001d68:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001d6a:	4b61      	ldr	r3, [pc, #388]	@ (8001ef0 <HAL_RCC_OscConfig+0x350>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2513      	movs	r5, #19
 8001d70:	197c      	adds	r4, r7, r5
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff fb8a 	bl	800148c <HAL_InitTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001d7c:	197b      	adds	r3, r7, r5
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d046      	beq.n	8001e12 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001d84:	197b      	adds	r3, r7, r5
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	e280      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d027      	beq.n	8001de0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001d90:	4b51      	ldr	r3, [pc, #324]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2209      	movs	r2, #9
 8001d96:	4393      	bics	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fbb9 	bl	8001518 <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dac:	f7ff fbb4 	bl	8001518 <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e266      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dbe:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d0f1      	beq.n	8001dac <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a45      	ldr	r2, [pc, #276]	@ (8001ee4 <HAL_RCC_OscConfig+0x344>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	021a      	lsls	r2, r3, #8
 8001dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	e018      	b.n	8001e12 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	438a      	bics	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fb94 	bl	8001518 <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df6:	f7ff fb8f 	bl	8001518 <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e241      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e08:	4b33      	ldr	r3, [pc, #204]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d1f1      	bne.n	8001df6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2210      	movs	r2, #16
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d100      	bne.n	8001e1e <HAL_RCC_OscConfig+0x27e>
 8001e1c:	e0a1      	b.n	8001f62 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d140      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_OscConfig+0x29c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e227      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef4 <HAL_RCC_OscConfig+0x354>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1a      	ldr	r2, [r3, #32]
 8001e4a:	4b23      	ldr	r3, [pc, #140]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	0a19      	lsrs	r1, r3, #8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	0b5b      	lsrs	r3, r3, #13
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	0212      	lsls	r2, r2, #8
 8001e70:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	210f      	movs	r1, #15
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	491a      	ldr	r1, [pc, #104]	@ (8001ee8 <HAL_RCC_OscConfig+0x348>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e82:	4b1a      	ldr	r3, [pc, #104]	@ (8001eec <HAL_RCC_OscConfig+0x34c>)
 8001e84:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001e86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <HAL_RCC_OscConfig+0x350>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2513      	movs	r5, #19
 8001e8c:	197c      	adds	r4, r7, r5
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7ff fafc 	bl	800148c <HAL_InitTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001e98:	197b      	adds	r3, r7, r5
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d060      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001ea0:	197b      	adds	r3, r7, r5
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	e1f2      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d03f      	beq.n	8001f2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_RCC_OscConfig+0x338>)
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	0049      	lsls	r1, r1, #1
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fb2c 	bl	8001518 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ec4:	e018      	b.n	8001ef8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec6:	f7ff fb27 	bl	8001518 <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d911      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1d9      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	fffeffff 	.word	0xfffeffff
 8001ee0:	fffbffff 	.word	0xfffbffff
 8001ee4:	ffffe0ff 	.word	0xffffe0ff
 8001ee8:	080049bc 	.word	0x080049bc
 8001eec:	200000a0 	.word	0x200000a0
 8001ef0:	200000a4 	.word	0x200000a4
 8001ef4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ef8:	4bc9      	ldr	r3, [pc, #804]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	d0e0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f04:	4bc6      	ldr	r3, [pc, #792]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4ac6      	ldr	r2, [pc, #792]	@ (8002224 <HAL_RCC_OscConfig+0x684>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1a      	ldr	r2, [r3, #32]
 8001f12:	4bc3      	ldr	r3, [pc, #780]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f18:	4bc1      	ldr	r3, [pc, #772]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	0a19      	lsrs	r1, r3, #8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	061a      	lsls	r2, r3, #24
 8001f26:	4bbe      	ldr	r3, [pc, #760]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	e019      	b.n	8001f62 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f2e:	4bbc      	ldr	r3, [pc, #752]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4bbb      	ldr	r3, [pc, #748]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f34:	49bc      	ldr	r1, [pc, #752]	@ (8002228 <HAL_RCC_OscConfig+0x688>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff faed 	bl	8001518 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f44:	f7ff fae8 	bl	8001518 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e19a      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f56:	4bb2      	ldr	r3, [pc, #712]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2208      	movs	r2, #8
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d036      	beq.n	8001fda <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d019      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f74:	4baa      	ldr	r3, [pc, #680]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f78:	4ba9      	ldr	r3, [pc, #676]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7ff faca 	bl	8001518 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7ff fac5 	bl	8001518 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e177      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f9c:	4ba0      	ldr	r3, [pc, #640]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d0f1      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3ea>
 8001fa6:	e018      	b.n	8001fda <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa8:	4b9d      	ldr	r3, [pc, #628]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001faa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fac:	4b9c      	ldr	r3, [pc, #624]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7ff fab0 	bl	8001518 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7ff faab 	bl	8001518 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e15d      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fd0:	4b93      	ldr	r3, [pc, #588]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d1f1      	bne.n	8001fbe <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d100      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x446>
 8001fe4:	e0ae      	b.n	8002144 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2023      	movs	r0, #35	@ 0x23
 8001fe8:	183b      	adds	r3, r7, r0
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b8c      	ldr	r3, [pc, #560]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	055b      	lsls	r3, r3, #21
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b89      	ldr	r3, [pc, #548]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8001ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ffe:	4b88      	ldr	r3, [pc, #544]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002000:	2180      	movs	r1, #128	@ 0x80
 8002002:	0549      	lsls	r1, r1, #21
 8002004:	430a      	orrs	r2, r1
 8002006:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002008:	183b      	adds	r3, r7, r0
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	4b87      	ldr	r3, [pc, #540]	@ (800222c <HAL_RCC_OscConfig+0x68c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	2380      	movs	r3, #128	@ 0x80
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4013      	ands	r3, r2
 8002018:	d11a      	bne.n	8002050 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201a:	4b84      	ldr	r3, [pc, #528]	@ (800222c <HAL_RCC_OscConfig+0x68c>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b83      	ldr	r3, [pc, #524]	@ (800222c <HAL_RCC_OscConfig+0x68c>)
 8002020:	2180      	movs	r1, #128	@ 0x80
 8002022:	0049      	lsls	r1, r1, #1
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002028:	f7ff fa76 	bl	8001518 <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002032:	f7ff fa71 	bl	8001518 <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b64      	cmp	r3, #100	@ 0x64
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e123      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4b79      	ldr	r3, [pc, #484]	@ (800222c <HAL_RCC_OscConfig+0x68c>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4013      	ands	r3, r2
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	429a      	cmp	r2, r3
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x4cc>
 800205c:	4b70      	ldr	r3, [pc, #448]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 800205e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002060:	4b6f      	ldr	r3, [pc, #444]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	0049      	lsls	r1, r1, #1
 8002066:	430a      	orrs	r2, r1
 8002068:	651a      	str	r2, [r3, #80]	@ 0x50
 800206a:	e031      	b.n	80020d0 <HAL_RCC_OscConfig+0x530>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10c      	bne.n	800208e <HAL_RCC_OscConfig+0x4ee>
 8002074:	4b6a      	ldr	r3, [pc, #424]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002078:	4b69      	ldr	r3, [pc, #420]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 800207a:	496b      	ldr	r1, [pc, #428]	@ (8002228 <HAL_RCC_OscConfig+0x688>)
 800207c:	400a      	ands	r2, r1
 800207e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002080:	4b67      	ldr	r3, [pc, #412]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002082:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002084:	4b66      	ldr	r3, [pc, #408]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002086:	496a      	ldr	r1, [pc, #424]	@ (8002230 <HAL_RCC_OscConfig+0x690>)
 8002088:	400a      	ands	r2, r1
 800208a:	651a      	str	r2, [r3, #80]	@ 0x50
 800208c:	e020      	b.n	80020d0 <HAL_RCC_OscConfig+0x530>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	23a0      	movs	r3, #160	@ 0xa0
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	429a      	cmp	r2, r3
 8002098:	d10e      	bne.n	80020b8 <HAL_RCC_OscConfig+0x518>
 800209a:	4b61      	ldr	r3, [pc, #388]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 800209c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800209e:	4b60      	ldr	r3, [pc, #384]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80020a0:	2180      	movs	r1, #128	@ 0x80
 80020a2:	00c9      	lsls	r1, r1, #3
 80020a4:	430a      	orrs	r2, r1
 80020a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80020a8:	4b5d      	ldr	r3, [pc, #372]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80020aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80020ae:	2180      	movs	r1, #128	@ 0x80
 80020b0:	0049      	lsls	r1, r1, #1
 80020b2:	430a      	orrs	r2, r1
 80020b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0x530>
 80020b8:	4b59      	ldr	r3, [pc, #356]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80020ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020bc:	4b58      	ldr	r3, [pc, #352]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80020be:	495a      	ldr	r1, [pc, #360]	@ (8002228 <HAL_RCC_OscConfig+0x688>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80020c4:	4b56      	ldr	r3, [pc, #344]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80020c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020c8:	4b55      	ldr	r3, [pc, #340]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80020ca:	4959      	ldr	r1, [pc, #356]	@ (8002230 <HAL_RCC_OscConfig+0x690>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d015      	beq.n	8002104 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7ff fa1e 	bl	8001518 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020e0:	e009      	b.n	80020f6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7ff fa19 	bl	8001518 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	4a51      	ldr	r2, [pc, #324]	@ (8002234 <HAL_RCC_OscConfig+0x694>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0ca      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80020f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d0ef      	beq.n	80020e2 <HAL_RCC_OscConfig+0x542>
 8002102:	e014      	b.n	800212e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7ff fa08 	bl	8001518 <HAL_GetTick>
 8002108:	0003      	movs	r3, r0
 800210a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800210c:	e009      	b.n	8002122 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff fa03 	bl	8001518 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4a46      	ldr	r2, [pc, #280]	@ (8002234 <HAL_RCC_OscConfig+0x694>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0b4      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002122:	4b3f      	ldr	r3, [pc, #252]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4013      	ands	r3, r2
 800212c:	d1ef      	bne.n	800210e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800212e:	2323      	movs	r3, #35	@ 0x23
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002138:	4b39      	ldr	r3, [pc, #228]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 800213a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800213c:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 800213e:	493e      	ldr	r1, [pc, #248]	@ (8002238 <HAL_RCC_OscConfig+0x698>)
 8002140:	400a      	ands	r2, r1
 8002142:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	2b00      	cmp	r3, #0
 800214a:	d100      	bne.n	800214e <HAL_RCC_OscConfig+0x5ae>
 800214c:	e09d      	b.n	800228a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	d100      	bne.n	8002156 <HAL_RCC_OscConfig+0x5b6>
 8002154:	e076      	b.n	8002244 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	2b02      	cmp	r3, #2
 800215c:	d145      	bne.n	80021ea <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b2f      	ldr	r3, [pc, #188]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002164:	4935      	ldr	r1, [pc, #212]	@ (800223c <HAL_RCC_OscConfig+0x69c>)
 8002166:	400a      	ands	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7ff f9d5 	bl	8001518 <HAL_GetTick>
 800216e:	0003      	movs	r3, r0
 8002170:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f9d0 	bl	8001518 <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e082      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002186:	4b26      	ldr	r3, [pc, #152]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	2380      	movs	r3, #128	@ 0x80
 800218c:	049b      	lsls	r3, r3, #18
 800218e:	4013      	ands	r3, r2
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002192:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4a2a      	ldr	r2, [pc, #168]	@ (8002240 <HAL_RCC_OscConfig+0x6a0>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	431a      	orrs	r2, r3
 80021ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80021ae:	430a      	orrs	r2, r1
 80021b0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80021b8:	2180      	movs	r1, #128	@ 0x80
 80021ba:	0449      	lsls	r1, r1, #17
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff f9aa 	bl	8001518 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff f9a5 	bl	8001518 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e057      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021dc:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2380      	movs	r3, #128	@ 0x80
 80021e2:	049b      	lsls	r3, r3, #18
 80021e4:	4013      	ands	r3, r2
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x62a>
 80021e8:	e04f      	b.n	800228a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 80021f0:	4912      	ldr	r1, [pc, #72]	@ (800223c <HAL_RCC_OscConfig+0x69c>)
 80021f2:	400a      	ands	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff f98f 	bl	8001518 <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7ff f98a 	bl	8001518 <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e03c      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002212:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_RCC_OscConfig+0x680>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	@ 0x80
 8002218:	049b      	lsls	r3, r3, #18
 800221a:	4013      	ands	r3, r2
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x660>
 800221e:	e034      	b.n	800228a <HAL_RCC_OscConfig+0x6ea>
 8002220:	40021000 	.word	0x40021000
 8002224:	ffff1fff 	.word	0xffff1fff
 8002228:	fffffeff 	.word	0xfffffeff
 800222c:	40007000 	.word	0x40007000
 8002230:	fffffbff 	.word	0xfffffbff
 8002234:	00001388 	.word	0x00001388
 8002238:	efffffff 	.word	0xefffffff
 800223c:	feffffff 	.word	0xfeffffff
 8002240:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002250:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_RCC_OscConfig+0x6f4>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	025b      	lsls	r3, r3, #9
 800225c:	401a      	ands	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	429a      	cmp	r2, r3
 8002264:	d10f      	bne.n	8002286 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	23f0      	movs	r3, #240	@ 0xf0
 800226a:	039b      	lsls	r3, r3, #14
 800226c:	401a      	ands	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d107      	bne.n	8002286 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	23c0      	movs	r3, #192	@ 0xc0
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	401a      	ands	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b00a      	add	sp, #40	@ 0x28
 8002292:	bdb0      	pop	{r4, r5, r7, pc}
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e128      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b96      	ldr	r3, [pc, #600]	@ (8002508 <HAL_RCC_ClockConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d91e      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b93      	ldr	r3, [pc, #588]	@ (8002508 <HAL_RCC_ClockConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2201      	movs	r2, #1
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	4b90      	ldr	r3, [pc, #576]	@ (8002508 <HAL_RCC_ClockConfig+0x270>)
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022cc:	f7ff f924 	bl	8001518 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	e009      	b.n	80022ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d6:	f7ff f91f 	bl	8001518 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	4a8a      	ldr	r2, [pc, #552]	@ (800250c <HAL_RCC_ClockConfig+0x274>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e109      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b87      	ldr	r3, [pc, #540]	@ (8002508 <HAL_RCC_ClockConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1ee      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002302:	4b83      	ldr	r3, [pc, #524]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	22f0      	movs	r2, #240	@ 0xf0
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b7f      	ldr	r3, [pc, #508]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 8002312:	430a      	orrs	r2, r1
 8002314:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2201      	movs	r2, #1
 800231c:	4013      	ands	r3, r2
 800231e:	d100      	bne.n	8002322 <HAL_RCC_ClockConfig+0x8a>
 8002320:	e089      	b.n	8002436 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800232a:	4b79      	ldr	r3, [pc, #484]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	029b      	lsls	r3, r3, #10
 8002332:	4013      	ands	r3, r2
 8002334:	d120      	bne.n	8002378 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0e1      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002342:	4b73      	ldr	r3, [pc, #460]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	@ 0x80
 8002348:	049b      	lsls	r3, r3, #18
 800234a:	4013      	ands	r3, r2
 800234c:	d114      	bne.n	8002378 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0d5      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d106      	bne.n	8002368 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800235a:	4b6d      	ldr	r3, [pc, #436]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2204      	movs	r2, #4
 8002360:	4013      	ands	r3, r2
 8002362:	d109      	bne.n	8002378 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0ca      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002368:	4b69      	ldr	r3, [pc, #420]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0c2      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002378:	4b65      	ldr	r3, [pc, #404]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2203      	movs	r2, #3
 800237e:	4393      	bics	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4b62      	ldr	r3, [pc, #392]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238c:	f7ff f8c4 	bl	8001518 <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d111      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800239c:	e009      	b.n	80023b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239e:	f7ff f8bb 	bl	8001518 <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4a58      	ldr	r2, [pc, #352]	@ (800250c <HAL_RCC_ClockConfig+0x274>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e0a5      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b2:	4b57      	ldr	r3, [pc, #348]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	220c      	movs	r2, #12
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d1ef      	bne.n	800239e <HAL_RCC_ClockConfig+0x106>
 80023be:	e03a      	b.n	8002436 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d111      	bne.n	80023ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c8:	e009      	b.n	80023de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ca:	f7ff f8a5 	bl	8001518 <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	4a4d      	ldr	r2, [pc, #308]	@ (800250c <HAL_RCC_ClockConfig+0x274>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e08f      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023de:	4b4c      	ldr	r3, [pc, #304]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	220c      	movs	r2, #12
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d1ef      	bne.n	80023ca <HAL_RCC_ClockConfig+0x132>
 80023ea:	e024      	b.n	8002436 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d11b      	bne.n	800242c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f4:	e009      	b.n	800240a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f6:	f7ff f88f 	bl	8001518 <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	4a42      	ldr	r2, [pc, #264]	@ (800250c <HAL_RCC_ClockConfig+0x274>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e079      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800240a:	4b41      	ldr	r3, [pc, #260]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	220c      	movs	r2, #12
 8002410:	4013      	ands	r3, r2
 8002412:	2b04      	cmp	r3, #4
 8002414:	d1ef      	bne.n	80023f6 <HAL_RCC_ClockConfig+0x15e>
 8002416:	e00e      	b.n	8002436 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7ff f87e 	bl	8001518 <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	4a3a      	ldr	r2, [pc, #232]	@ (800250c <HAL_RCC_ClockConfig+0x274>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e068      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800242c:	4b38      	ldr	r3, [pc, #224]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	220c      	movs	r2, #12
 8002432:	4013      	ands	r3, r2
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002436:	4b34      	ldr	r3, [pc, #208]	@ (8002508 <HAL_RCC_ClockConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2201      	movs	r2, #1
 800243c:	4013      	ands	r3, r2
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d21e      	bcs.n	8002482 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002444:	4b30      	ldr	r3, [pc, #192]	@ (8002508 <HAL_RCC_ClockConfig+0x270>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2201      	movs	r2, #1
 800244a:	4393      	bics	r3, r2
 800244c:	0019      	movs	r1, r3
 800244e:	4b2e      	ldr	r3, [pc, #184]	@ (8002508 <HAL_RCC_ClockConfig+0x270>)
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002456:	f7ff f85f 	bl	8001518 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	e009      	b.n	8002474 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7ff f85a 	bl	8001518 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	4a28      	ldr	r2, [pc, #160]	@ (800250c <HAL_RCC_ClockConfig+0x274>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e044      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002474:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <HAL_RCC_ClockConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2201      	movs	r2, #1
 800247a:	4013      	ands	r3, r2
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2204      	movs	r2, #4
 8002488:	4013      	ands	r3, r2
 800248a:	d009      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a20      	ldr	r2, [pc, #128]	@ (8002514 <HAL_RCC_ClockConfig+0x27c>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2208      	movs	r2, #8
 80024a6:	4013      	ands	r3, r2
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024aa:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002518 <HAL_RCC_ClockConfig+0x280>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	00da      	lsls	r2, r3, #3
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024c0:	f000 f832 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024c4:	0001      	movs	r1, r0
 80024c6:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <HAL_RCC_ClockConfig+0x278>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	220f      	movs	r2, #15
 80024ce:	4013      	ands	r3, r2
 80024d0:	4a12      	ldr	r2, [pc, #72]	@ (800251c <HAL_RCC_ClockConfig+0x284>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	000a      	movs	r2, r1
 80024d6:	40da      	lsrs	r2, r3
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <HAL_RCC_ClockConfig+0x288>)
 80024da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_RCC_ClockConfig+0x28c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	250b      	movs	r5, #11
 80024e2:	197c      	adds	r4, r7, r5
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7fe ffd1 	bl	800148c <HAL_InitTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80024ee:	197b      	adds	r3, r7, r5
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80024f6:	197b      	adds	r3, r7, r5
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	e000      	b.n	80024fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b004      	add	sp, #16
 8002504:	bdb0      	pop	{r4, r5, r7, pc}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	40022000 	.word	0x40022000
 800250c:	00001388 	.word	0x00001388
 8002510:	40021000 	.word	0x40021000
 8002514:	fffff8ff 	.word	0xfffff8ff
 8002518:	ffffc7ff 	.word	0xffffc7ff
 800251c:	080049bc 	.word	0x080049bc
 8002520:	200000a0 	.word	0x200000a0
 8002524:	200000a4 	.word	0x200000a4

08002528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800252e:	4b3c      	ldr	r3, [pc, #240]	@ (8002620 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	220c      	movs	r2, #12
 8002538:	4013      	ands	r3, r2
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d013      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x3e>
 800253e:	d85c      	bhi.n	80025fa <HAL_RCC_GetSysClockFreq+0xd2>
 8002540:	2b04      	cmp	r3, #4
 8002542:	d002      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x22>
 8002544:	2b08      	cmp	r3, #8
 8002546:	d00b      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x38>
 8002548:	e057      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800254a:	4b35      	ldr	r3, [pc, #212]	@ (8002620 <HAL_RCC_GetSysClockFreq+0xf8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2210      	movs	r2, #16
 8002550:	4013      	ands	r3, r2
 8002552:	d002      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002554:	4b33      	ldr	r3, [pc, #204]	@ (8002624 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002556:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002558:	e05d      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800255a:	4b33      	ldr	r3, [pc, #204]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x100>)
 800255c:	613b      	str	r3, [r7, #16]
      break;
 800255e:	e05a      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002560:	4b32      	ldr	r3, [pc, #200]	@ (800262c <HAL_RCC_GetSysClockFreq+0x104>)
 8002562:	613b      	str	r3, [r7, #16]
      break;
 8002564:	e057      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0c9b      	lsrs	r3, r3, #18
 800256a:	220f      	movs	r2, #15
 800256c:	4013      	ands	r3, r2
 800256e:	4a30      	ldr	r2, [pc, #192]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	0d9b      	lsrs	r3, r3, #22
 8002578:	2203      	movs	r2, #3
 800257a:	4013      	ands	r3, r2
 800257c:	3301      	adds	r3, #1
 800257e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002580:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	025b      	lsls	r3, r3, #9
 8002588:	4013      	ands	r3, r2
 800258a:	d00f      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	000a      	movs	r2, r1
 8002590:	0152      	lsls	r2, r2, #5
 8002592:	1a52      	subs	r2, r2, r1
 8002594:	0193      	lsls	r3, r2, #6
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	185b      	adds	r3, r3, r1
 800259c:	025b      	lsls	r3, r3, #9
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fd fdb1 	bl	8000108 <__udivsi3>
 80025a6:	0003      	movs	r3, r0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e023      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2210      	movs	r2, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	d00f      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	000a      	movs	r2, r1
 80025ba:	0152      	lsls	r2, r2, #5
 80025bc:	1a52      	subs	r2, r2, r1
 80025be:	0193      	lsls	r3, r2, #6
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	185b      	adds	r3, r3, r1
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7fd fd9c 	bl	8000108 <__udivsi3>
 80025d0:	0003      	movs	r3, r0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e00e      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	000a      	movs	r2, r1
 80025da:	0152      	lsls	r2, r2, #5
 80025dc:	1a52      	subs	r2, r2, r1
 80025de:	0193      	lsls	r3, r2, #6
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	185b      	adds	r3, r3, r1
 80025e6:	029b      	lsls	r3, r3, #10
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7fd fd8c 	bl	8000108 <__udivsi3>
 80025f0:	0003      	movs	r3, r0
 80025f2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	613b      	str	r3, [r7, #16]
      break;
 80025f8:	e00d      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	0b5b      	lsrs	r3, r3, #13
 8002600:	2207      	movs	r2, #7
 8002602:	4013      	ands	r3, r2
 8002604:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	2280      	movs	r2, #128	@ 0x80
 800260c:	0212      	lsls	r2, r2, #8
 800260e:	409a      	lsls	r2, r3
 8002610:	0013      	movs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
      break;
 8002614:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002616:	693b      	ldr	r3, [r7, #16]
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b006      	add	sp, #24
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	003d0900 	.word	0x003d0900
 8002628:	00f42400 	.word	0x00f42400
 800262c:	007a1200 	.word	0x007a1200
 8002630:	080049d4 	.word	0x080049d4

08002634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002638:	4b02      	ldr	r3, [pc, #8]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x10>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	200000a0 	.word	0x200000a0

08002648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800264c:	f7ff fff2 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 8002650:	0001      	movs	r1, r0
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	2207      	movs	r2, #7
 800265a:	4013      	ands	r3, r2
 800265c:	4a04      	ldr	r2, [pc, #16]	@ (8002670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	40d9      	lsrs	r1, r3
 8002662:	000b      	movs	r3, r1
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	40021000 	.word	0x40021000
 8002670:	080049cc 	.word	0x080049cc

08002674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002678:	f7ff ffdc 	bl	8002634 <HAL_RCC_GetHCLKFreq>
 800267c:	0001      	movs	r1, r0
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	0adb      	lsrs	r3, r3, #11
 8002684:	2207      	movs	r2, #7
 8002686:	4013      	ands	r3, r2
 8002688:	4a04      	ldr	r2, [pc, #16]	@ (800269c <HAL_RCC_GetPCLK2Freq+0x28>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	40d9      	lsrs	r1, r3
 800268e:	000b      	movs	r3, r1
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	40021000 	.word	0x40021000
 800269c:	080049cc 	.word	0x080049cc

080026a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80026a8:	2017      	movs	r0, #23
 80026aa:	183b      	adds	r3, r7, r0
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2220      	movs	r2, #32
 80026b6:	4013      	ands	r3, r2
 80026b8:	d100      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80026ba:	e0c7      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026bc:	4b84      	ldr	r3, [pc, #528]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	055b      	lsls	r3, r3, #21
 80026c4:	4013      	ands	r3, r2
 80026c6:	d109      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4b81      	ldr	r3, [pc, #516]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026cc:	4b80      	ldr	r3, [pc, #512]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026ce:	2180      	movs	r1, #128	@ 0x80
 80026d0:	0549      	lsls	r1, r1, #21
 80026d2:	430a      	orrs	r2, r1
 80026d4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b7d      	ldr	r3, [pc, #500]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	d11a      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e8:	4b7a      	ldr	r3, [pc, #488]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80026ee:	2180      	movs	r1, #128	@ 0x80
 80026f0:	0049      	lsls	r1, r1, #1
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe ff0f 	bl	8001518 <HAL_GetTick>
 80026fa:	0003      	movs	r3, r0
 80026fc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	e008      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002700:	f7fe ff0a 	bl	8001518 <HAL_GetTick>
 8002704:	0002      	movs	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0d9      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b70      	ldr	r3, [pc, #448]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4013      	ands	r3, r2
 800271c:	d0f0      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800271e:	4b6c      	ldr	r3, [pc, #432]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	23c0      	movs	r3, #192	@ 0xc0
 8002724:	039b      	lsls	r3, r3, #14
 8002726:	4013      	ands	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	23c0      	movs	r3, #192	@ 0xc0
 8002730:	039b      	lsls	r3, r3, #14
 8002732:	4013      	ands	r3, r2
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	429a      	cmp	r2, r3
 8002738:	d013      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	23c0      	movs	r3, #192	@ 0xc0
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	401a      	ands	r2, r3
 8002744:	23c0      	movs	r3, #192	@ 0xc0
 8002746:	029b      	lsls	r3, r3, #10
 8002748:	429a      	cmp	r2, r3
 800274a:	d10a      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800274c:	4b60      	ldr	r3, [pc, #384]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	029b      	lsls	r3, r3, #10
 8002754:	401a      	ands	r2, r3
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	029b      	lsls	r3, r3, #10
 800275a:	429a      	cmp	r2, r3
 800275c:	d101      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0b1      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002762:	4b5b      	ldr	r3, [pc, #364]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002764:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002766:	23c0      	movs	r3, #192	@ 0xc0
 8002768:	029b      	lsls	r3, r3, #10
 800276a:	4013      	ands	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d03b      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	23c0      	movs	r3, #192	@ 0xc0
 800277a:	029b      	lsls	r3, r3, #10
 800277c:	4013      	ands	r3, r2
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	429a      	cmp	r2, r3
 8002782:	d033      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2220      	movs	r2, #32
 800278a:	4013      	ands	r3, r2
 800278c:	d02e      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800278e:	4b50      	ldr	r3, [pc, #320]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002792:	4a51      	ldr	r2, [pc, #324]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002794:	4013      	ands	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002798:	4b4d      	ldr	r3, [pc, #308]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800279a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800279c:	4b4c      	ldr	r3, [pc, #304]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	0309      	lsls	r1, r1, #12
 80027a2:	430a      	orrs	r2, r1
 80027a4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027a6:	4b4a      	ldr	r3, [pc, #296]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027aa:	4b49      	ldr	r3, [pc, #292]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027ac:	494b      	ldr	r1, [pc, #300]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80027ae:	400a      	ands	r2, r1
 80027b0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80027b2:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4013      	ands	r3, r2
 80027c0:	d014      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7fe fea9 	bl	8001518 <HAL_GetTick>
 80027c6:	0003      	movs	r3, r0
 80027c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027ca:	e009      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fea4 	bl	8001518 <HAL_GetTick>
 80027d0:	0002      	movs	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	4a42      	ldr	r2, [pc, #264]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e072      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027e0:	4b3b      	ldr	r3, [pc, #236]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4013      	ands	r3, r2
 80027ea:	d0ef      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2220      	movs	r2, #32
 80027f2:	4013      	ands	r3, r2
 80027f4:	d01f      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	23c0      	movs	r3, #192	@ 0xc0
 80027fc:	029b      	lsls	r3, r3, #10
 80027fe:	401a      	ands	r2, r3
 8002800:	23c0      	movs	r3, #192	@ 0xc0
 8002802:	029b      	lsls	r3, r3, #10
 8002804:	429a      	cmp	r2, r3
 8002806:	d10c      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002808:	4b31      	ldr	r3, [pc, #196]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a35      	ldr	r2, [pc, #212]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	23c0      	movs	r3, #192	@ 0xc0
 8002818:	039b      	lsls	r3, r3, #14
 800281a:	401a      	ands	r2, r3
 800281c:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002824:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	23c0      	movs	r3, #192	@ 0xc0
 800282c:	029b      	lsls	r3, r3, #10
 800282e:	401a      	ands	r2, r3
 8002830:	4b27      	ldr	r3, [pc, #156]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002832:	430a      	orrs	r2, r1
 8002834:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002836:	2317      	movs	r3, #23
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002840:	4b23      	ldr	r3, [pc, #140]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002844:	4b22      	ldr	r3, [pc, #136]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002846:	4928      	ldr	r1, [pc, #160]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002848:	400a      	ands	r2, r1
 800284a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2202      	movs	r2, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002856:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	220c      	movs	r2, #12
 800285c:	4393      	bics	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	4b1a      	ldr	r3, [pc, #104]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002866:	430a      	orrs	r2, r1
 8002868:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2204      	movs	r2, #4
 8002870:	4013      	ands	r3, r2
 8002872:	d009      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002874:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002878:	4a1c      	ldr	r2, [pc, #112]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002884:	430a      	orrs	r2, r1
 8002886:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2208      	movs	r2, #8
 800288e:	4013      	ands	r3, r2
 8002890:	d009      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002892:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002898:	4013      	ands	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028a2:	430a      	orrs	r2, r1
 80028a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2280      	movs	r2, #128	@ 0x80
 80028ac:	4013      	ands	r3, r2
 80028ae:	d009      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b4:	4a0f      	ldr	r2, [pc, #60]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028c0:	430a      	orrs	r2, r1
 80028c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b006      	add	sp, #24
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
 80028d8:	fffcffff 	.word	0xfffcffff
 80028dc:	fff7ffff 	.word	0xfff7ffff
 80028e0:	00001388 	.word	0x00001388
 80028e4:	ffcfffff 	.word	0xffcfffff
 80028e8:	efffffff 	.word	0xefffffff
 80028ec:	fffff3ff 	.word	0xfffff3ff
 80028f0:	ffffcfff 	.word	0xffffcfff
 80028f4:	fff3ffff 	.word	0xfff3ffff

080028f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e032      	b.n	8002970 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2239      	movs	r2, #57	@ 0x39
 800290e:	5c9b      	ldrb	r3, [r3, r2]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d107      	bne.n	8002926 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2238      	movs	r2, #56	@ 0x38
 800291a:	2100      	movs	r1, #0
 800291c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	f7fe fc1f 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2239      	movs	r2, #57	@ 0x39
 800292a:	2102      	movs	r1, #2
 800292c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	0019      	movs	r1, r3
 8002938:	0010      	movs	r0, r2
 800293a:	f000 fa4f 	bl	8002ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	223e      	movs	r2, #62	@ 0x3e
 8002942:	2101      	movs	r1, #1
 8002944:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	223a      	movs	r2, #58	@ 0x3a
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	223b      	movs	r2, #59	@ 0x3b
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	223c      	movs	r2, #60	@ 0x3c
 800295a:	2101      	movs	r1, #1
 800295c:	5499      	strb	r1, [r3, r2]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	223d      	movs	r2, #61	@ 0x3d
 8002962:	2101      	movs	r1, #1
 8002964:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2239      	movs	r2, #57	@ 0x39
 800296a:	2101      	movs	r1, #1
 800296c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b002      	add	sp, #8
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2239      	movs	r2, #57	@ 0x39
 8002984:	5c9b      	ldrb	r3, [r3, r2]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d001      	beq.n	8002990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e036      	b.n	80029fe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2239      	movs	r2, #57	@ 0x39
 8002994:	2102      	movs	r1, #2
 8002996:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2101      	movs	r1, #1
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	05db      	lsls	r3, r3, #23
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d009      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x50>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a13      	ldr	r2, [pc, #76]	@ (8002a08 <HAL_TIM_Base_Start_IT+0x90>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x50>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a12      	ldr	r2, [pc, #72]	@ (8002a0c <HAL_TIM_Base_Start_IT+0x94>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d111      	bne.n	80029ec <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2207      	movs	r2, #7
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d010      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	e007      	b.n	80029fc <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2101      	movs	r1, #1
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	0018      	movs	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b004      	add	sp, #16
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	40010800 	.word	0x40010800
 8002a0c:	40011400 	.word	0x40011400

08002a10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	438a      	bics	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a58 <HAL_TIM_Base_Stop_IT+0x48>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_Base_Stop_IT+0x34>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2101      	movs	r1, #1
 8002a40:	438a      	bics	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2239      	movs	r2, #57	@ 0x39
 8002a48:	2101      	movs	r1, #1
 8002a4a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	0018      	movs	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b002      	add	sp, #8
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	00001111 	.word	0x00001111

08002a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d021      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	4013      	ands	r3, r2
 8002a82:	d01d      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	4252      	negs	r2, r2
 8002a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 f982 	bl	8002dac <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e007      	b.n	8002aba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f975 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 f981 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2204      	movs	r2, #4
 8002acc:	4013      	ands	r3, r2
 8002ace:	d01e      	beq.n	8002b0e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	4252      	negs	r2, r2
 8002ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	23c0      	movs	r3, #192	@ 0xc0
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4013      	ands	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 f95b 	bl	8002dac <HAL_TIM_IC_CaptureCallback>
 8002af6:	e007      	b.n	8002b08 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 f94e 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 f95a 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2208      	movs	r2, #8
 8002b12:	4013      	ands	r3, r2
 8002b14:	d021      	beq.n	8002b5a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2209      	movs	r2, #9
 8002b24:	4252      	negs	r2, r2
 8002b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2203      	movs	r2, #3
 8002b36:	4013      	ands	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 f935 	bl	8002dac <HAL_TIM_IC_CaptureCallback>
 8002b42:	e007      	b.n	8002b54 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 f928 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 f934 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d022      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2210      	movs	r2, #16
 8002b66:	4013      	ands	r3, r2
 8002b68:	d01e      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2211      	movs	r2, #17
 8002b70:	4252      	negs	r2, r2
 8002b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2208      	movs	r2, #8
 8002b78:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	23c0      	movs	r3, #192	@ 0xc0
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 f90e 	bl	8002dac <HAL_TIM_IC_CaptureCallback>
 8002b90:	e007      	b.n	8002ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f901 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 f90d 	bl	8002dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2201      	movs	r2, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	d00c      	beq.n	8002bca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d008      	beq.n	8002bca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	4252      	negs	r2, r2
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7fe fa27 	bl	8001018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2240      	movs	r2, #64	@ 0x40
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d00c      	beq.n	8002bec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2240      	movs	r2, #64	@ 0x40
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d008      	beq.n	8002bec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2241      	movs	r2, #65	@ 0x41
 8002be0:	4252      	negs	r2, r2
 8002be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f8f0 	bl	8002dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	46c0      	nop			@ (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	230f      	movs	r3, #15
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2238      	movs	r2, #56	@ 0x38
 8002c0a:	5c9b      	ldrb	r3, [r3, r2]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIM_ConfigClockSource+0x20>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e0bc      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x19a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2238      	movs	r2, #56	@ 0x38
 8002c18:	2101      	movs	r1, #1
 8002c1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2239      	movs	r2, #57	@ 0x39
 8002c20:	2102      	movs	r1, #2
 8002c22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2277      	movs	r2, #119	@ 0x77
 8002c30:	4393      	bics	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4a58      	ldr	r2, [pc, #352]	@ (8002d98 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2280      	movs	r2, #128	@ 0x80
 8002c4a:	0192      	lsls	r2, r2, #6
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d040      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0xde>
 8002c50:	2280      	movs	r2, #128	@ 0x80
 8002c52:	0192      	lsls	r2, r2, #6
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d900      	bls.n	8002c5a <HAL_TIM_ConfigClockSource+0x66>
 8002c58:	e088      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x178>
 8002c5a:	2280      	movs	r2, #128	@ 0x80
 8002c5c:	0152      	lsls	r2, r2, #5
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d100      	bne.n	8002c64 <HAL_TIM_ConfigClockSource+0x70>
 8002c62:	e088      	b.n	8002d76 <HAL_TIM_ConfigClockSource+0x182>
 8002c64:	2280      	movs	r2, #128	@ 0x80
 8002c66:	0152      	lsls	r2, r2, #5
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d900      	bls.n	8002c6e <HAL_TIM_ConfigClockSource+0x7a>
 8002c6c:	e07e      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x178>
 8002c6e:	2b70      	cmp	r3, #112	@ 0x70
 8002c70:	d018      	beq.n	8002ca4 <HAL_TIM_ConfigClockSource+0xb0>
 8002c72:	d900      	bls.n	8002c76 <HAL_TIM_ConfigClockSource+0x82>
 8002c74:	e07a      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x178>
 8002c76:	2b60      	cmp	r3, #96	@ 0x60
 8002c78:	d04f      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x126>
 8002c7a:	d900      	bls.n	8002c7e <HAL_TIM_ConfigClockSource+0x8a>
 8002c7c:	e076      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x178>
 8002c7e:	2b50      	cmp	r3, #80	@ 0x50
 8002c80:	d03b      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0x106>
 8002c82:	d900      	bls.n	8002c86 <HAL_TIM_ConfigClockSource+0x92>
 8002c84:	e072      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x178>
 8002c86:	2b40      	cmp	r3, #64	@ 0x40
 8002c88:	d057      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0x146>
 8002c8a:	d900      	bls.n	8002c8e <HAL_TIM_ConfigClockSource+0x9a>
 8002c8c:	e06e      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x178>
 8002c8e:	2b30      	cmp	r3, #48	@ 0x30
 8002c90:	d063      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x166>
 8002c92:	d86b      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x178>
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d060      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x166>
 8002c98:	d868      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x178>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d05d      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x166>
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d05b      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x166>
 8002ca2:	e063      	b.n	8002d6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cb4:	f000 f966 	bl	8002f84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2277      	movs	r2, #119	@ 0x77
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
      break;
 8002cd0:	e052      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ce2:	f000 f94f 	bl	8002f84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2180      	movs	r1, #128	@ 0x80
 8002cf2:	01c9      	lsls	r1, r1, #7
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	609a      	str	r2, [r3, #8]
      break;
 8002cf8:	e03e      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d06:	001a      	movs	r2, r3
 8002d08:	f000 f8c2 	bl	8002e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2150      	movs	r1, #80	@ 0x50
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 f91c 	bl	8002f50 <TIM_ITRx_SetConfig>
      break;
 8002d18:	e02e      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d26:	001a      	movs	r2, r3
 8002d28:	f000 f8e0 	bl	8002eec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2160      	movs	r1, #96	@ 0x60
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 f90c 	bl	8002f50 <TIM_ITRx_SetConfig>
      break;
 8002d38:	e01e      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d46:	001a      	movs	r2, r3
 8002d48:	f000 f8a2 	bl	8002e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2140      	movs	r1, #64	@ 0x40
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 f8fc 	bl	8002f50 <TIM_ITRx_SetConfig>
      break;
 8002d58:	e00e      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	0019      	movs	r1, r3
 8002d64:	0010      	movs	r0, r2
 8002d66:	f000 f8f3 	bl	8002f50 <TIM_ITRx_SetConfig>
      break;
 8002d6a:	e005      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
      break;
 8002d74:	e000      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d76:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2239      	movs	r2, #57	@ 0x39
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2238      	movs	r2, #56	@ 0x38
 8002d84:	2100      	movs	r1, #0
 8002d86:	5499      	strb	r1, [r3, r2]

  return status;
 8002d88:	230f      	movs	r3, #15
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	ffff00ff 	.word	0xffff00ff

08002d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002da4:	46c0      	nop			@ (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002db4:	46c0      	nop			@ (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc4:	46c0      	nop			@ (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd4:	46c0      	nop			@ (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	05db      	lsls	r3, r3, #23
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d007      	beq.n	8002e06 <TIM_Base_SetConfig+0x2a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <TIM_Base_SetConfig+0xa8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d003      	beq.n	8002e06 <TIM_Base_SetConfig+0x2a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a21      	ldr	r2, [pc, #132]	@ (8002e88 <TIM_Base_SetConfig+0xac>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d108      	bne.n	8002e18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2270      	movs	r2, #112	@ 0x70
 8002e0a:	4393      	bics	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	05db      	lsls	r3, r3, #23
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d007      	beq.n	8002e32 <TIM_Base_SetConfig+0x56>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a17      	ldr	r2, [pc, #92]	@ (8002e84 <TIM_Base_SetConfig+0xa8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d003      	beq.n	8002e32 <TIM_Base_SetConfig+0x56>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a16      	ldr	r2, [pc, #88]	@ (8002e88 <TIM_Base_SetConfig+0xac>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d108      	bne.n	8002e44 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a15      	ldr	r2, [pc, #84]	@ (8002e8c <TIM_Base_SetConfig+0xb0>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2280      	movs	r2, #128	@ 0x80
 8002e48:	4393      	bics	r3, r2
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b004      	add	sp, #16
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40010800 	.word	0x40010800
 8002e88:	40011400 	.word	0x40011400
 8002e8c:	fffffcff 	.word	0xfffffcff

08002e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	001a      	movs	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	22f0      	movs	r2, #240	@ 0xf0
 8002eba:	4393      	bics	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	220a      	movs	r2, #10
 8002ecc:	4393      	bics	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	621a      	str	r2, [r3, #32]
}
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b006      	add	sp, #24
 8002eea:	bd80      	pop	{r7, pc}

08002eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	2210      	movs	r2, #16
 8002f04:	4393      	bics	r3, r2
 8002f06:	001a      	movs	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <TIM_TI2_ConfigInputStage+0x60>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	031b      	lsls	r3, r3, #12
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	22a0      	movs	r2, #160	@ 0xa0
 8002f28:	4393      	bics	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	621a      	str	r2, [r3, #32]
}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b006      	add	sp, #24
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	ffff0fff 	.word	0xffff0fff

08002f50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2270      	movs	r2, #112	@ 0x70
 8002f64:	4393      	bics	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	2207      	movs	r2, #7
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	609a      	str	r2, [r3, #8]
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b004      	add	sp, #16
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	4a09      	ldr	r2, [pc, #36]	@ (8002fc0 <TIM_ETR_SetConfig+0x3c>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	021a      	lsls	r2, r3, #8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	609a      	str	r2, [r3, #8]
}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	ffff00ff 	.word	0xffff00ff

08002fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2238      	movs	r2, #56	@ 0x38
 8002fd2:	5c9b      	ldrb	r3, [r3, r2]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e042      	b.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2238      	movs	r2, #56	@ 0x38
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2239      	movs	r2, #57	@ 0x39
 8002fe8:	2102      	movs	r1, #2
 8002fea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2270      	movs	r2, #112	@ 0x70
 8003000:	4393      	bics	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	@ 0x80
 800301c:	05db      	lsls	r3, r3, #23
 800301e:	429a      	cmp	r2, r3
 8003020:	d009      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a11      	ldr	r2, [pc, #68]	@ (800306c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0f      	ldr	r2, [pc, #60]	@ (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10c      	bne.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2280      	movs	r2, #128	@ 0x80
 800303a:	4393      	bics	r3, r2
 800303c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	4313      	orrs	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2239      	movs	r2, #57	@ 0x39
 8003054:	2101      	movs	r1, #1
 8003056:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2238      	movs	r2, #56	@ 0x38
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b004      	add	sp, #16
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	40010800 	.word	0x40010800
 8003070:	40011400 	.word	0x40011400

08003074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e044      	b.n	8003110 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2278      	movs	r2, #120	@ 0x78
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f7fe f899 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2224      	movs	r2, #36	@ 0x24
 80030a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 fe90 	bl	8003de4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 fc42 	bl	8003950 <UART_SetConfig>
 80030cc:	0003      	movs	r3, r0
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e01c      	b.n	8003110 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	490d      	ldr	r1, [pc, #52]	@ (8003118 <HAL_UART_Init+0xa4>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	212a      	movs	r1, #42	@ 0x2a
 80030f2:	438a      	bics	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f000 ff1f 	bl	8003f4c <UART_CheckIdleState>
 800310e:	0003      	movs	r3, r0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	ffffb7ff 	.word	0xffffb7ff

0800311c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	@ 0x28
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	1dbb      	adds	r3, r7, #6
 800312a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003130:	2b20      	cmp	r3, #32
 8003132:	d000      	beq.n	8003136 <HAL_UART_Transmit+0x1a>
 8003134:	e08c      	b.n	8003250 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_UART_Transmit+0x28>
 800313c:	1dbb      	adds	r3, r7, #6
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e084      	b.n	8003252 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	2380      	movs	r3, #128	@ 0x80
 800314e:	015b      	lsls	r3, r3, #5
 8003150:	429a      	cmp	r2, r3
 8003152:	d109      	bne.n	8003168 <HAL_UART_Transmit+0x4c>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2201      	movs	r2, #1
 8003160:	4013      	ands	r3, r2
 8003162:	d001      	beq.n	8003168 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e074      	b.n	8003252 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2284      	movs	r2, #132	@ 0x84
 800316c:	2100      	movs	r1, #0
 800316e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2221      	movs	r2, #33	@ 0x21
 8003174:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003176:	f7fe f9cf 	bl	8001518 <HAL_GetTick>
 800317a:	0003      	movs	r3, r0
 800317c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1dba      	adds	r2, r7, #6
 8003182:	2150      	movs	r1, #80	@ 0x50
 8003184:	8812      	ldrh	r2, [r2, #0]
 8003186:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1dba      	adds	r2, r7, #6
 800318c:	2152      	movs	r1, #82	@ 0x52
 800318e:	8812      	ldrh	r2, [r2, #0]
 8003190:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	2380      	movs	r3, #128	@ 0x80
 8003198:	015b      	lsls	r3, r3, #5
 800319a:	429a      	cmp	r2, r3
 800319c:	d108      	bne.n	80031b0 <HAL_UART_Transmit+0x94>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e003      	b.n	80031b8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031b8:	e02f      	b.n	800321a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	0013      	movs	r3, r2
 80031c4:	2200      	movs	r2, #0
 80031c6:	2180      	movs	r1, #128	@ 0x80
 80031c8:	f000 ff68 	bl	800409c <UART_WaitOnFlagUntilTimeout>
 80031cc:	1e03      	subs	r3, r0, #0
 80031ce:	d004      	beq.n	80031da <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e03b      	b.n	8003252 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	001a      	movs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	05d2      	lsls	r2, r2, #23
 80031ec:	0dd2      	lsrs	r2, r2, #23
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	3302      	adds	r3, #2
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e007      	b.n	8003208 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2252      	movs	r2, #82	@ 0x52
 800320c:	5a9b      	ldrh	r3, [r3, r2]
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b299      	uxth	r1, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2252      	movs	r2, #82	@ 0x52
 8003218:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2252      	movs	r2, #82	@ 0x52
 800321e:	5a9b      	ldrh	r3, [r3, r2]
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1c9      	bne.n	80031ba <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	0013      	movs	r3, r2
 8003230:	2200      	movs	r2, #0
 8003232:	2140      	movs	r1, #64	@ 0x40
 8003234:	f000 ff32 	bl	800409c <UART_WaitOnFlagUntilTimeout>
 8003238:	1e03      	subs	r3, r0, #0
 800323a:	d004      	beq.n	8003246 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e005      	b.n	8003252 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b008      	add	sp, #32
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	1dbb      	adds	r3, r7, #6
 8003268:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2280      	movs	r2, #128	@ 0x80
 800326e:	589b      	ldr	r3, [r3, r2]
 8003270:	2b20      	cmp	r3, #32
 8003272:	d14a      	bne.n	800330a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_UART_Receive_IT+0x26>
 800327a:	1dbb      	adds	r3, r7, #6
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e042      	b.n	800330c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	015b      	lsls	r3, r3, #5
 800328e:	429a      	cmp	r2, r3
 8003290:	d109      	bne.n	80032a6 <HAL_UART_Receive_IT+0x4a>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2201      	movs	r2, #1
 800329e:	4013      	ands	r3, r2
 80032a0:	d001      	beq.n	80032a6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e032      	b.n	800330c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a18      	ldr	r2, [pc, #96]	@ (8003314 <HAL_UART_Receive_IT+0xb8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d020      	beq.n	80032f8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	2380      	movs	r3, #128	@ 0x80
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	4013      	ands	r3, r2
 80032c2:	d019      	beq.n	80032f8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c4:	f3ef 8310 	mrs	r3, PRIMASK
 80032c8:	613b      	str	r3, [r7, #16]
  return(result);
 80032ca:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	2301      	movs	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2180      	movs	r1, #128	@ 0x80
 80032e6:	04c9      	lsls	r1, r1, #19
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f383 8810 	msr	PRIMASK, r3
}
 80032f6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032f8:	1dbb      	adds	r3, r7, #6
 80032fa:	881a      	ldrh	r2, [r3, #0]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	0018      	movs	r0, r3
 8003302:	f000 ff3b 	bl	800417c <UART_Start_Receive_IT>
 8003306:	0003      	movs	r3, r0
 8003308:	e000      	b.n	800330c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800330a:	2302      	movs	r3, #2
  }
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b008      	add	sp, #32
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40004800 	.word	0x40004800

08003318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b0ab      	sub	sp, #172	@ 0xac
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	22a4      	movs	r2, #164	@ 0xa4
 8003328:	18b9      	adds	r1, r7, r2
 800332a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	20a0      	movs	r0, #160	@ 0xa0
 8003334:	1839      	adds	r1, r7, r0
 8003336:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	219c      	movs	r1, #156	@ 0x9c
 8003340:	1879      	adds	r1, r7, r1
 8003342:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003344:	0011      	movs	r1, r2
 8003346:	18bb      	adds	r3, r7, r2
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a99      	ldr	r2, [pc, #612]	@ (80035b0 <HAL_UART_IRQHandler+0x298>)
 800334c:	4013      	ands	r3, r2
 800334e:	2298      	movs	r2, #152	@ 0x98
 8003350:	18bc      	adds	r4, r7, r2
 8003352:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003354:	18bb      	adds	r3, r7, r2
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d114      	bne.n	8003386 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800335c:	187b      	adds	r3, r7, r1
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2220      	movs	r2, #32
 8003362:	4013      	ands	r3, r2
 8003364:	d00f      	beq.n	8003386 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003366:	183b      	adds	r3, r7, r0
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2220      	movs	r2, #32
 800336c:	4013      	ands	r3, r2
 800336e:	d00a      	beq.n	8003386 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003374:	2b00      	cmp	r3, #0
 8003376:	d100      	bne.n	800337a <HAL_UART_IRQHandler+0x62>
 8003378:	e2be      	b.n	80038f8 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	0010      	movs	r0, r2
 8003382:	4798      	blx	r3
      }
      return;
 8003384:	e2b8      	b.n	80038f8 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003386:	2398      	movs	r3, #152	@ 0x98
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d100      	bne.n	8003392 <HAL_UART_IRQHandler+0x7a>
 8003390:	e114      	b.n	80035bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003392:	239c      	movs	r3, #156	@ 0x9c
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2201      	movs	r2, #1
 800339a:	4013      	ands	r3, r2
 800339c:	d106      	bne.n	80033ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800339e:	23a0      	movs	r3, #160	@ 0xa0
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a83      	ldr	r2, [pc, #524]	@ (80035b4 <HAL_UART_IRQHandler+0x29c>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	d100      	bne.n	80033ac <HAL_UART_IRQHandler+0x94>
 80033aa:	e107      	b.n	80035bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033ac:	23a4      	movs	r3, #164	@ 0xa4
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2201      	movs	r2, #1
 80033b4:	4013      	ands	r3, r2
 80033b6:	d012      	beq.n	80033de <HAL_UART_IRQHandler+0xc6>
 80033b8:	23a0      	movs	r3, #160	@ 0xa0
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	d00b      	beq.n	80033de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2201      	movs	r2, #1
 80033cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2284      	movs	r2, #132	@ 0x84
 80033d2:	589b      	ldr	r3, [r3, r2]
 80033d4:	2201      	movs	r2, #1
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2184      	movs	r1, #132	@ 0x84
 80033dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033de:	23a4      	movs	r3, #164	@ 0xa4
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2202      	movs	r2, #2
 80033e6:	4013      	ands	r3, r2
 80033e8:	d011      	beq.n	800340e <HAL_UART_IRQHandler+0xf6>
 80033ea:	239c      	movs	r3, #156	@ 0x9c
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	4013      	ands	r3, r2
 80033f4:	d00b      	beq.n	800340e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2202      	movs	r2, #2
 80033fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2284      	movs	r2, #132	@ 0x84
 8003402:	589b      	ldr	r3, [r3, r2]
 8003404:	2204      	movs	r2, #4
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2184      	movs	r1, #132	@ 0x84
 800340c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800340e:	23a4      	movs	r3, #164	@ 0xa4
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2204      	movs	r2, #4
 8003416:	4013      	ands	r3, r2
 8003418:	d011      	beq.n	800343e <HAL_UART_IRQHandler+0x126>
 800341a:	239c      	movs	r3, #156	@ 0x9c
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2201      	movs	r2, #1
 8003422:	4013      	ands	r3, r2
 8003424:	d00b      	beq.n	800343e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2204      	movs	r2, #4
 800342c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2284      	movs	r2, #132	@ 0x84
 8003432:	589b      	ldr	r3, [r3, r2]
 8003434:	2202      	movs	r2, #2
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2184      	movs	r1, #132	@ 0x84
 800343c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800343e:	23a4      	movs	r3, #164	@ 0xa4
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2208      	movs	r2, #8
 8003446:	4013      	ands	r3, r2
 8003448:	d017      	beq.n	800347a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800344a:	23a0      	movs	r3, #160	@ 0xa0
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2220      	movs	r2, #32
 8003452:	4013      	ands	r3, r2
 8003454:	d105      	bne.n	8003462 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003456:	239c      	movs	r3, #156	@ 0x9c
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2201      	movs	r2, #1
 800345e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003460:	d00b      	beq.n	800347a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2208      	movs	r2, #8
 8003468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2284      	movs	r2, #132	@ 0x84
 800346e:	589b      	ldr	r3, [r3, r2]
 8003470:	2208      	movs	r2, #8
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2184      	movs	r1, #132	@ 0x84
 8003478:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800347a:	23a4      	movs	r3, #164	@ 0xa4
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	2380      	movs	r3, #128	@ 0x80
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	4013      	ands	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_UART_IRQHandler+0x198>
 8003488:	23a0      	movs	r3, #160	@ 0xa0
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	2380      	movs	r3, #128	@ 0x80
 8003490:	04db      	lsls	r3, r3, #19
 8003492:	4013      	ands	r3, r2
 8003494:	d00c      	beq.n	80034b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2280      	movs	r2, #128	@ 0x80
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2284      	movs	r2, #132	@ 0x84
 80034a4:	589b      	ldr	r3, [r3, r2]
 80034a6:	2220      	movs	r2, #32
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2184      	movs	r1, #132	@ 0x84
 80034ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2284      	movs	r2, #132	@ 0x84
 80034b4:	589b      	ldr	r3, [r3, r2]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d100      	bne.n	80034bc <HAL_UART_IRQHandler+0x1a4>
 80034ba:	e21f      	b.n	80038fc <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034bc:	23a4      	movs	r3, #164	@ 0xa4
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2220      	movs	r2, #32
 80034c4:	4013      	ands	r3, r2
 80034c6:	d00e      	beq.n	80034e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034c8:	23a0      	movs	r3, #160	@ 0xa0
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2220      	movs	r2, #32
 80034d0:	4013      	ands	r3, r2
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	0010      	movs	r0, r2
 80034e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2284      	movs	r2, #132	@ 0x84
 80034ea:	589b      	ldr	r3, [r3, r2]
 80034ec:	2194      	movs	r1, #148	@ 0x94
 80034ee:	187a      	adds	r2, r7, r1
 80034f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2240      	movs	r2, #64	@ 0x40
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b40      	cmp	r3, #64	@ 0x40
 80034fe:	d004      	beq.n	800350a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003500:	187b      	adds	r3, r7, r1
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2228      	movs	r2, #40	@ 0x28
 8003506:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003508:	d047      	beq.n	800359a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 feff 	bl	8004310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2240      	movs	r2, #64	@ 0x40
 800351a:	4013      	ands	r3, r2
 800351c:	2b40      	cmp	r3, #64	@ 0x40
 800351e:	d137      	bne.n	8003590 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003520:	f3ef 8310 	mrs	r3, PRIMASK
 8003524:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003528:	2090      	movs	r0, #144	@ 0x90
 800352a:	183a      	adds	r2, r7, r0
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	2301      	movs	r3, #1
 8003530:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003534:	f383 8810 	msr	PRIMASK, r3
}
 8003538:	46c0      	nop			@ (mov r8, r8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2140      	movs	r1, #64	@ 0x40
 8003546:	438a      	bics	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	183b      	adds	r3, r7, r0
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355c:	2b00      	cmp	r3, #0
 800355e:	d012      	beq.n	8003586 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003564:	4a14      	ldr	r2, [pc, #80]	@ (80035b8 <HAL_UART_IRQHandler+0x2a0>)
 8003566:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800356c:	0018      	movs	r0, r3
 800356e:	f7fe f8fb 	bl	8001768 <HAL_DMA_Abort_IT>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d01a      	beq.n	80035ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003580:	0018      	movs	r0, r3
 8003582:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003584:	e012      	b.n	80035ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	0018      	movs	r0, r3
 800358a:	f000 f9cd 	bl	8003928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358e:	e00d      	b.n	80035ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f000 f9c8 	bl	8003928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003598:	e008      	b.n	80035ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0018      	movs	r0, r3
 800359e:	f000 f9c3 	bl	8003928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2284      	movs	r2, #132	@ 0x84
 80035a6:	2100      	movs	r1, #0
 80035a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80035aa:	e1a7      	b.n	80038fc <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	46c0      	nop			@ (mov r8, r8)
    return;
 80035ae:	e1a5      	b.n	80038fc <HAL_UART_IRQHandler+0x5e4>
 80035b0:	0000080f 	.word	0x0000080f
 80035b4:	04000120 	.word	0x04000120
 80035b8:	080043d9 	.word	0x080043d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d000      	beq.n	80035c6 <HAL_UART_IRQHandler+0x2ae>
 80035c4:	e159      	b.n	800387a <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035c6:	23a4      	movs	r3, #164	@ 0xa4
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2210      	movs	r2, #16
 80035ce:	4013      	ands	r3, r2
 80035d0:	d100      	bne.n	80035d4 <HAL_UART_IRQHandler+0x2bc>
 80035d2:	e152      	b.n	800387a <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035d4:	23a0      	movs	r3, #160	@ 0xa0
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2210      	movs	r2, #16
 80035dc:	4013      	ands	r3, r2
 80035de:	d100      	bne.n	80035e2 <HAL_UART_IRQHandler+0x2ca>
 80035e0:	e14b      	b.n	800387a <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2210      	movs	r2, #16
 80035e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2240      	movs	r2, #64	@ 0x40
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b40      	cmp	r3, #64	@ 0x40
 80035f6:	d000      	beq.n	80035fa <HAL_UART_IRQHandler+0x2e2>
 80035f8:	e0bf      	b.n	800377a <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	217e      	movs	r1, #126	@ 0x7e
 8003604:	187b      	adds	r3, r7, r1
 8003606:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003608:	187b      	adds	r3, r7, r1
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d100      	bne.n	8003612 <HAL_UART_IRQHandler+0x2fa>
 8003610:	e095      	b.n	800373e <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2258      	movs	r2, #88	@ 0x58
 8003616:	5a9b      	ldrh	r3, [r3, r2]
 8003618:	187a      	adds	r2, r7, r1
 800361a:	8812      	ldrh	r2, [r2, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d300      	bcc.n	8003622 <HAL_UART_IRQHandler+0x30a>
 8003620:	e08d      	b.n	800373e <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	187a      	adds	r2, r7, r1
 8003626:	215a      	movs	r1, #90	@ 0x5a
 8003628:	8812      	ldrh	r2, [r2, #0]
 800362a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2220      	movs	r2, #32
 8003636:	4013      	ands	r3, r2
 8003638:	d16f      	bne.n	800371a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800363a:	f3ef 8310 	mrs	r3, PRIMASK
 800363e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003642:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003644:	2301      	movs	r3, #1
 8003646:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	49ad      	ldr	r1, [pc, #692]	@ (8003910 <HAL_UART_IRQHandler+0x5f8>)
 800365c:	400a      	ands	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003662:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003666:	f383 8810 	msr	PRIMASK, r3
}
 800366a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366c:	f3ef 8310 	mrs	r3, PRIMASK
 8003670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	677b      	str	r3, [r7, #116]	@ 0x74
 8003676:	2301      	movs	r3, #1
 8003678:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			@ (mov r8, r8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2101      	movs	r1, #1
 800368e:	438a      	bics	r2, r1
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003694:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003698:	f383 8810 	msr	PRIMASK, r3
}
 800369c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369e:	f3ef 8310 	mrs	r3, PRIMASK
 80036a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80036a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80036a8:	2301      	movs	r3, #1
 80036aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ae:	f383 8810 	msr	PRIMASK, r3
}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2140      	movs	r1, #64	@ 0x40
 80036c0:	438a      	bics	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036c6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ca:	f383 8810 	msr	PRIMASK, r3
}
 80036ce:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2280      	movs	r2, #128	@ 0x80
 80036d4:	2120      	movs	r1, #32
 80036d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036de:	f3ef 8310 	mrs	r3, PRIMASK
 80036e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80036e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036e8:	2301      	movs	r3, #1
 80036ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2110      	movs	r1, #16
 8003700:	438a      	bics	r2, r1
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003706:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800370a:	f383 8810 	msr	PRIMASK, r3
}
 800370e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003714:	0018      	movs	r0, r3
 8003716:	f7fd ffe7 	bl	80016e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2258      	movs	r2, #88	@ 0x58
 8003724:	5a9a      	ldrh	r2, [r3, r2]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	215a      	movs	r1, #90	@ 0x5a
 800372a:	5a5b      	ldrh	r3, [r3, r1]
 800372c:	b29b      	uxth	r3, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	b29a      	uxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	0011      	movs	r1, r2
 8003736:	0018      	movs	r0, r3
 8003738:	f000 f8fe 	bl	8003938 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800373c:	e0e0      	b.n	8003900 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2258      	movs	r2, #88	@ 0x58
 8003742:	5a9b      	ldrh	r3, [r3, r2]
 8003744:	227e      	movs	r2, #126	@ 0x7e
 8003746:	18ba      	adds	r2, r7, r2
 8003748:	8812      	ldrh	r2, [r2, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d000      	beq.n	8003750 <HAL_UART_IRQHandler+0x438>
 800374e:	e0d7      	b.n	8003900 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2220      	movs	r2, #32
 800375a:	4013      	ands	r3, r2
 800375c:	2b20      	cmp	r3, #32
 800375e:	d000      	beq.n	8003762 <HAL_UART_IRQHandler+0x44a>
 8003760:	e0ce      	b.n	8003900 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2258      	movs	r2, #88	@ 0x58
 800376c:	5a9a      	ldrh	r2, [r3, r2]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	0011      	movs	r1, r2
 8003772:	0018      	movs	r0, r3
 8003774:	f000 f8e0 	bl	8003938 <HAL_UARTEx_RxEventCallback>
      return;
 8003778:	e0c2      	b.n	8003900 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2258      	movs	r2, #88	@ 0x58
 800377e:	5a99      	ldrh	r1, [r3, r2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	225a      	movs	r2, #90	@ 0x5a
 8003784:	5a9b      	ldrh	r3, [r3, r2]
 8003786:	b29a      	uxth	r2, r3
 8003788:	208e      	movs	r0, #142	@ 0x8e
 800378a:	183b      	adds	r3, r7, r0
 800378c:	1a8a      	subs	r2, r1, r2
 800378e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	225a      	movs	r2, #90	@ 0x5a
 8003794:	5a9b      	ldrh	r3, [r3, r2]
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d100      	bne.n	800379e <HAL_UART_IRQHandler+0x486>
 800379c:	e0b2      	b.n	8003904 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 800379e:	183b      	adds	r3, r7, r0
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d100      	bne.n	80037a8 <HAL_UART_IRQHandler+0x490>
 80037a6:	e0ad      	b.n	8003904 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80037ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b0:	2488      	movs	r4, #136	@ 0x88
 80037b2:	193a      	adds	r2, r7, r4
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	2301      	movs	r3, #1
 80037b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f383 8810 	msr	PRIMASK, r3
}
 80037c0:	46c0      	nop			@ (mov r8, r8)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4951      	ldr	r1, [pc, #324]	@ (8003914 <HAL_UART_IRQHandler+0x5fc>)
 80037ce:	400a      	ands	r2, r1
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f383 8810 	msr	PRIMASK, r3
}
 80037de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80037e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e8:	2484      	movs	r4, #132	@ 0x84
 80037ea:	193a      	adds	r2, r7, r4
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	2301      	movs	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			@ (mov r8, r8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2101      	movs	r1, #1
 8003806:	438a      	bics	r2, r1
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	193b      	adds	r3, r7, r4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	@ 0x80
 800381c:	2120      	movs	r1, #32
 800381e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382c:	f3ef 8310 	mrs	r3, PRIMASK
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003834:	2480      	movs	r4, #128	@ 0x80
 8003836:	193a      	adds	r2, r7, r4
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	2301      	movs	r3, #1
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	f383 8810 	msr	PRIMASK, r3
}
 8003844:	46c0      	nop			@ (mov r8, r8)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2110      	movs	r1, #16
 8003852:	438a      	bics	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	193b      	adds	r3, r7, r4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385e:	f383 8810 	msr	PRIMASK, r3
}
 8003862:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800386a:	183b      	adds	r3, r7, r0
 800386c:	881a      	ldrh	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0011      	movs	r1, r2
 8003872:	0018      	movs	r0, r3
 8003874:	f000 f860 	bl	8003938 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003878:	e044      	b.n	8003904 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800387a:	23a4      	movs	r3, #164	@ 0xa4
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	2380      	movs	r3, #128	@ 0x80
 8003882:	035b      	lsls	r3, r3, #13
 8003884:	4013      	ands	r3, r2
 8003886:	d010      	beq.n	80038aa <HAL_UART_IRQHandler+0x592>
 8003888:	239c      	movs	r3, #156	@ 0x9c
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	2380      	movs	r3, #128	@ 0x80
 8003890:	03db      	lsls	r3, r3, #15
 8003892:	4013      	ands	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2280      	movs	r2, #128	@ 0x80
 800389c:	0352      	lsls	r2, r2, #13
 800389e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 ff9a 	bl	80047dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038a8:	e02f      	b.n	800390a <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038aa:	23a4      	movs	r3, #164	@ 0xa4
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2280      	movs	r2, #128	@ 0x80
 80038b2:	4013      	ands	r3, r2
 80038b4:	d00f      	beq.n	80038d6 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038b6:	23a0      	movs	r3, #160	@ 0xa0
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2280      	movs	r2, #128	@ 0x80
 80038be:	4013      	ands	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01e      	beq.n	8003908 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	0010      	movs	r0, r2
 80038d2:	4798      	blx	r3
    }
    return;
 80038d4:	e018      	b.n	8003908 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038d6:	23a4      	movs	r3, #164	@ 0xa4
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2240      	movs	r2, #64	@ 0x40
 80038de:	4013      	ands	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_UART_IRQHandler+0x5f2>
 80038e2:	23a0      	movs	r3, #160	@ 0xa0
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2240      	movs	r2, #64	@ 0x40
 80038ea:	4013      	ands	r3, r2
 80038ec:	d00d      	beq.n	800390a <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f000 fd84 	bl	80043fe <UART_EndTransmit_IT>
    return;
 80038f6:	e008      	b.n	800390a <HAL_UART_IRQHandler+0x5f2>
      return;
 80038f8:	46c0      	nop			@ (mov r8, r8)
 80038fa:	e006      	b.n	800390a <HAL_UART_IRQHandler+0x5f2>
    return;
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	e004      	b.n	800390a <HAL_UART_IRQHandler+0x5f2>
      return;
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	e002      	b.n	800390a <HAL_UART_IRQHandler+0x5f2>
      return;
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	e000      	b.n	800390a <HAL_UART_IRQHandler+0x5f2>
    return;
 8003908:	46c0      	nop			@ (mov r8, r8)
  }

}
 800390a:	46bd      	mov	sp, r7
 800390c:	b02b      	add	sp, #172	@ 0xac
 800390e:	bd90      	pop	{r4, r7, pc}
 8003910:	fffffeff 	.word	0xfffffeff
 8003914:	fffffedf 	.word	0xfffffedf

08003918 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003920:	46c0      	nop			@ (mov r8, r8)
 8003922:	46bd      	mov	sp, r7
 8003924:	b002      	add	sp, #8
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003930:	46c0      	nop			@ (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b002      	add	sp, #8
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	000a      	movs	r2, r1
 8003942:	1cbb      	adds	r3, r7, #2
 8003944:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	46bd      	mov	sp, r7
 800394a:	b002      	add	sp, #8
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003950:	b5b0      	push	{r4, r5, r7, lr}
 8003952:	b08e      	sub	sp, #56	@ 0x38
 8003954:	af00      	add	r7, sp, #0
 8003956:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003958:	231a      	movs	r3, #26
 800395a:	2218      	movs	r2, #24
 800395c:	189b      	adds	r3, r3, r2
 800395e:	19db      	adds	r3, r3, r7
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	431a      	orrs	r2, r3
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	431a      	orrs	r2, r3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4313      	orrs	r3, r2
 800397a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4ab4      	ldr	r2, [pc, #720]	@ (8003c54 <UART_SetConfig+0x304>)
 8003984:	4013      	ands	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800398e:	430a      	orrs	r2, r1
 8003990:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4aaf      	ldr	r2, [pc, #700]	@ (8003c58 <UART_SetConfig+0x308>)
 800399a:	4013      	ands	r3, r2
 800399c:	0019      	movs	r1, r3
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4aa9      	ldr	r2, [pc, #676]	@ (8003c5c <UART_SetConfig+0x30c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039c0:	4313      	orrs	r3, r2
 80039c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	4aa5      	ldr	r2, [pc, #660]	@ (8003c60 <UART_SetConfig+0x310>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	0019      	movs	r1, r3
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4aa1      	ldr	r2, [pc, #644]	@ (8003c64 <UART_SetConfig+0x314>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d131      	bne.n	8003a48 <UART_SetConfig+0xf8>
 80039e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003c68 <UART_SetConfig+0x318>)
 80039e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e8:	220c      	movs	r2, #12
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	d01d      	beq.n	8003a2c <UART_SetConfig+0xdc>
 80039f0:	d823      	bhi.n	8003a3a <UART_SetConfig+0xea>
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d00c      	beq.n	8003a10 <UART_SetConfig+0xc0>
 80039f6:	d820      	bhi.n	8003a3a <UART_SetConfig+0xea>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <UART_SetConfig+0xb2>
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d00e      	beq.n	8003a1e <UART_SetConfig+0xce>
 8003a00:	e01b      	b.n	8003a3a <UART_SetConfig+0xea>
 8003a02:	231b      	movs	r3, #27
 8003a04:	2218      	movs	r2, #24
 8003a06:	189b      	adds	r3, r3, r2
 8003a08:	19db      	adds	r3, r3, r7
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	e065      	b.n	8003adc <UART_SetConfig+0x18c>
 8003a10:	231b      	movs	r3, #27
 8003a12:	2218      	movs	r2, #24
 8003a14:	189b      	adds	r3, r3, r2
 8003a16:	19db      	adds	r3, r3, r7
 8003a18:	2202      	movs	r2, #2
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e05e      	b.n	8003adc <UART_SetConfig+0x18c>
 8003a1e:	231b      	movs	r3, #27
 8003a20:	2218      	movs	r2, #24
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	19db      	adds	r3, r3, r7
 8003a26:	2204      	movs	r2, #4
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e057      	b.n	8003adc <UART_SetConfig+0x18c>
 8003a2c:	231b      	movs	r3, #27
 8003a2e:	2218      	movs	r2, #24
 8003a30:	189b      	adds	r3, r3, r2
 8003a32:	19db      	adds	r3, r3, r7
 8003a34:	2208      	movs	r2, #8
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e050      	b.n	8003adc <UART_SetConfig+0x18c>
 8003a3a:	231b      	movs	r3, #27
 8003a3c:	2218      	movs	r2, #24
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	19db      	adds	r3, r3, r7
 8003a42:	2210      	movs	r2, #16
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e049      	b.n	8003adc <UART_SetConfig+0x18c>
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a83      	ldr	r2, [pc, #524]	@ (8003c5c <UART_SetConfig+0x30c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d13e      	bne.n	8003ad0 <UART_SetConfig+0x180>
 8003a52:	4b85      	ldr	r3, [pc, #532]	@ (8003c68 <UART_SetConfig+0x318>)
 8003a54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a56:	23c0      	movs	r3, #192	@ 0xc0
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	22c0      	movs	r2, #192	@ 0xc0
 8003a5e:	0112      	lsls	r2, r2, #4
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d027      	beq.n	8003ab4 <UART_SetConfig+0x164>
 8003a64:	22c0      	movs	r2, #192	@ 0xc0
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d82a      	bhi.n	8003ac2 <UART_SetConfig+0x172>
 8003a6c:	2280      	movs	r2, #128	@ 0x80
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d011      	beq.n	8003a98 <UART_SetConfig+0x148>
 8003a74:	2280      	movs	r2, #128	@ 0x80
 8003a76:	0112      	lsls	r2, r2, #4
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d822      	bhi.n	8003ac2 <UART_SetConfig+0x172>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <UART_SetConfig+0x13a>
 8003a80:	2280      	movs	r2, #128	@ 0x80
 8003a82:	00d2      	lsls	r2, r2, #3
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <UART_SetConfig+0x156>
 8003a88:	e01b      	b.n	8003ac2 <UART_SetConfig+0x172>
 8003a8a:	231b      	movs	r3, #27
 8003a8c:	2218      	movs	r2, #24
 8003a8e:	189b      	adds	r3, r3, r2
 8003a90:	19db      	adds	r3, r3, r7
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e021      	b.n	8003adc <UART_SetConfig+0x18c>
 8003a98:	231b      	movs	r3, #27
 8003a9a:	2218      	movs	r2, #24
 8003a9c:	189b      	adds	r3, r3, r2
 8003a9e:	19db      	adds	r3, r3, r7
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	e01a      	b.n	8003adc <UART_SetConfig+0x18c>
 8003aa6:	231b      	movs	r3, #27
 8003aa8:	2218      	movs	r2, #24
 8003aaa:	189b      	adds	r3, r3, r2
 8003aac:	19db      	adds	r3, r3, r7
 8003aae:	2204      	movs	r2, #4
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e013      	b.n	8003adc <UART_SetConfig+0x18c>
 8003ab4:	231b      	movs	r3, #27
 8003ab6:	2218      	movs	r2, #24
 8003ab8:	189b      	adds	r3, r3, r2
 8003aba:	19db      	adds	r3, r3, r7
 8003abc:	2208      	movs	r2, #8
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e00c      	b.n	8003adc <UART_SetConfig+0x18c>
 8003ac2:	231b      	movs	r3, #27
 8003ac4:	2218      	movs	r2, #24
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	19db      	adds	r3, r3, r7
 8003aca:	2210      	movs	r2, #16
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e005      	b.n	8003adc <UART_SetConfig+0x18c>
 8003ad0:	231b      	movs	r3, #27
 8003ad2:	2218      	movs	r2, #24
 8003ad4:	189b      	adds	r3, r3, r2
 8003ad6:	19db      	adds	r3, r3, r7
 8003ad8:	2210      	movs	r2, #16
 8003ada:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5e      	ldr	r2, [pc, #376]	@ (8003c5c <UART_SetConfig+0x30c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d000      	beq.n	8003ae8 <UART_SetConfig+0x198>
 8003ae6:	e084      	b.n	8003bf2 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ae8:	231b      	movs	r3, #27
 8003aea:	2218      	movs	r2, #24
 8003aec:	189b      	adds	r3, r3, r2
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d01d      	beq.n	8003b32 <UART_SetConfig+0x1e2>
 8003af6:	dc20      	bgt.n	8003b3a <UART_SetConfig+0x1ea>
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d015      	beq.n	8003b28 <UART_SetConfig+0x1d8>
 8003afc:	dc1d      	bgt.n	8003b3a <UART_SetConfig+0x1ea>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <UART_SetConfig+0x1b8>
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d005      	beq.n	8003b12 <UART_SetConfig+0x1c2>
 8003b06:	e018      	b.n	8003b3a <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7fe fd9e 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b10:	e01c      	b.n	8003b4c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b12:	4b55      	ldr	r3, [pc, #340]	@ (8003c68 <UART_SetConfig+0x318>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2210      	movs	r2, #16
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d002      	beq.n	8003b22 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b1c:	4b53      	ldr	r3, [pc, #332]	@ (8003c6c <UART_SetConfig+0x31c>)
 8003b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b20:	e014      	b.n	8003b4c <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8003b22:	4b53      	ldr	r3, [pc, #332]	@ (8003c70 <UART_SetConfig+0x320>)
 8003b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b26:	e011      	b.n	8003b4c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b28:	f7fe fcfe 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b30:	e00c      	b.n	8003b4c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b32:	2380      	movs	r3, #128	@ 0x80
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003b38:	e008      	b.n	8003b4c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003b3e:	231a      	movs	r3, #26
 8003b40:	2218      	movs	r2, #24
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	19db      	adds	r3, r3, r7
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
        break;
 8003b4a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d100      	bne.n	8003b54 <UART_SetConfig+0x204>
 8003b52:	e12f      	b.n	8003db4 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	0013      	movs	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	189b      	adds	r3, r3, r2
 8003b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d305      	bcc.n	8003b70 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d906      	bls.n	8003b7e <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003b70:	231a      	movs	r3, #26
 8003b72:	2218      	movs	r2, #24
 8003b74:	189b      	adds	r3, r3, r2
 8003b76:	19db      	adds	r3, r3, r7
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	e11a      	b.n	8003db4 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	6939      	ldr	r1, [r7, #16]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	000b      	movs	r3, r1
 8003b8c:	0e1b      	lsrs	r3, r3, #24
 8003b8e:	0010      	movs	r0, r2
 8003b90:	0205      	lsls	r5, r0, #8
 8003b92:	431d      	orrs	r5, r3
 8003b94:	000b      	movs	r3, r1
 8003b96:	021c      	lsls	r4, r3, #8
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68b8      	ldr	r0, [r7, #8]
 8003ba6:	68f9      	ldr	r1, [r7, #12]
 8003ba8:	1900      	adds	r0, r0, r4
 8003baa:	4169      	adcs	r1, r5
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f7fc fc1b 	bl	80003f4 <__aeabi_uldivmod>
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	000b      	movs	r3, r1
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bc8:	23c0      	movs	r3, #192	@ 0xc0
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d309      	bcc.n	8003be4 <UART_SetConfig+0x294>
 8003bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bd2:	2380      	movs	r3, #128	@ 0x80
 8003bd4:	035b      	lsls	r3, r3, #13
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d204      	bcs.n	8003be4 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	e0e7      	b.n	8003db4 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003be4:	231a      	movs	r3, #26
 8003be6:	2218      	movs	r2, #24
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	19db      	adds	r3, r3, r7
 8003bec:	2201      	movs	r2, #1
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	e0e0      	b.n	8003db4 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	2380      	movs	r3, #128	@ 0x80
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d000      	beq.n	8003c00 <UART_SetConfig+0x2b0>
 8003bfe:	e082      	b.n	8003d06 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8003c00:	231b      	movs	r3, #27
 8003c02:	2218      	movs	r2, #24
 8003c04:	189b      	adds	r3, r3, r2
 8003c06:	19db      	adds	r3, r3, r7
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d834      	bhi.n	8003c78 <UART_SetConfig+0x328>
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	4b18      	ldr	r3, [pc, #96]	@ (8003c74 <UART_SetConfig+0x324>)
 8003c12:	18d3      	adds	r3, r2, r3
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c18:	f7fe fd16 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c20:	e033      	b.n	8003c8a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c22:	f7fe fd27 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 8003c26:	0003      	movs	r3, r0
 8003c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c2a:	e02e      	b.n	8003c8a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c68 <UART_SetConfig+0x318>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2210      	movs	r2, #16
 8003c32:	4013      	ands	r3, r2
 8003c34:	d002      	beq.n	8003c3c <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c36:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <UART_SetConfig+0x31c>)
 8003c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c3a:	e026      	b.n	8003c8a <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <UART_SetConfig+0x320>)
 8003c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c40:	e023      	b.n	8003c8a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c42:	f7fe fc71 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8003c46:	0003      	movs	r3, r0
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c4a:	e01e      	b.n	8003c8a <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4c:	2380      	movs	r3, #128	@ 0x80
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c52:	e01a      	b.n	8003c8a <UART_SetConfig+0x33a>
 8003c54:	efff69f3 	.word	0xefff69f3
 8003c58:	ffffcfff 	.word	0xffffcfff
 8003c5c:	40004800 	.word	0x40004800
 8003c60:	fffff4ff 	.word	0xfffff4ff
 8003c64:	40004400 	.word	0x40004400
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	003d0900 	.word	0x003d0900
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	080049e0 	.word	0x080049e0
      default:
        pclk = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003c7c:	231a      	movs	r3, #26
 8003c7e:	2218      	movs	r2, #24
 8003c80:	189b      	adds	r3, r3, r2
 8003c82:	19db      	adds	r3, r3, r7
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
        break;
 8003c88:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d100      	bne.n	8003c92 <UART_SetConfig+0x342>
 8003c90:	e090      	b.n	8003db4 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c94:	005a      	lsls	r2, r3, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	18d2      	adds	r2, r2, r3
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	0010      	movs	r0, r2
 8003ca6:	f7fc fa2f 	bl	8000108 <__udivsi3>
 8003caa:	0003      	movs	r3, r0
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d921      	bls.n	8003cf8 <UART_SetConfig+0x3a8>
 8003cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	025b      	lsls	r3, r3, #9
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d21c      	bcs.n	8003cf8 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	200e      	movs	r0, #14
 8003cc4:	2418      	movs	r4, #24
 8003cc6:	1903      	adds	r3, r0, r4
 8003cc8:	19db      	adds	r3, r3, r7
 8003cca:	210f      	movs	r1, #15
 8003ccc:	438a      	bics	r2, r1
 8003cce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2207      	movs	r2, #7
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b299      	uxth	r1, r3
 8003cdc:	1903      	adds	r3, r0, r4
 8003cde:	19db      	adds	r3, r3, r7
 8003ce0:	1902      	adds	r2, r0, r4
 8003ce2:	19d2      	adds	r2, r2, r7
 8003ce4:	8812      	ldrh	r2, [r2, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1902      	adds	r2, r0, r4
 8003cf0:	19d2      	adds	r2, r2, r7
 8003cf2:	8812      	ldrh	r2, [r2, #0]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	e05d      	b.n	8003db4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf8:	231a      	movs	r3, #26
 8003cfa:	2218      	movs	r2, #24
 8003cfc:	189b      	adds	r3, r3, r2
 8003cfe:	19db      	adds	r3, r3, r7
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e056      	b.n	8003db4 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d06:	231b      	movs	r3, #27
 8003d08:	2218      	movs	r2, #24
 8003d0a:	189b      	adds	r3, r3, r2
 8003d0c:	19db      	adds	r3, r3, r7
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d822      	bhi.n	8003d5a <UART_SetConfig+0x40a>
 8003d14:	009a      	lsls	r2, r3, #2
 8003d16:	4b2f      	ldr	r3, [pc, #188]	@ (8003dd4 <UART_SetConfig+0x484>)
 8003d18:	18d3      	adds	r3, r2, r3
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1e:	f7fe fc93 	bl	8002648 <HAL_RCC_GetPCLK1Freq>
 8003d22:	0003      	movs	r3, r0
 8003d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d26:	e021      	b.n	8003d6c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7fe fca4 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d30:	e01c      	b.n	8003d6c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d32:	4b29      	ldr	r3, [pc, #164]	@ (8003dd8 <UART_SetConfig+0x488>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2210      	movs	r2, #16
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d002      	beq.n	8003d42 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d3c:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <UART_SetConfig+0x48c>)
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d40:	e014      	b.n	8003d6c <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8003d42:	4b27      	ldr	r3, [pc, #156]	@ (8003de0 <UART_SetConfig+0x490>)
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d46:	e011      	b.n	8003d6c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d48:	f7fe fbee 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d50:	e00c      	b.n	8003d6c <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003d58:	e008      	b.n	8003d6c <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003d5e:	231a      	movs	r3, #26
 8003d60:	2218      	movs	r2, #24
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	19db      	adds	r3, r3, r7
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
        break;
 8003d6a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d020      	beq.n	8003db4 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	085a      	lsrs	r2, r3, #1
 8003d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7a:	18d2      	adds	r2, r2, r3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0019      	movs	r1, r3
 8003d82:	0010      	movs	r0, r2
 8003d84:	f7fc f9c0 	bl	8000108 <__udivsi3>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	d90a      	bls.n	8003da8 <UART_SetConfig+0x458>
 8003d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d94:	2380      	movs	r3, #128	@ 0x80
 8003d96:	025b      	lsls	r3, r3, #9
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d205      	bcs.n	8003da8 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	e005      	b.n	8003db4 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003da8:	231a      	movs	r3, #26
 8003daa:	2218      	movs	r2, #24
 8003dac:	189b      	adds	r3, r3, r2
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	2201      	movs	r2, #1
 8003db2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2200      	movs	r2, #0
 8003db8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003dc0:	231a      	movs	r3, #26
 8003dc2:	2218      	movs	r2, #24
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	19db      	adds	r3, r3, r7
 8003dc8:	781b      	ldrb	r3, [r3, #0]
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b00e      	add	sp, #56	@ 0x38
 8003dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	08004a04 	.word	0x08004a04
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	003d0900 	.word	0x003d0900
 8003de0:	00f42400 	.word	0x00f42400

08003de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	2208      	movs	r2, #8
 8003df2:	4013      	ands	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003f28 <UART_AdvFeatureConfig+0x144>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	2201      	movs	r2, #1
 8003e14:	4013      	ands	r3, r2
 8003e16:	d00b      	beq.n	8003e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4a43      	ldr	r2, [pc, #268]	@ (8003f2c <UART_AdvFeatureConfig+0x148>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	2202      	movs	r2, #2
 8003e36:	4013      	ands	r3, r2
 8003e38:	d00b      	beq.n	8003e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a3b      	ldr	r2, [pc, #236]	@ (8003f30 <UART_AdvFeatureConfig+0x14c>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	0019      	movs	r1, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	2204      	movs	r2, #4
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4a34      	ldr	r2, [pc, #208]	@ (8003f34 <UART_AdvFeatureConfig+0x150>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	2210      	movs	r2, #16
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a2c      	ldr	r2, [pc, #176]	@ (8003f38 <UART_AdvFeatureConfig+0x154>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	4a25      	ldr	r2, [pc, #148]	@ (8003f3c <UART_AdvFeatureConfig+0x158>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	0019      	movs	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	2240      	movs	r2, #64	@ 0x40
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d01d      	beq.n	8003efe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f40 <UART_AdvFeatureConfig+0x15c>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ede:	2380      	movs	r3, #128	@ 0x80
 8003ee0:	035b      	lsls	r3, r3, #13
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d10b      	bne.n	8003efe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <UART_AdvFeatureConfig+0x160>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	2280      	movs	r2, #128	@ 0x80
 8003f04:	4013      	ands	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f48 <UART_AdvFeatureConfig+0x164>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }
}
 8003f20:	46c0      	nop			@ (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	ffff7fff 	.word	0xffff7fff
 8003f2c:	fffdffff 	.word	0xfffdffff
 8003f30:	fffeffff 	.word	0xfffeffff
 8003f34:	fffbffff 	.word	0xfffbffff
 8003f38:	ffffefff 	.word	0xffffefff
 8003f3c:	ffffdfff 	.word	0xffffdfff
 8003f40:	ffefffff 	.word	0xffefffff
 8003f44:	ff9fffff 	.word	0xff9fffff
 8003f48:	fff7ffff 	.word	0xfff7ffff

08003f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b092      	sub	sp, #72	@ 0x48
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2284      	movs	r2, #132	@ 0x84
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f5c:	f7fd fadc 	bl	8001518 <HAL_GetTick>
 8003f60:	0003      	movs	r3, r0
 8003f62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d12c      	bne.n	8003fcc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f74:	2280      	movs	r2, #128	@ 0x80
 8003f76:	0391      	lsls	r1, r2, #14
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4a46      	ldr	r2, [pc, #280]	@ (8004094 <UART_CheckIdleState+0x148>)
 8003f7c:	9200      	str	r2, [sp, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f000 f88c 	bl	800409c <UART_WaitOnFlagUntilTimeout>
 8003f84:	1e03      	subs	r3, r0, #0
 8003f86:	d021      	beq.n	8003fcc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f92:	2301      	movs	r3, #1
 8003f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2180      	movs	r1, #128	@ 0x80
 8003faa:	438a      	bics	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb4:	f383 8810 	msr	PRIMASK, r3
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2278      	movs	r2, #120	@ 0x78
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e05f      	b.n	800408c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d146      	bne.n	8004068 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fdc:	2280      	movs	r2, #128	@ 0x80
 8003fde:	03d1      	lsls	r1, r2, #15
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8004094 <UART_CheckIdleState+0x148>)
 8003fe4:	9200      	str	r2, [sp, #0]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f000 f858 	bl	800409c <UART_WaitOnFlagUntilTimeout>
 8003fec:	1e03      	subs	r3, r0, #0
 8003fee:	d03b      	beq.n	8004068 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f383 8810 	msr	PRIMASK, r3
}
 8004004:	46c0      	nop			@ (mov r8, r8)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4921      	ldr	r1, [pc, #132]	@ (8004098 <UART_CheckIdleState+0x14c>)
 8004012:	400a      	ands	r2, r1
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004018:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f383 8810 	msr	PRIMASK, r3
}
 8004020:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004022:	f3ef 8310 	mrs	r3, PRIMASK
 8004026:	61bb      	str	r3, [r7, #24]
  return(result);
 8004028:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402a:	633b      	str	r3, [r7, #48]	@ 0x30
 800402c:	2301      	movs	r3, #1
 800402e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f383 8810 	msr	PRIMASK, r3
}
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2101      	movs	r1, #1
 8004044:	438a      	bics	r2, r1
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f383 8810 	msr	PRIMASK, r3
}
 8004052:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2280      	movs	r2, #128	@ 0x80
 8004058:	2120      	movs	r1, #32
 800405a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2278      	movs	r2, #120	@ 0x78
 8004060:	2100      	movs	r1, #0
 8004062:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e011      	b.n	800408c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2280      	movs	r2, #128	@ 0x80
 8004072:	2120      	movs	r1, #32
 8004074:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2278      	movs	r2, #120	@ 0x78
 8004086:	2100      	movs	r1, #0
 8004088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	0018      	movs	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	b010      	add	sp, #64	@ 0x40
 8004092:	bd80      	pop	{r7, pc}
 8004094:	01ffffff 	.word	0x01ffffff
 8004098:	fffffedf 	.word	0xfffffedf

0800409c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	1dfb      	adds	r3, r7, #7
 80040aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ac:	e051      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	3301      	adds	r3, #1
 80040b2:	d04e      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b4:	f7fd fa30 	bl	8001518 <HAL_GetTick>
 80040b8:	0002      	movs	r2, r0
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d302      	bcc.n	80040ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e051      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2204      	movs	r2, #4
 80040d6:	4013      	ands	r3, r2
 80040d8:	d03b      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0xb6>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	d038      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0xb6>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b40      	cmp	r3, #64	@ 0x40
 80040e4:	d035      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2208      	movs	r2, #8
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d111      	bne.n	8004118 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2208      	movs	r2, #8
 80040fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 f906 	bl	8004310 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2284      	movs	r2, #132	@ 0x84
 8004108:	2108      	movs	r1, #8
 800410a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2278      	movs	r2, #120	@ 0x78
 8004110:	2100      	movs	r1, #0
 8004112:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e02c      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	2380      	movs	r3, #128	@ 0x80
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	401a      	ands	r2, r3
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	429a      	cmp	r2, r3
 800412a:	d112      	bne.n	8004152 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2280      	movs	r2, #128	@ 0x80
 8004132:	0112      	lsls	r2, r2, #4
 8004134:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	0018      	movs	r0, r3
 800413a:	f000 f8e9 	bl	8004310 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2284      	movs	r2, #132	@ 0x84
 8004142:	2120      	movs	r1, #32
 8004144:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2278      	movs	r2, #120	@ 0x78
 800414a:	2100      	movs	r1, #0
 800414c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e00f      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	4013      	ands	r3, r2
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	425a      	negs	r2, r3
 8004162:	4153      	adcs	r3, r2
 8004164:	b2db      	uxtb	r3, r3
 8004166:	001a      	movs	r2, r3
 8004168:	1dfb      	adds	r3, r7, #7
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d09e      	beq.n	80040ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b004      	add	sp, #16
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b090      	sub	sp, #64	@ 0x40
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1dba      	adds	r2, r7, #6
 8004194:	2158      	movs	r1, #88	@ 0x58
 8004196:	8812      	ldrh	r2, [r2, #0]
 8004198:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1dba      	adds	r2, r7, #6
 800419e:	215a      	movs	r1, #90	@ 0x5a
 80041a0:	8812      	ldrh	r2, [r2, #0]
 80041a2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	015b      	lsls	r3, r3, #5
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d10d      	bne.n	80041d2 <UART_Start_Receive_IT+0x56>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <UART_Start_Receive_IT+0x4c>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	225c      	movs	r2, #92	@ 0x5c
 80041c2:	4950      	ldr	r1, [pc, #320]	@ (8004304 <UART_Start_Receive_IT+0x188>)
 80041c4:	5299      	strh	r1, [r3, r2]
 80041c6:	e02e      	b.n	8004226 <UART_Start_Receive_IT+0xaa>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	225c      	movs	r2, #92	@ 0x5c
 80041cc:	21ff      	movs	r1, #255	@ 0xff
 80041ce:	5299      	strh	r1, [r3, r2]
 80041d0:	e029      	b.n	8004226 <UART_Start_Receive_IT+0xaa>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10d      	bne.n	80041f6 <UART_Start_Receive_IT+0x7a>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <UART_Start_Receive_IT+0x70>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	225c      	movs	r2, #92	@ 0x5c
 80041e6:	21ff      	movs	r1, #255	@ 0xff
 80041e8:	5299      	strh	r1, [r3, r2]
 80041ea:	e01c      	b.n	8004226 <UART_Start_Receive_IT+0xaa>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	225c      	movs	r2, #92	@ 0x5c
 80041f0:	217f      	movs	r1, #127	@ 0x7f
 80041f2:	5299      	strh	r1, [r3, r2]
 80041f4:	e017      	b.n	8004226 <UART_Start_Receive_IT+0xaa>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	055b      	lsls	r3, r3, #21
 80041fe:	429a      	cmp	r2, r3
 8004200:	d10d      	bne.n	800421e <UART_Start_Receive_IT+0xa2>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d104      	bne.n	8004214 <UART_Start_Receive_IT+0x98>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	225c      	movs	r2, #92	@ 0x5c
 800420e:	217f      	movs	r1, #127	@ 0x7f
 8004210:	5299      	strh	r1, [r3, r2]
 8004212:	e008      	b.n	8004226 <UART_Start_Receive_IT+0xaa>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	225c      	movs	r2, #92	@ 0x5c
 8004218:	213f      	movs	r1, #63	@ 0x3f
 800421a:	5299      	strh	r1, [r3, r2]
 800421c:	e003      	b.n	8004226 <UART_Start_Receive_IT+0xaa>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	225c      	movs	r2, #92	@ 0x5c
 8004222:	2100      	movs	r1, #0
 8004224:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2284      	movs	r2, #132	@ 0x84
 800422a:	2100      	movs	r1, #0
 800422c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2280      	movs	r2, #128	@ 0x80
 8004232:	2122      	movs	r1, #34	@ 0x22
 8004234:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004236:	f3ef 8310 	mrs	r3, PRIMASK
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800423c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004240:	2301      	movs	r3, #1
 8004242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004246:	f383 8810 	msr	PRIMASK, r3
}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2101      	movs	r1, #1
 8004258:	430a      	orrs	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800425e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	015b      	lsls	r3, r3, #5
 8004270:	429a      	cmp	r2, r3
 8004272:	d107      	bne.n	8004284 <UART_Start_Receive_IT+0x108>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a22      	ldr	r2, [pc, #136]	@ (8004308 <UART_Start_Receive_IT+0x18c>)
 8004280:	669a      	str	r2, [r3, #104]	@ 0x68
 8004282:	e002      	b.n	800428a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a21      	ldr	r2, [pc, #132]	@ (800430c <UART_Start_Receive_IT+0x190>)
 8004288:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d019      	beq.n	80042c6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004292:	f3ef 8310 	mrs	r3, PRIMASK
 8004296:	61fb      	str	r3, [r7, #28]
  return(result);
 8004298:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800429a:	637b      	str	r3, [r7, #52]	@ 0x34
 800429c:	2301      	movs	r3, #1
 800429e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	f383 8810 	msr	PRIMASK, r3
}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2190      	movs	r1, #144	@ 0x90
 80042b4:	0049      	lsls	r1, r1, #1
 80042b6:	430a      	orrs	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	e018      	b.n	80042f8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ca:	613b      	str	r3, [r7, #16]
  return(result);
 80042cc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80042ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042d0:	2301      	movs	r3, #1
 80042d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f383 8810 	msr	PRIMASK, r3
}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2120      	movs	r1, #32
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f383 8810 	msr	PRIMASK, r3
}
 80042f6:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b010      	add	sp, #64	@ 0x40
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	000001ff 	.word	0x000001ff
 8004308:	08004619 	.word	0x08004619
 800430c:	08004455 	.word	0x08004455

08004310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	@ 0x38
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004318:	f3ef 8310 	mrs	r3, PRIMASK
 800431c:	617b      	str	r3, [r7, #20]
  return(result);
 800431e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004320:	637b      	str	r3, [r7, #52]	@ 0x34
 8004322:	2301      	movs	r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f383 8810 	msr	PRIMASK, r3
}
 800432c:	46c0      	nop			@ (mov r8, r8)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4926      	ldr	r1, [pc, #152]	@ (80043d4 <UART_EndRxTransfer+0xc4>)
 800433a:	400a      	ands	r2, r1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004340:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f383 8810 	msr	PRIMASK, r3
}
 8004348:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800434a:	f3ef 8310 	mrs	r3, PRIMASK
 800434e:	623b      	str	r3, [r7, #32]
  return(result);
 8004350:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	633b      	str	r3, [r7, #48]	@ 0x30
 8004354:	2301      	movs	r3, #1
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	f383 8810 	msr	PRIMASK, r3
}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2101      	movs	r1, #1
 800436c:	438a      	bics	r2, r1
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	f383 8810 	msr	PRIMASK, r3
}
 800437a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004380:	2b01      	cmp	r3, #1
 8004382:	d118      	bne.n	80043b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004384:	f3ef 8310 	mrs	r3, PRIMASK
 8004388:	60bb      	str	r3, [r7, #8]
  return(result);
 800438a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800438e:	2301      	movs	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f383 8810 	msr	PRIMASK, r3
}
 8004398:	46c0      	nop			@ (mov r8, r8)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2110      	movs	r1, #16
 80043a6:	438a      	bics	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2280      	movs	r2, #128	@ 0x80
 80043ba:	2120      	movs	r1, #32
 80043bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b00e      	add	sp, #56	@ 0x38
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	fffffedf 	.word	0xfffffedf

080043d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	225a      	movs	r2, #90	@ 0x5a
 80043ea:	2100      	movs	r1, #0
 80043ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff fa99 	bl	8003928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b004      	add	sp, #16
 80043fc:	bd80      	pop	{r7, pc}

080043fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004406:	f3ef 8310 	mrs	r3, PRIMASK
 800440a:	60bb      	str	r3, [r7, #8]
  return(result);
 800440c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	2301      	movs	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f383 8810 	msr	PRIMASK, r3
}
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2140      	movs	r1, #64	@ 0x40
 8004428:	438a      	bics	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f7ff fa66 	bl	8003918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b006      	add	sp, #24
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b094      	sub	sp, #80	@ 0x50
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800445c:	204e      	movs	r0, #78	@ 0x4e
 800445e:	183b      	adds	r3, r7, r0
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	215c      	movs	r1, #92	@ 0x5c
 8004464:	5a52      	ldrh	r2, [r2, r1]
 8004466:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2280      	movs	r2, #128	@ 0x80
 800446c:	589b      	ldr	r3, [r3, r2]
 800446e:	2b22      	cmp	r3, #34	@ 0x22
 8004470:	d000      	beq.n	8004474 <UART_RxISR_8BIT+0x20>
 8004472:	e0bf      	b.n	80045f4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800447a:	214c      	movs	r1, #76	@ 0x4c
 800447c:	187b      	adds	r3, r7, r1
 800447e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004480:	187b      	adds	r3, r7, r1
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b2da      	uxtb	r2, r3
 8004486:	183b      	adds	r3, r7, r0
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b2d9      	uxtb	r1, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004490:	400a      	ands	r2, r1
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	225a      	movs	r2, #90	@ 0x5a
 80044a4:	5a9b      	ldrh	r3, [r3, r2]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b299      	uxth	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	225a      	movs	r2, #90	@ 0x5a
 80044b0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	225a      	movs	r2, #90	@ 0x5a
 80044b6:	5a9b      	ldrh	r3, [r3, r2]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d000      	beq.n	80044c0 <UART_RxISR_8BIT+0x6c>
 80044be:	e0a1      	b.n	8004604 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c0:	f3ef 8310 	mrs	r3, PRIMASK
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ca:	2301      	movs	r3, #1
 80044cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	f383 8810 	msr	PRIMASK, r3
}
 80044d4:	46c0      	nop			@ (mov r8, r8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	494a      	ldr	r1, [pc, #296]	@ (800460c <UART_RxISR_8BIT+0x1b8>)
 80044e2:	400a      	ands	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ec:	f383 8810 	msr	PRIMASK, r3
}
 80044f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f2:	f3ef 8310 	mrs	r3, PRIMASK
 80044f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80044f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80044fc:	2301      	movs	r3, #1
 80044fe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004502:	f383 8810 	msr	PRIMASK, r3
}
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2101      	movs	r1, #1
 8004514:	438a      	bics	r2, r1
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451e:	f383 8810 	msr	PRIMASK, r3
}
 8004522:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2280      	movs	r2, #128	@ 0x80
 8004528:	2120      	movs	r1, #32
 800452a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a34      	ldr	r2, [pc, #208]	@ (8004610 <UART_RxISR_8BIT+0x1bc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01f      	beq.n	8004582 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	2380      	movs	r3, #128	@ 0x80
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	4013      	ands	r3, r2
 800454e:	d018      	beq.n	8004582 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004550:	f3ef 8310 	mrs	r3, PRIMASK
 8004554:	61bb      	str	r3, [r7, #24]
  return(result);
 8004556:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004558:	643b      	str	r3, [r7, #64]	@ 0x40
 800455a:	2301      	movs	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f383 8810 	msr	PRIMASK, r3
}
 8004564:	46c0      	nop			@ (mov r8, r8)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4928      	ldr	r1, [pc, #160]	@ (8004614 <UART_RxISR_8BIT+0x1c0>)
 8004572:	400a      	ands	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004578:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f383 8810 	msr	PRIMASK, r3
}
 8004580:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004586:	2b01      	cmp	r3, #1
 8004588:	d12f      	bne.n	80045ea <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004590:	f3ef 8310 	mrs	r3, PRIMASK
 8004594:	60fb      	str	r3, [r7, #12]
  return(result);
 8004596:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800459a:	2301      	movs	r3, #1
 800459c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f383 8810 	msr	PRIMASK, r3
}
 80045a4:	46c0      	nop			@ (mov r8, r8)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2110      	movs	r1, #16
 80045b2:	438a      	bics	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	2210      	movs	r2, #16
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d103      	bne.n	80045d8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2210      	movs	r2, #16
 80045d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2258      	movs	r2, #88	@ 0x58
 80045dc:	5a9a      	ldrh	r2, [r3, r2]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	0011      	movs	r1, r2
 80045e2:	0018      	movs	r0, r3
 80045e4:	f7ff f9a8 	bl	8003938 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045e8:	e00c      	b.n	8004604 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7fc fe93 	bl	8001318 <HAL_UART_RxCpltCallback>
}
 80045f2:	e007      	b.n	8004604 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2108      	movs	r1, #8
 8004600:	430a      	orrs	r2, r1
 8004602:	619a      	str	r2, [r3, #24]
}
 8004604:	46c0      	nop			@ (mov r8, r8)
 8004606:	46bd      	mov	sp, r7
 8004608:	b014      	add	sp, #80	@ 0x50
 800460a:	bd80      	pop	{r7, pc}
 800460c:	fffffedf 	.word	0xfffffedf
 8004610:	40004800 	.word	0x40004800
 8004614:	fbffffff 	.word	0xfbffffff

08004618 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b094      	sub	sp, #80	@ 0x50
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004620:	204e      	movs	r0, #78	@ 0x4e
 8004622:	183b      	adds	r3, r7, r0
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	215c      	movs	r1, #92	@ 0x5c
 8004628:	5a52      	ldrh	r2, [r2, r1]
 800462a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2280      	movs	r2, #128	@ 0x80
 8004630:	589b      	ldr	r3, [r3, r2]
 8004632:	2b22      	cmp	r3, #34	@ 0x22
 8004634:	d000      	beq.n	8004638 <UART_RxISR_16BIT+0x20>
 8004636:	e0bf      	b.n	80047b8 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800463e:	214c      	movs	r1, #76	@ 0x4c
 8004640:	187b      	adds	r3, r7, r1
 8004642:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004648:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800464a:	187b      	adds	r3, r7, r1
 800464c:	183a      	adds	r2, r7, r0
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	8812      	ldrh	r2, [r2, #0]
 8004652:	4013      	ands	r3, r2
 8004654:	b29a      	uxth	r2, r3
 8004656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004658:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	225a      	movs	r2, #90	@ 0x5a
 8004668:	5a9b      	ldrh	r3, [r3, r2]
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b299      	uxth	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	225a      	movs	r2, #90	@ 0x5a
 8004674:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	225a      	movs	r2, #90	@ 0x5a
 800467a:	5a9b      	ldrh	r3, [r3, r2]
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d000      	beq.n	8004684 <UART_RxISR_16BIT+0x6c>
 8004682:	e0a1      	b.n	80047c8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004684:	f3ef 8310 	mrs	r3, PRIMASK
 8004688:	623b      	str	r3, [r7, #32]
  return(result);
 800468a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800468c:	647b      	str	r3, [r7, #68]	@ 0x44
 800468e:	2301      	movs	r3, #1
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	f383 8810 	msr	PRIMASK, r3
}
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	494a      	ldr	r1, [pc, #296]	@ (80047d0 <UART_RxISR_16BIT+0x1b8>)
 80046a6:	400a      	ands	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b0:	f383 8810 	msr	PRIMASK, r3
}
 80046b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b6:	f3ef 8310 	mrs	r3, PRIMASK
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80046bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c0:	2301      	movs	r3, #1
 80046c2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c6:	f383 8810 	msr	PRIMASK, r3
}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2101      	movs	r1, #1
 80046d8:	438a      	bics	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046de:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e2:	f383 8810 	msr	PRIMASK, r3
}
 80046e6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2280      	movs	r2, #128	@ 0x80
 80046ec:	2120      	movs	r1, #32
 80046ee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a34      	ldr	r2, [pc, #208]	@ (80047d4 <UART_RxISR_16BIT+0x1bc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d01f      	beq.n	8004746 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	2380      	movs	r3, #128	@ 0x80
 800470e:	041b      	lsls	r3, r3, #16
 8004710:	4013      	ands	r3, r2
 8004712:	d018      	beq.n	8004746 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004714:	f3ef 8310 	mrs	r3, PRIMASK
 8004718:	617b      	str	r3, [r7, #20]
  return(result);
 800471a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800471c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471e:	2301      	movs	r3, #1
 8004720:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f383 8810 	msr	PRIMASK, r3
}
 8004728:	46c0      	nop			@ (mov r8, r8)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4928      	ldr	r1, [pc, #160]	@ (80047d8 <UART_RxISR_16BIT+0x1c0>)
 8004736:	400a      	ands	r2, r1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f383 8810 	msr	PRIMASK, r3
}
 8004744:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474a:	2b01      	cmp	r3, #1
 800474c:	d12f      	bne.n	80047ae <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004754:	f3ef 8310 	mrs	r3, PRIMASK
 8004758:	60bb      	str	r3, [r7, #8]
  return(result);
 800475a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800475e:	2301      	movs	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f383 8810 	msr	PRIMASK, r3
}
 8004768:	46c0      	nop			@ (mov r8, r8)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2110      	movs	r1, #16
 8004776:	438a      	bics	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	2210      	movs	r2, #16
 800478e:	4013      	ands	r3, r2
 8004790:	2b10      	cmp	r3, #16
 8004792:	d103      	bne.n	800479c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2258      	movs	r2, #88	@ 0x58
 80047a0:	5a9a      	ldrh	r2, [r3, r2]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0011      	movs	r1, r2
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7ff f8c6 	bl	8003938 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047ac:	e00c      	b.n	80047c8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fc fdb1 	bl	8001318 <HAL_UART_RxCpltCallback>
}
 80047b6:	e007      	b.n	80047c8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2108      	movs	r1, #8
 80047c4:	430a      	orrs	r2, r1
 80047c6:	619a      	str	r2, [r3, #24]
}
 80047c8:	46c0      	nop			@ (mov r8, r8)
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b014      	add	sp, #80	@ 0x50
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	fffffedf 	.word	0xfffffedf
 80047d4:	40004800 	.word	0x40004800
 80047d8:	fbffffff 	.word	0xfbffffff

080047dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047e4:	46c0      	nop			@ (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b002      	add	sp, #8
 80047ea:	bd80      	pop	{r7, pc}

080047ec <memset>:
 80047ec:	0003      	movs	r3, r0
 80047ee:	1882      	adds	r2, r0, r2
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d100      	bne.n	80047f6 <memset+0xa>
 80047f4:	4770      	bx	lr
 80047f6:	7019      	strb	r1, [r3, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	e7f9      	b.n	80047f0 <memset+0x4>

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	2600      	movs	r6, #0
 8004800:	4c0c      	ldr	r4, [pc, #48]	@ (8004834 <__libc_init_array+0x38>)
 8004802:	4d0d      	ldr	r5, [pc, #52]	@ (8004838 <__libc_init_array+0x3c>)
 8004804:	1b64      	subs	r4, r4, r5
 8004806:	10a4      	asrs	r4, r4, #2
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	2600      	movs	r6, #0
 800480e:	f000 f819 	bl	8004844 <_init>
 8004812:	4c0a      	ldr	r4, [pc, #40]	@ (800483c <__libc_init_array+0x40>)
 8004814:	4d0a      	ldr	r5, [pc, #40]	@ (8004840 <__libc_init_array+0x44>)
 8004816:	1b64      	subs	r4, r4, r5
 8004818:	10a4      	asrs	r4, r4, #2
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	00b3      	lsls	r3, r6, #2
 8004822:	58eb      	ldr	r3, [r5, r3]
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	00b3      	lsls	r3, r6, #2
 800482c:	58eb      	ldr	r3, [r5, r3]
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	08004a30 	.word	0x08004a30
 8004838:	08004a30 	.word	0x08004a30
 800483c:	08004a34 	.word	0x08004a34
 8004840:	08004a30 	.word	0x08004a30

08004844 <_init>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr

08004850 <_fini>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr
